/*! For license information please see main.js.LICENSE.txt */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var i in n)("object"==typeof exports?exports:t)[i]=n[i]}}(self,(function(){return(()=>{"use strict";var t={169:(t,e,n)=>{n.r(e),n.d(e,{Alert:()=>be,Button:()=>we,Carousel:()=>Re,Collapse:()=>Ke,Dropdown:()=>pn,Modal:()=>Rn,Offcanvas:()=>zn,Popover:()=>_i,ScrollSpy:()=>Ai,Tab:()=>xi,Toast:()=>Pi,Tooltip:()=>di});var i={};n.r(i),n.d(i,{afterMain:()=>A,afterRead:()=>y,afterWrite:()=>k,applyStyles:()=>N,arrow:()=>G,auto:()=>l,basePlacements:()=>c,beforeMain:()=>w,beforeRead:()=>v,beforeWrite:()=>T,bottom:()=>o,clippingParents:()=>u,computeStyles:()=>tt,createPopper:()=>It,createPopperBase:()=>xt,createPopperLite:()=>Dt,detectOverflow:()=>gt,end:()=>h,eventListeners:()=>nt,flip:()=>_t,hide:()=>yt,left:()=>a,main:()=>E,modifierPhases:()=>O,offset:()=>wt,placements:()=>_,popper:()=>p,popperGenerator:()=>Lt,popperOffsets:()=>Et,preventOverflow:()=>At,read:()=>b,reference:()=>m,right:()=>r,start:()=>d,top:()=>s,variationPlacements:()=>g,viewport:()=>f,write:()=>C});var s="top",o="bottom",r="right",a="left",l="auto",c=[s,o,r,a],d="start",h="end",u="clippingParents",f="viewport",p="popper",m="reference",g=c.reduce((function(t,e){return t.concat([e+"-"+d,e+"-"+h])}),[]),_=[].concat(c,[l]).reduce((function(t,e){return t.concat([e,e+"-"+d,e+"-"+h])}),[]),v="beforeRead",b="read",y="afterRead",w="beforeMain",E="main",A="afterMain",T="beforeWrite",C="write",k="afterWrite",O=[v,b,y,w,E,A,T,C,k];function L(t){return t?(t.nodeName||"").toLowerCase():null}function x(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function I(t){return t instanceof x(t).Element||t instanceof Element}function D(t){return t instanceof x(t).HTMLElement||t instanceof HTMLElement}function S(t){return"undefined"!=typeof ShadowRoot&&(t instanceof x(t).ShadowRoot||t instanceof ShadowRoot)}const N={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},s=e.elements[t];D(s)&&L(s)&&(Object.assign(s.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});D(i)&&L(i)&&(Object.assign(i.style,o),Object.keys(s).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function M(t){return t.split("-")[0]}function j(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height,top:e.top,right:e.right,bottom:e.bottom,left:e.left,x:e.left,y:e.top}}function P(t){var e=j(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function R(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&S(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function H(t){return x(t).getComputedStyle(t)}function B(t){return["table","td","th"].indexOf(L(t))>=0}function $(t){return((I(t)?t.ownerDocument:t.document)||window.document).documentElement}function W(t){return"html"===L(t)?t:t.assignedSlot||t.parentNode||(S(t)?t.host:null)||$(t)}function U(t){return D(t)&&"fixed"!==H(t).position?t.offsetParent:null}function q(t){for(var e=x(t),n=U(t);n&&B(n)&&"static"===H(n).position;)n=U(n);return n&&("html"===L(n)||"body"===L(n)&&"static"===H(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&D(t)&&"fixed"===H(t).position)return null;for(var n=W(t);D(n)&&["html","body"].indexOf(L(n))<0;){var i=H(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function F(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}var z=Math.max,V=Math.min,K=Math.round;function X(t,e,n){return z(t,V(e,n))}function Y(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function Q(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const G={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,i=t.name,l=t.options,d=n.elements.arrow,h=n.modifiersData.popperOffsets,u=M(n.placement),f=F(u),p=[a,r].indexOf(u)>=0?"height":"width";if(d&&h){var m=function(t,e){return Y("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:Q(t,c))}(l.padding,n),g=P(d),_="y"===f?s:a,v="y"===f?o:r,b=n.rects.reference[p]+n.rects.reference[f]-h[f]-n.rects.popper[p],y=h[f]-n.rects.reference[f],w=q(d),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=b/2-y/2,T=m[_],C=E-g[p]-m[v],k=E/2-g[p]/2+A,O=X(T,k,C),L=f;n.modifiersData[i]=((e={})[L]=O,e.centerOffset=O-k,e)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&R(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function J(t){var e,n=t.popper,i=t.popperRect,l=t.placement,c=t.offsets,d=t.position,h=t.gpuAcceleration,u=t.adaptive,f=t.roundOffsets,p=!0===f?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:K(K(e*i)/i)||0,y:K(K(n*i)/i)||0}}(c):"function"==typeof f?f(c):c,m=p.x,g=void 0===m?0:m,_=p.y,v=void 0===_?0:_,b=c.hasOwnProperty("x"),y=c.hasOwnProperty("y"),w=a,E=s,A=window;if(u){var T=q(n),C="clientHeight",k="clientWidth";T===x(n)&&"static"!==H(T=$(n)).position&&(C="scrollHeight",k="scrollWidth"),T=T,l===s&&(E=o,v-=T[C]-i.height,v*=h?1:-1),l===a&&(w=r,g-=T[k]-i.width,g*=h?1:-1)}var O,L=Object.assign({position:d},u&&Z);return h?Object.assign({},L,((O={})[E]=y?"0":"",O[w]=b?"0":"",O.transform=(A.devicePixelRatio||1)<2?"translate("+g+"px, "+v+"px)":"translate3d("+g+"px, "+v+"px, 0)",O)):Object.assign({},L,((e={})[E]=y?v+"px":"",e[w]=b?g+"px":"",e.transform="",e))}const tt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,s=void 0===i||i,o=n.adaptive,r=void 0===o||o,a=n.roundOffsets,l=void 0===a||a,c={placement:M(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,J(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,J(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var et={passive:!0};const nt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,s=i.scroll,o=void 0===s||s,r=i.resize,a=void 0===r||r,l=x(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",n.update,et)})),a&&l.addEventListener("resize",n.update,et),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",n.update,et)})),a&&l.removeEventListener("resize",n.update,et)}},data:{}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function st(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var ot={start:"end",end:"start"};function rt(t){return t.replace(/start|end/g,(function(t){return ot[t]}))}function at(t){var e=x(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function lt(t){return j($(t)).left+at(t).scrollLeft}function ct(t){var e=H(t),n=e.overflow,i=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+s+i)}function dt(t){return["html","body","#document"].indexOf(L(t))>=0?t.ownerDocument.body:D(t)&&ct(t)?t:dt(W(t))}function ht(t,e){var n;void 0===e&&(e=[]);var i=dt(t),s=i===(null==(n=t.ownerDocument)?void 0:n.body),o=x(i),r=s?[o].concat(o.visualViewport||[],ct(i)?i:[]):i,a=e.concat(r);return s?a:a.concat(ht(W(r)))}function ut(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ft(t,e){return e===f?ut(function(t){var e=x(t),n=$(t),i=e.visualViewport,s=n.clientWidth,o=n.clientHeight,r=0,a=0;return i&&(s=i.width,o=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=i.offsetLeft,a=i.offsetTop)),{width:s,height:o,x:r+lt(t),y:a}}(t)):D(e)?function(t){var e=j(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):ut(function(t){var e,n=$(t),i=at(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=z(n.scrollWidth,n.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=z(n.scrollHeight,n.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-i.scrollLeft+lt(t),l=-i.scrollTop;return"rtl"===H(s||n).direction&&(a+=z(n.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}($(t)))}function pt(t){return t.split("-")[1]}function mt(t){var e,n=t.reference,i=t.element,l=t.placement,c=l?M(l):null,u=l?pt(l):null,f=n.x+n.width/2-i.width/2,p=n.y+n.height/2-i.height/2;switch(c){case s:e={x:f,y:n.y-i.height};break;case o:e={x:f,y:n.y+n.height};break;case r:e={x:n.x+n.width,y:p};break;case a:e={x:n.x-i.width,y:p};break;default:e={x:n.x,y:n.y}}var m=c?F(c):null;if(null!=m){var g="y"===m?"height":"width";switch(u){case d:e[m]=e[m]-(n[g]/2-i[g]/2);break;case h:e[m]=e[m]+(n[g]/2-i[g]/2)}}return e}function gt(t,e){void 0===e&&(e={});var n=e,i=n.placement,a=void 0===i?t.placement:i,l=n.boundary,d=void 0===l?u:l,h=n.rootBoundary,g=void 0===h?f:h,_=n.elementContext,v=void 0===_?p:_,b=n.altBoundary,y=void 0!==b&&b,w=n.padding,E=void 0===w?0:w,A=Y("number"!=typeof E?E:Q(E,c)),T=v===p?m:p,C=t.elements.reference,k=t.rects.popper,O=t.elements[y?T:v],x=function(t,e,n){var i="clippingParents"===e?function(t){var e=ht(W(t)),n=["absolute","fixed"].indexOf(H(t).position)>=0&&D(t)?q(t):t;return I(n)?e.filter((function(t){return I(t)&&R(t,n)&&"body"!==L(t)})):[]}(t):[].concat(e),s=[].concat(i,[n]),o=s[0],r=s.reduce((function(e,n){var i=ft(t,n);return e.top=z(i.top,e.top),e.right=V(i.right,e.right),e.bottom=V(i.bottom,e.bottom),e.left=z(i.left,e.left),e}),ft(t,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(I(O)?O:O.contextElement||$(t.elements.popper),d,g),S=j(C),N=mt({reference:S,element:k,strategy:"absolute",placement:a}),M=ut(Object.assign({},k,N)),P=v===p?M:S,B={top:x.top-P.top+A.top,bottom:P.bottom-x.bottom+A.bottom,left:x.left-P.left+A.left,right:P.right-x.right+A.right},U=t.modifiersData.offset;if(v===p&&U){var F=U[a];Object.keys(B).forEach((function(t){var e=[r,o].indexOf(t)>=0?1:-1,n=[s,o].indexOf(t)>=0?"y":"x";B[t]+=F[n]*e}))}return B}const _t={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name;if(!e.modifiersData[i]._skip){for(var h=n.mainAxis,u=void 0===h||h,f=n.altAxis,p=void 0===f||f,m=n.fallbackPlacements,v=n.padding,b=n.boundary,y=n.rootBoundary,w=n.altBoundary,E=n.flipVariations,A=void 0===E||E,T=n.allowedAutoPlacements,C=e.options.placement,k=M(C),O=m||(k!==C&&A?function(t){if(M(t)===l)return[];var e=st(t);return[rt(t),e,rt(e)]}(C):[st(C)]),L=[C].concat(O).reduce((function(t,n){return t.concat(M(n)===l?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,s=n.boundary,o=n.rootBoundary,r=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,d=void 0===l?_:l,h=pt(i),u=h?a?g:g.filter((function(t){return pt(t)===h})):c,f=u.filter((function(t){return d.indexOf(t)>=0}));0===f.length&&(f=u);var p=f.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:s,rootBoundary:o,padding:r})[M(n)],e}),{});return Object.keys(p).sort((function(t,e){return p[t]-p[e]}))}(e,{placement:n,boundary:b,rootBoundary:y,padding:v,flipVariations:A,allowedAutoPlacements:T}):n)}),[]),x=e.rects.reference,I=e.rects.popper,D=new Map,S=!0,N=L[0],j=0;j<L.length;j++){var P=L[j],R=M(P),H=pt(P)===d,B=[s,o].indexOf(R)>=0,$=B?"width":"height",W=gt(e,{placement:P,boundary:b,rootBoundary:y,altBoundary:w,padding:v}),U=B?H?r:a:H?o:s;x[$]>I[$]&&(U=st(U));var q=st(U),F=[];if(u&&F.push(W[R]<=0),p&&F.push(W[U]<=0,W[q]<=0),F.every((function(t){return t}))){N=P,S=!1;break}D.set(P,F)}if(S)for(var z=function(t){var e=L.find((function(e){var n=D.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return N=e,"break"},V=A?3:1;V>0&&"break"!==z(V);V--);e.placement!==N&&(e.modifiersData[i]._skip=!0,e.placement=N,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function vt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function bt(t){return[s,r,o,a].some((function(e){return t[e]>=0}))}const yt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=gt(e,{elementContext:"reference"}),a=gt(e,{altBoundary:!0}),l=vt(r,i),c=vt(a,s,o),d=bt(l),h=bt(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:h},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":h})}},wt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,i=t.name,o=n.offset,l=void 0===o?[0,0]:o,c=_.reduce((function(t,n){return t[n]=function(t,e,n){var i=M(t),o=[a,s].indexOf(i)>=0?-1:1,l="function"==typeof n?n(Object.assign({},e,{placement:t})):n,c=l[0],d=l[1];return c=c||0,d=(d||0)*o,[a,r].indexOf(i)>=0?{x:d,y:c}:{x:c,y:d}}(n,e.rects,l),t}),{}),d=c[e.placement],h=d.x,u=d.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=h,e.modifiersData.popperOffsets.y+=u),e.modifiersData[i]=c}},Et={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=mt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},At={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name,l=n.mainAxis,c=void 0===l||l,h=n.altAxis,u=void 0!==h&&h,f=n.boundary,p=n.rootBoundary,m=n.altBoundary,g=n.padding,_=n.tether,v=void 0===_||_,b=n.tetherOffset,y=void 0===b?0:b,w=gt(e,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),E=M(e.placement),A=pt(e.placement),T=!A,C=F(E),k="x"===C?"y":"x",O=e.modifiersData.popperOffsets,L=e.rects.reference,x=e.rects.popper,I="function"==typeof y?y(Object.assign({},e.rects,{placement:e.placement})):y,D={x:0,y:0};if(O){if(c||u){var S="y"===C?s:a,N="y"===C?o:r,j="y"===C?"height":"width",R=O[C],H=O[C]+w[S],B=O[C]-w[N],$=v?-x[j]/2:0,W=A===d?L[j]:x[j],U=A===d?-x[j]:-L[j],K=e.elements.arrow,Y=v&&K?P(K):{width:0,height:0},Q=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},G=Q[S],Z=Q[N],J=X(0,L[j],Y[j]),tt=T?L[j]/2-$-J-G-I:W-J-G-I,et=T?-L[j]/2+$+J+Z+I:U+J+Z+I,nt=e.elements.arrow&&q(e.elements.arrow),it=nt?"y"===C?nt.clientTop||0:nt.clientLeft||0:0,st=e.modifiersData.offset?e.modifiersData.offset[e.placement][C]:0,ot=O[C]+tt-st-it,rt=O[C]+et-st;if(c){var at=X(v?V(H,ot):H,R,v?z(B,rt):B);O[C]=at,D[C]=at-R}if(u){var lt="x"===C?s:a,ct="x"===C?o:r,dt=O[k],ht=dt+w[lt],ut=dt-w[ct],ft=X(v?V(ht,ot):ht,dt,v?z(ut,rt):ut);O[k]=ft,D[k]=ft-dt}}e.modifiersData[i]=D}},requiresIfExists:["offset"]};function Tt(t,e,n){void 0===n&&(n=!1);var i,s,o=$(e),r=j(t),a=D(e),l={scrollLeft:0,scrollTop:0},c={x:0,y:0};return(a||!a&&!n)&&(("body"!==L(e)||ct(o))&&(l=(i=e)!==x(i)&&D(i)?{scrollLeft:(s=i).scrollLeft,scrollTop:s.scrollTop}:at(i)),D(e)?((c=j(e)).x+=e.clientLeft,c.y+=e.clientTop):o&&(c.x=lt(o))),{x:r.left+l.scrollLeft-c.x,y:r.top+l.scrollTop-c.y,width:r.width,height:r.height}}function Ct(t){var e=new Map,n=new Set,i=[];function s(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&s(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||s(t)})),i}var kt={placement:"bottom",modifiers:[],strategy:"absolute"};function Ot(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Lt(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,s=e.defaultOptions,o=void 0===s?kt:s;return function(t,e,n){void 0===n&&(n=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},kt,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(n){h(),a.options=Object.assign({},o,a.options,n),a.scrollParents={reference:I(t)?ht(t):t.contextElement?ht(t.contextElement):[],popper:ht(e)};var s,r,c=function(t){var e=Ct(t);return O.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),r=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(r).map((function(t){return r[t]}))));return a.orderedModifiers=c.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,s=t.effect;if("function"==typeof s){var o=s({state:a,name:e,instance:d,options:i});l.push(o||function(){})}})),d.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(Ot(e,n)){a.rects={reference:Tt(e,q(n),"fixed"===a.options.strategy),popper:P(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var s=a.orderedModifiers[i],o=s.fn,r=s.options,l=void 0===r?{}:r,h=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:h,instance:d})||a)}else a.reset=!1,i=-1}}},update:(s=function(){return new Promise((function(t){d.forceUpdate(),t(a)}))},function(){return r||(r=new Promise((function(t){Promise.resolve().then((function(){r=void 0,t(s())}))}))),r}),destroy:function(){h(),c=!0}};if(!Ot(t,e))return d;function h(){l.forEach((function(t){return t()})),l=[]}return d.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),d}}var xt=Lt(),It=Lt({defaultModifiers:[nt,Et,tt,N,wt,_t,At,G,yt]}),Dt=Lt({defaultModifiers:[nt,Et,tt,N]});const St={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]}},Nt="transitionend",Mt=t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t},jt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},Pt=t=>{const e=jt(t);return e&&document.querySelector(e)?e:null},Rt=t=>{const e=jt(t);return e?document.querySelector(e):null},Ht=t=>{t.dispatchEvent(new Event(Nt))},Bt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),$t=t=>Bt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?St.findOne(t):null,Wt=(t,e,n)=>{Object.keys(n).forEach((i=>{const s=n[i],o=e[i],r=o&&Bt(o)?"element":null==(a=o)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(s).test(r))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${r}" but expected type "${s}".`)}))},Ut=t=>!(!Bt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),qt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),Ft=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Ft(t.parentNode):null},zt=()=>{},Vt=t=>t.offsetHeight,Kt=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Xt=[],Yt=()=>"rtl"===document.documentElement.dir,Qt=t=>{var e;e=()=>{const e=Kt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Xt.length||document.addEventListener("DOMContentLoaded",(()=>{Xt.forEach((t=>t()))})),Xt.push(e)):e()},Gt=t=>{"function"==typeof t&&t()},Zt=(t,e,n=!0)=>{if(!n)return void Gt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),s=Number.parseFloat(n);return i||s?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let s=!1;const o=({target:n})=>{n===e&&(s=!0,e.removeEventListener(Nt,o),Gt(t))};e.addEventListener(Nt,o),setTimeout((()=>{s||Ht(e)}),i)},Jt=(t,e,n,i)=>{let s=t.indexOf(e);if(-1===s)return t[!n&&i?t.length-1:0];const o=t.length;return s+=n?1:-1,i&&(s=(s+o)%o),t[Math.max(0,Math.min(s,o-1))]},te=/[^.]*(?=\..*)\.|.*/,ee=/\..*/,ne=/::\d+$/,ie={};let se=1;const oe={mouseenter:"mouseover",mouseleave:"mouseout"},re=/^(mouseenter|mouseleave)/i,ae=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function le(t,e){return e&&`${e}::${se++}`||t.uidEvent||se++}function ce(t){const e=le(t);return t.uidEvent=e,ie[e]=ie[e]||{},ie[e]}function de(t,e,n=null){const i=Object.keys(t);for(let s=0,o=i.length;s<o;s++){const o=t[i[s]];if(o.originalHandler===e&&o.delegationSelector===n)return o}return null}function he(t,e,n){const i="string"==typeof e,s=i?n:e;let o=pe(t);return ae.has(o)||(o=t),[i,s,o]}function ue(t,e,n,i,s){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),re.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[o,r,a]=he(e,n,i),l=ce(t),c=l[a]||(l[a]={}),d=de(c,r,o?n:null);if(d)return void(d.oneOff=d.oneOff&&s);const h=le(r,e.replace(te,"")),u=o?function(t,e,n){return function i(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(let a=o.length;a--;)if(o[a]===r)return s.delegateTarget=r,i.oneOff&&me.off(t,s.type,e,n),n.apply(r,[s]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&me.off(t,i.type,e),e.apply(t,[i])}}(t,n);u.delegationSelector=o?n:null,u.originalHandler=r,u.oneOff=s,u.uidEvent=h,c[h]=u,t.addEventListener(a,u,o)}function fe(t,e,n,i,s){const o=de(e[n],i,s);o&&(t.removeEventListener(n,o,Boolean(s)),delete e[n][o.uidEvent])}function pe(t){return t=t.replace(ee,""),oe[t]||t}const me={on(t,e,n,i){ue(t,e,n,i,!1)},one(t,e,n,i){ue(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[s,o,r]=he(e,n,i),a=r!==e,l=ce(t),c=e.startsWith(".");if(void 0!==o){if(!l||!l[r])return;return void fe(t,l,r,o,s?n:null)}c&&Object.keys(l).forEach((n=>{!function(t,e,n,i){const s=e[n]||{};Object.keys(s).forEach((o=>{if(o.includes(i)){const i=s[o];fe(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,l,n,e.slice(1))}));const d=l[r]||{};Object.keys(d).forEach((n=>{const i=n.replace(ne,"");if(!a||e.includes(i)){const e=d[n];fe(t,l,r,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=Kt(),s=pe(e),o=e!==s,r=ae.has(s);let a,l=!0,c=!0,d=!1,h=null;return o&&i&&(a=i.Event(e,n),i(t).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),d=a.isDefaultPrevented()),r?(h=document.createEvent("HTMLEvents"),h.initEvent(s,l,!0)):h=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(h,t,{get:()=>n[t]})})),d&&h.preventDefault(),c&&t.dispatchEvent(h),h.defaultPrevented&&void 0!==a&&a.preventDefault(),h}},ge=new Map;var _e={set(t,e,n){ge.has(t)||ge.set(t,new Map);const i=ge.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>ge.has(t)&&ge.get(t).get(e)||null,remove(t,e){if(!ge.has(t))return;const n=ge.get(t);n.delete(e),0===n.size&&ge.delete(t)}};class ve{constructor(t){(t=$t(t))&&(this._element=t,_e.set(this._element,this.constructor.DATA_KEY,this))}dispose(){_e.remove(this._element,this.constructor.DATA_KEY),me.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Zt(t,e,n)}static getInstance(t){return _e.get(t,this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.0.2"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}class be extends ve{static get NAME(){return"alert"}close(t){const e=t?this._getRootElement(t):this._element,n=this._triggerCloseEvent(e);null===n||n.defaultPrevented||this._removeElement(e)}_getRootElement(t){return Rt(t)||t.closest(".alert")}_triggerCloseEvent(t){return me.trigger(t,"close.bs.alert")}_removeElement(t){t.classList.remove("show");const e=t.classList.contains("fade");this._queueCallback((()=>this._destroyElement(t)),t,e)}_destroyElement(t){t.remove(),me.trigger(t,"closed.bs.alert")}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this);"close"===t&&e[t](this)}))}static handleDismiss(t){return function(e){e&&e.preventDefault(),t.close(this)}}}me.on(document,"click.bs.alert.data-api",'[data-bs-dismiss="alert"]',be.handleDismiss(new be)),Qt(be);const ye='[data-bs-toggle="button"]';class we extends ve{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=we.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function Ee(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function Ae(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}me.on(document,"click.bs.button.data-api",ye,(t=>{t.preventDefault();const e=t.target.closest(ye);we.getOrCreateInstance(e).toggle()})),Qt(we);const Te={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${Ae(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${Ae(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=Ee(t.dataset[n])})),e},getDataAttribute:(t,e)=>Ee(t.getAttribute(`data-bs-${Ae(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+document.body.scrollTop,left:e.left+document.body.scrollLeft}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},Ce="carousel",ke={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Oe={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Le="next",xe="prev",Ie="left",De="right",Se={ArrowLeft:De,ArrowRight:Ie},Ne="slid.bs.carousel",Me="active",je=".active.carousel-item",Pe="touch";class Re extends ve{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=St.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return ke}static get NAME(){return Ce}next(){this._slide(Le)}nextWhenVisible(){!document.hidden&&Ut(this._element)&&this.next()}prev(){this._slide(xe)}pause(t){t||(this._isPaused=!0),St.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Ht(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=St.findOne(je,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void me.one(this._element,Ne,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Le:xe;this._slide(n,this._items[t])}_getConfig(t){return t={...ke,...Te.getDataAttributes(this._element),..."object"==typeof t?t:{}},Wt(Ce,t,Oe),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?De:Ie)}_addEventListeners(){this._config.keyboard&&me.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(me.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),me.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>{!this._pointerEvent||"pen"!==t.pointerType&&t.pointerType!==Pe?this._pointerEvent||(this.touchStartX=t.touches[0].clientX):this.touchStartX=t.clientX},e=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},n=t=>{!this._pointerEvent||"pen"!==t.pointerType&&t.pointerType!==Pe||(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};St.find(".carousel-item img",this._element).forEach((t=>{me.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(me.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),me.on(this._element,"pointerup.bs.carousel",(t=>n(t))),this._element.classList.add("pointer-event")):(me.on(this._element,"touchstart.bs.carousel",(e=>t(e))),me.on(this._element,"touchmove.bs.carousel",(t=>e(t))),me.on(this._element,"touchend.bs.carousel",(t=>n(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Se[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?St.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Le;return Jt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(St.findOne(je,this._element));return me.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=St.findOne(".active",this._indicatorsElement);e.classList.remove(Me),e.removeAttribute("aria-current");const n=St.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Me),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||St.findOne(je,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=St.findOne(je,this._element),s=this._getItemIndex(i),o=e||this._getItemByOrder(n,i),r=this._getItemIndex(o),a=Boolean(this._interval),l=n===Le,c=l?"carousel-item-start":"carousel-item-end",d=l?"carousel-item-next":"carousel-item-prev",h=this._orderToDirection(n);if(o&&o.classList.contains(Me))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,h).defaultPrevented)return;if(!i||!o)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const u=()=>{me.trigger(this._element,Ne,{relatedTarget:o,direction:h,from:s,to:r})};if(this._element.classList.contains("slide")){o.classList.add(d),Vt(o),i.classList.add(c),o.classList.add(c);const t=()=>{o.classList.remove(c,d),o.classList.add(Me),i.classList.remove(Me,d,c),this._isSliding=!1,setTimeout(u,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Me),o.classList.add(Me),this._isSliding=!1,u();a&&this.cycle()}_directionToOrder(t){return[De,Ie].includes(t)?Yt()?t===Ie?xe:Le:t===Ie?Le:xe:t}_orderToDirection(t){return[Le,xe].includes(t)?Yt()?t===xe?Ie:De:t===xe?De:Ie:t}static carouselInterface(t,e){const n=Re.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const s="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof s){if(void 0===n[s])throw new TypeError(`No method named "${s}"`);n[s]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){Re.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=Rt(this);if(!e||!e.classList.contains("carousel"))return;const n={...Te.getDataAttributes(e),...Te.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),Re.carouselInterface(e,n),i&&Re.getInstance(e).to(i),t.preventDefault()}}me.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Re.dataApiClickHandler),me.on(window,"load.bs.carousel.data-api",(()=>{const t=St.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)Re.carouselInterface(t[e],Re.getInstance(t[e]))})),Qt(Re);const He="collapse",Be={toggle:!0,parent:""},$e={toggle:"boolean",parent:"(string|element)"},We="show",Ue="collapse",qe="collapsing",Fe="collapsed",ze="width",Ve='[data-bs-toggle="collapse"]';class Ke extends ve{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=St.find(`${Ve}[href="#${this._element.id}"],${Ve}[data-bs-target="#${this._element.id}"]`);const n=St.find(Ve);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=Pt(e),s=St.find(i).filter((t=>t===this._element));null!==i&&s.length&&(this._selector=i,this._triggerArray.push(e))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}static get Default(){return Be}static get NAME(){return He}toggle(){this._element.classList.contains(We)?this.hide():this.show()}show(){if(this._isTransitioning||this._element.classList.contains(We))return;let t,e;this._parent&&(t=St.find(".show, .collapsing",this._parent).filter((t=>"string"==typeof this._config.parent?t.getAttribute("data-bs-parent")===this._config.parent:t.classList.contains(Ue))),0===t.length&&(t=null));const n=St.findOne(this._selector);if(t){const i=t.find((t=>n!==t));if(e=i?Ke.getInstance(i):null,e&&e._isTransitioning)return}if(me.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t&&t.forEach((t=>{n!==t&&Ke.collapseInterface(t,"hide"),e||_e.set(t,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Ue),this._element.classList.add(qe),this._element.style[i]=0,this._triggerArray.length&&this._triggerArray.forEach((t=>{t.classList.remove(Fe),t.setAttribute("aria-expanded",!0)})),this.setTransitioning(!0);const s=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._element.classList.remove(qe),this._element.classList.add(Ue,We),this._element.style[i]="",this.setTransitioning(!1),me.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[s]}px`}hide(){if(this._isTransitioning||!this._element.classList.contains(We))return;if(me.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Vt(this._element),this._element.classList.add(qe),this._element.classList.remove(Ue,We);const e=this._triggerArray.length;if(e>0)for(let t=0;t<e;t++){const e=this._triggerArray[t],n=Rt(e);n&&!n.classList.contains(We)&&(e.classList.add(Fe),e.setAttribute("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[t]="",this._queueCallback((()=>{this.setTransitioning(!1),this._element.classList.remove(qe),this._element.classList.add(Ue),me.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}setTransitioning(t){this._isTransitioning=t}_getConfig(t){return(t={...Be,...t}).toggle=Boolean(t.toggle),Wt(He,t,$e),t}_getDimension(){return this._element.classList.contains(ze)?ze:"height"}_getParent(){let{parent:t}=this._config;t=$t(t);const e=`${Ve}[data-bs-parent="${t}"]`;return St.find(e,t).forEach((t=>{const e=Rt(t);this._addAriaAndCollapsedClass(e,[t])})),t}_addAriaAndCollapsedClass(t,e){if(!t||!e.length)return;const n=t.classList.contains(We);e.forEach((t=>{n?t.classList.remove(Fe):t.classList.add(Fe),t.setAttribute("aria-expanded",n)}))}static collapseInterface(t,e){let n=Ke.getInstance(t);const i={...Be,...Te.getDataAttributes(t),..."object"==typeof e&&e?e:{}};if(!n&&i.toggle&&"string"==typeof e&&/show|hide/.test(e)&&(i.toggle=!1),n||(n=new Ke(t,i)),"string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}static jQueryInterface(t){return this.each((function(){Ke.collapseInterface(this,t)}))}}me.on(document,"click.bs.collapse.data-api",Ve,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=Te.getDataAttributes(this),n=Pt(this);St.find(n).forEach((t=>{const n=Ke.getInstance(t);let i;n?(null===n._parent&&"string"==typeof e.parent&&(n._config.parent=e.parent,n._parent=n._getParent()),i="toggle"):i=e,Ke.collapseInterface(t,i)}))})),Qt(Ke);const Xe="dropdown",Ye="Escape",Qe="Space",Ge="ArrowUp",Ze="ArrowDown",Je=new RegExp("ArrowUp|ArrowDown|Escape"),tn="click.bs.dropdown.data-api",en="keydown.bs.dropdown.data-api",nn="show",sn='[data-bs-toggle="dropdown"]',on=".dropdown-menu",rn=Yt()?"top-end":"top-start",an=Yt()?"top-start":"top-end",ln=Yt()?"bottom-end":"bottom-start",cn=Yt()?"bottom-start":"bottom-end",dn=Yt()?"left-start":"right-start",hn=Yt()?"right-start":"left-start",un={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},fn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends ve{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}static get Default(){return un}static get DefaultType(){return fn}static get NAME(){return Xe}toggle(){qt(this._element)||(this._element.classList.contains(nn)?this.hide():this.show())}show(){if(qt(this._element)||this._menu.classList.contains(nn))return;const t=pn.getParentFromElement(this._element),e={relatedTarget:this._element};if(!me.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._inNavbar)Te.setDataAttribute(this._menu,"popper","none");else{if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=t:Bt(this._config.reference)?e=$t(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig(),s=n.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=It(e,this._menu,n),s&&Te.setDataAttribute(this._menu,"popper","static")}"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>me.on(t,"mouseover",zt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.toggle(nn),this._element.classList.toggle(nn),me.trigger(this._element,"shown.bs.dropdown",e)}}hide(){if(qt(this._element)||!this._menu.classList.contains(nn))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_addEventListeners(){me.on(this._element,"click.bs.dropdown",(t=>{t.preventDefault(),this.toggle()}))}_completeHide(t){me.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>me.off(t,"mouseover",zt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(nn),this._element.classList.remove(nn),this._element.setAttribute("aria-expanded","false"),Te.removeDataAttribute(this._menu,"popper"),me.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...Te.getDataAttributes(this._element),...t},Wt(Xe,t,this.constructor.DefaultType),"object"==typeof t.reference&&!Bt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Xe.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_getMenuElement(){return St.next(this._element,on)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return dn;if(t.classList.contains("dropstart"))return hn;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?an:rn:e?cn:ln}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=St.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Ut);n.length&&Jt(n,e,t===Ze,!n.includes(e)).focus()}static dropdownInterface(t,e){const n=pn.getOrCreateInstance(t,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}static jQueryInterface(t){return this.each((function(){pn.dropdownInterface(this,t)}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=St.find(sn);for(let n=0,i=e.length;n<i;n++){const i=pn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._element.classList.contains(nn))continue;const s={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(s.clickEvent=t)}i._completeHide(s)}}static getParentFromElement(t){return Rt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Qe||t.key!==Ye&&(t.key!==Ze&&t.key!==Ge||t.target.closest(on)):!Je.test(t.key))return;const e=this.classList.contains(nn);if(!e&&t.key===Ye)return;if(t.preventDefault(),t.stopPropagation(),qt(this))return;const n=()=>this.matches(sn)?this:St.prev(this,sn)[0];return t.key===Ye?(n().focus(),void pn.clearMenus()):t.key===Ge||t.key===Ze?(e||n().click(),void pn.getInstance(n())._selectMenuItem(t)):void(e&&t.key!==Qe||pn.clearMenus())}}me.on(document,en,sn,pn.dataApiKeydownHandler),me.on(document,en,on,pn.dataApiKeydownHandler),me.on(document,tn,pn.clearMenus),me.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),me.on(document,tn,sn,(function(t){t.preventDefault(),pn.dropdownInterface(this)})),Qt(pn);const mn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",gn=".sticky-top";class _n{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(mn,"paddingRight",(e=>e+t)),this._setElementAttributes(gn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(s))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(mn,"paddingRight"),this._resetElementAttributes(gn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&Te.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=Te.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(Te.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){Bt(t)?e(t):St.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const vn={isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},bn={isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",wn="mousedown.bs.backdrop";class En{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&Vt(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Gt(t)}))):Gt(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Gt(t)}))):Gt(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className="modal-backdrop",this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...vn,..."object"==typeof t?t:{}}).rootElement=$t(t.rootElement),Wt("backdrop",t,bn),t}_append(){this._isAppended||(this._config.rootElement.appendChild(this._getElement()),me.on(this._getElement(),wn,(()=>{Gt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(me.off(this._element,wn),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Zt(t,this._getElement(),this._config.isAnimated)}}const An="modal",Tn="Escape",Cn={backdrop:!0,keyboard:!0,focus:!0},kn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},On="hidden.bs.modal",Ln="show.bs.modal",xn="focusin.bs.modal",In="resize.bs.modal",Dn="click.dismiss.bs.modal",Sn="keydown.dismiss.bs.modal",Nn="mousedown.dismiss.bs.modal",Mn="modal-open",jn="show",Pn="modal-static";class Rn extends ve{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=St.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new _n}static get Default(){return Cn}static get NAME(){return An}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||me.trigger(this._element,Ln,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Mn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),me.on(this._element,Dn,'[data-bs-dismiss="modal"]',(t=>this.hide(t))),me.on(this._dialog,Nn,(()=>{me.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(t){if(t&&["A","AREA"].includes(t.target.tagName)&&t.preventDefault(),!this._isShown||this._isTransitioning)return;if(me.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),me.off(document,xn),this._element.classList.remove(jn),me.off(this._element,Dn),me.off(this._dialog,Nn),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((t=>me.off(t,".bs.modal"))),this._backdrop.dispose(),super.dispose(),me.off(document,xn)}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new En({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_getConfig(t){return t={...Cn,...Te.getDataAttributes(this._element),..."object"==typeof t?t:{}},Wt(An,t,kn),t}_showElement(t){const e=this._isAnimated(),n=St.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&Vt(this._element),this._element.classList.add(jn),this._config.focus&&this._enforceFocus(),this._queueCallback((()=>{this._config.focus&&this._element.focus(),this._isTransitioning=!1,me.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_enforceFocus(){me.off(document,xn),me.on(document,xn,(t=>{document===t.target||this._element===t.target||this._element.contains(t.target)||this._element.focus()}))}_setEscapeEvent(){this._isShown?me.on(this._element,Sn,(t=>{this._config.keyboard&&t.key===Tn?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==Tn||this._triggerBackdropTransition()})):me.off(this._element,Sn)}_setResizeEvent(){this._isShown?me.on(window,In,(()=>this._adjustDialog())):me.off(window,In)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Mn),this._resetAdjustments(),this._scrollBar.reset(),me.trigger(this._element,On)}))}_showBackdrop(t){me.on(this._element,Dn,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(me.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(Pn)||(i||(n.overflowY="hidden"),t.add(Pn),this._queueCallback((()=>{t.remove(Pn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!Yt()||n&&!t&&Yt())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!Yt()||!n&&t&&Yt())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Rn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}me.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=Rt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),me.one(e,Ln,(t=>{t.defaultPrevented||me.one(e,On,(()=>{Ut(this)&&this.focus()}))})),Rn.getOrCreateInstance(e).toggle(this)})),Qt(Rn);const Hn="offcanvas",Bn={backdrop:!0,keyboard:!0,scroll:!1},$n={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Wn="show",Un=".offcanvas.show",qn="hidden.bs.offcanvas",Fn="focusin.bs.offcanvas";class zn extends ve{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._addEventListeners()}static get NAME(){return Hn}static get Default(){return Bn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||me.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||((new _n).hide(),this._enforceFocusOnElement(this._element)),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Wn),this._queueCallback((()=>{me.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(me.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(me.off(document,Fn),this._element.blur(),this._isShown=!1,this._element.classList.remove(Wn),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new _n).reset(),me.trigger(this._element,qn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),super.dispose(),me.off(document,Fn)}_getConfig(t){return t={...Bn,...Te.getDataAttributes(this._element),..."object"==typeof t?t:{}},Wt(Hn,t,$n),t}_initializeBackDrop(){return new En({isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_enforceFocusOnElement(t){me.off(document,Fn),me.on(document,Fn,(e=>{document===e.target||t===e.target||t.contains(e.target)||t.focus()})),t.focus()}_addEventListeners(){me.on(this._element,"click.dismiss.bs.offcanvas",'[data-bs-dismiss="offcanvas"]',(()=>this.hide())),me.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=zn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=Rt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),qt(this))return;me.one(e,qn,(()=>{Ut(this)&&this.focus()}));const n=St.findOne(Un);n&&n!==e&&zn.getInstance(n).hide(),zn.getOrCreateInstance(e).toggle(this)})),me.on(window,"load.bs.offcanvas.data-api",(()=>St.find(Un).forEach((t=>zn.getOrCreateInstance(t).show())))),Qt(zn);const Vn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Xn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Vn.has(n)||Boolean(Kn.test(t.nodeValue)||Xn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1};function Qn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),s=Object.keys(e),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!s.includes(i)){n.remove();continue}const r=[].concat(...n.attributes),a=[].concat(e["*"]||[],e[i]||[]);r.forEach((t=>{Yn(t,a)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const Gn="tooltip",Zn=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Jn=new Set(["sanitize","allowList","sanitizeFn"]),ti={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ei={AUTO:"auto",TOP:"top",RIGHT:Yt()?"left":"right",BOTTOM:"bottom",LEFT:Yt()?"right":"left"},ni={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ii={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},si="fade",oi="show",ri="show",ai="out",li="hover",ci="focus";class di extends ve{constructor(t,e){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(e),this.tip=null,this._setListeners()}static get Default(){return ni}static get NAME(){return Gn}static get Event(){return ii}static get DefaultType(){return ti}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(oi))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),me.off(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this.tip&&this.tip.remove(),this._popper&&this._popper.destroy(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=me.trigger(this._element,this.constructor.Event.SHOW),e=Ft(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;const i=this.getTipElement(),s=Mt(this.constructor.NAME);i.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this.setContent(),this._config.animation&&i.classList.add(si);const o="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,r=this._getAttachment(o);this._addAttachmentClass(r);const{container:a}=this._config;_e.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.appendChild(i),me.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=It(this._element,i,this._getPopperConfig(r)),i.classList.add(oi);const l="function"==typeof this._config.customClass?this._config.customClass():this._config.customClass;l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{me.on(t,"mouseover",zt)}));const c=this.tip.classList.contains(si);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,me.trigger(this._element,this.constructor.Event.SHOWN),t===ai&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const t=this.getTipElement();if(me.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(oi),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>me.off(t,"mouseover",zt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(si);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==ri&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),me.trigger(this._element,this.constructor.Event.HIDDEN),this._popper&&(this._popper.destroy(),this._popper=null))}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");return t.innerHTML=this._config.template,this.tip=t.children[0],this.tip}setContent(){const t=this.getTipElement();this.setElementContent(St.findOne(".tooltip-inner",t),this.getTitle()),t.classList.remove(si,oi)}setElementContent(t,e){if(null!==t)return Bt(e)?(e=$t(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.appendChild(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Qn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){let t=this._element.getAttribute("data-bs-original-title");return t||(t="function"==typeof this._config.title?this._config.title.call(this._element):this._config.title),t}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){const n=this.constructor.DATA_KEY;return(e=e||_e.get(t.delegateTarget,n))||(e=new this.constructor(t.delegateTarget,this._getDelegateConfig()),_e.set(t.delegateTarget,n,e)),e}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`bs-tooltip-${this.updateAttachment(t)}`)}_getAttachment(t){return ei[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)me.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===li?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===li?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;me.on(this._element,e,this._config.selector,(t=>this._enter(t))),me.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},me.on(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?ci:li]=!0),e.getTipElement().classList.contains(oi)||e._hoverState===ri?e._hoverState=ri:(clearTimeout(e._timeout),e._hoverState=ri,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===ri&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?ci:li]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ai,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===ai&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=Te.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{Jn.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:$t(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),Wt(Gn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Qn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};if(this._config)for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=t.getAttribute("class").match(Zn);null!==e&&e.length>0&&e.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}static jQueryInterface(t){return this.each((function(){const e=di.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Qt(di);const hi=new RegExp("(^|\\s)bs-popover\\S+","g"),ui={...di.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},fi={...di.DefaultType,content:"(string|element|function)"},pi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},mi=".popover-header",gi=".popover-body";class _i extends di{static get Default(){return ui}static get NAME(){return"popover"}static get Event(){return pi}static get DefaultType(){return fi}isWithContent(){return this.getTitle()||this._getContent()}getTipElement(){return this.tip||(this.tip=super.getTipElement(),this.getTitle()||St.findOne(mi,this.tip).remove(),this._getContent()||St.findOne(gi,this.tip).remove()),this.tip}setContent(){const t=this.getTipElement();this.setElementContent(St.findOne(mi,t),this.getTitle());let e=this._getContent();"function"==typeof e&&(e=e.call(this._element)),this.setElementContent(St.findOne(gi,t),e),t.classList.remove("fade","show")}_addAttachmentClass(t){this.getTipElement().classList.add(`bs-popover-${this.updateAttachment(t)}`)}_getContent(){return this._element.getAttribute("data-bs-content")||this._config.content}_cleanTipClass(){const t=this.getTipElement(),e=t.getAttribute("class").match(hi);null!==e&&e.length>0&&e.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}static jQueryInterface(t){return this.each((function(){const e=_i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Qt(_i);const vi="scrollspy",bi={offset:10,method:"auto",target:""},yi={offset:"number",method:"string",target:"(string|element)"},wi="active",Ei="position";class Ai extends ve{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._selector=`${this._config.target} .nav-link, ${this._config.target} .list-group-item, ${this._config.target} .dropdown-item`,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,me.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return bi}static get NAME(){return vi}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":Ei,e="auto"===this._config.method?t:this._config.method,n=e===Ei?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),St.find(this._selector).map((t=>{const i=Pt(t),s=i?St.findOne(i):null;if(s){const t=s.getBoundingClientRect();if(t.width||t.height)return[Te[e](s).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){me.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(t){if("string"!=typeof(t={...bi,...Te.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target&&Bt(t.target)){let{id:e}=t.target;e||(e=Mt(vi),t.target.id=e),t.target=`#${e}`}return Wt(vi,t,yi),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=this._selector.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=St.findOne(e.join(","));n.classList.contains("dropdown-item")?(St.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(wi),n.classList.add(wi)):(n.classList.add(wi),St.parents(n,".nav, .list-group").forEach((t=>{St.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(wi))),St.prev(t,".nav-item").forEach((t=>{St.children(t,".nav-link").forEach((t=>t.classList.add(wi)))}))}))),me.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){St.find(this._selector).filter((t=>t.classList.contains(wi))).forEach((t=>t.classList.remove(wi)))}static jQueryInterface(t){return this.each((function(){const e=Ai.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}me.on(window,"load.bs.scrollspy.data-api",(()=>{St.find('[data-bs-spy="scroll"]').forEach((t=>new Ai(t)))})),Qt(Ai);const Ti="active",Ci="fade",ki="show",Oi=".active",Li=":scope > li > .active";class xi extends ve{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ti))return;let t;const e=Rt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Li:Oi;t=St.find(e,n),t=t[t.length-1]}const i=t?me.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(me.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const s=()=>{me.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),me.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,s):s()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?St.children(e,Oi):St.find(Li,e))[0],s=n&&i&&i.classList.contains(Ci),o=()=>this._transitionComplete(t,i,n);i&&s?(i.classList.remove(ki),this._queueCallback(o,t,!0)):o()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ti);const t=St.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(Ti),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ti),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Vt(t),t.classList.contains(Ci)&&t.classList.add(ki);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&St.find(".dropdown-toggle",e).forEach((t=>t.classList.add(Ti))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=xi.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}me.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),qt(this)||xi.getOrCreateInstance(this).show()})),Qt(xi);const Ii="toast",Di="hide",Si="show",Ni="showing",Mi={animation:"boolean",autohide:"boolean",delay:"number"},ji={animation:!0,autohide:!0,delay:5e3};class Pi extends ve{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Mi}static get Default(){return ji}static get NAME(){return Ii}show(){me.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Di),Vt(this._element),this._element.classList.add(Ni),this._queueCallback((()=>{this._element.classList.remove(Ni),this._element.classList.add(Si),me.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Si)&&(me.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.remove(Si),this._queueCallback((()=>{this._element.classList.add(Di),me.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Si)&&this._element.classList.remove(Si),super.dispose()}_getConfig(t){return t={...ji,...Te.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},Wt(Ii,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){me.on(this._element,"click.dismiss.bs.toast",'[data-bs-dismiss="toast"]',(()=>this.hide())),me.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),me.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),me.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),me.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Pi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}Qt(Pi)},475:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SvgPaletteDesigner=void 0;const i=n(413);e.SvgPaletteDesigner=class{constructor(){this._colorCount=3,this._colors=[],this._selectedColor=0,this.initColors(),this.initSvg();const t=document.getElementById("ui"),e=new i.Controls(t),n=e.createFileInput("load svg",".svg",!1);n.addEventListener("change",(()=>{const t=n.files[0];if(!t)return;const e=new FileReader;e.onload=()=>{const t=e.result;this.loadSvg(t)},e.readAsText(t)})),n.addEventListener("click",(()=>{n.value=""})),e.createActionButton("save svg").addEventListener("click",(()=>{this.exportSvg()}));const s=e.createSelectListInput("selected color",this._colors.map(((t,e)=>"color "+e.toString())));s.selectedIndex=this._selectedColor,s.addEventListener("change",(()=>{this._selectedColor=s.selectedIndex}));for(let t=0;t<this._colors.length;t++){const n=this._colors[t],i=e.createColorInput("color "+t+" - "+n);i.value=n,i.addEventListener("input",(()=>{this._colors[t]=i.value,i.labels[0].innerHTML="color "+t+" - "+i.value,this.generateCss()}))}this._style=document.createElement("style"),document.getElementsByTagName("head")[0].appendChild(this._style),this.generateCss()}initSvg(){this.loadSvg(n(631))}initColors(){for(let t=0;t<this._colorCount;t++){let t="#";for(let e=0;e<3;e++){let e=Math.floor(256*Math.random()).toString(16);e+=e.length<2?"0":"",t+=e}this._colors.push(t)}}generateCss(){let t="";for(let e=0;e<this._colors.length;e++)t+=`.color${e}{fill: ${this._colors[e]} !important} `;this._style.innerHTML=t}loadSvg(t){this._svg=t;const e=document.getElementById("svgPreview");e.innerHTML=t;const n=e.children[0];n.style.width="100%",n.style.height="100%",this.addClickListeners(n)}exportSvg(){const t=document.getElementById("svgPreview").innerHTML;console.log(t);let e=document.createElement("a");e.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),e.setAttribute("download","file.svg"),e.style.display="none",document.body.appendChild(e),e.click(),document.body.removeChild(e)}addClickListeners(t){if(0!=t.children.length)for(const e of t.children)this.addClickListeners(e);else t.addEventListener("click",(e=>{for(let e=0;e<this._colors.length;e++){const n="color"+e;this._colors[e],e==this._selectedColor?t.classList.add(n):t.classList.remove(n)}}))}}},413:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Controls=void 0;const i=n(614);e.Controls=class{constructor(t){console.log(t),t||(t=document.getElementById("controls-container")),this._controlsElement=document.createElement("form"),this._controlsElement.onsubmit=t=>(t.preventDefault(),!1),t.appendChild(this._controlsElement)}createGenericRangedInput(t,e,n="",i,s,o,r,a,l){const c=this.createGenericInput(t,e,n,s,l);return c.min=String(o),c.max=String(r),c.step=String(a),c.value=String(i),c}createLabel(t,e){const n=document.createElement("label");return n.htmlFor=e,n.innerText=t,this._controlsElement.appendChild(n),n}createDescription(t){const e=i.v4(),n=document.createElement("small");return n.className="form-text text-muted",n.innerText=t,n.id=e,this._controlsElement.appendChild(n),n}createInput(t,e,n,s){s||(s=i.v4()),t&&this.createLabel(t,s);const o=e();if(o.id=s,this._controlsElement.appendChild(o),n){const t=this.createDescription(n);o.setAttribute("aria-describedby",t.id)}return o}createActionButton(t,e,n){const i=this.createGenericInput(void 0,"button",void 0,e,n);return i.value=t,i.classList.add("btn"),i.classList.add("btn-primary"),i}createGenericInput(t,e="text",n="",i,s){return this.createInput(t,(()=>{const t=document.createElement("input");return t.id=s,t.className="form-control",t.type=e,t.placeholder=n,this._controlsElement.appendChild(t),t}),i,s)}createSelectListInput(t,e,n,i){return this.createInput(t,(()=>{const t=document.createElement("select");return t.id=i,t.className="form-control",this._controlsElement.appendChild(t),e.forEach((e=>{const n=document.createElement("option");n.innerHTML=e,t.appendChild(n)})),t}),n,i)}createTextInput(t,e="",n,i){return this.createGenericInput(t,"text",e,n,i)}createColorInput(t,e="",n,i){return this.createGenericInput(t,"color",e,n,i)}createNumberInput(t,e="",n,i,s,o,r,a){return this.createGenericRangedInput(t,"number",e,n,i,s,o,r,a)}createSliderInput(t,e="",n,i,s,o,r,a){const l=this.createGenericRangedInput(t,"range",e,n,i,s,o,r,a);return l.classList.add("custom-range"),l}createFileInput(t,e,n=!1,i="",s,o){const r=this.createGenericInput(t,"file",i,s,o);r.accept=e,r.multiple=n;const a=document.createElement("div");a.classList.add("fileInputWrapper"),r.parentElement.replaceChild(a,r);const l=this.createActionButton("Datei auswählen");return a.appendChild(l),a.appendChild(r),l.onclick=()=>r.click(),r.onchange=()=>{l.value=Array.from(r.files).map((t=>t.name)).join("; ")},r}}},614:(t,e,n)=>{var i;n.r(e),n.d(e,{NIL:()=>I,parse:()=>g,stringify:()=>d,v1:()=>m,v3:()=>C,v4:()=>k,v5:()=>x,validate:()=>a,version:()=>D});var s=new Uint8Array(16);function o(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(s)}const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,a=function(t){return"string"==typeof t&&r.test(t)};for(var l=[],c=0;c<256;++c)l.push((c+256).toString(16).substr(1));const d=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(l[t[e+0]]+l[t[e+1]]+l[t[e+2]]+l[t[e+3]]+"-"+l[t[e+4]]+l[t[e+5]]+"-"+l[t[e+6]]+l[t[e+7]]+"-"+l[t[e+8]]+l[t[e+9]]+"-"+l[t[e+10]]+l[t[e+11]]+l[t[e+12]]+l[t[e+13]]+l[t[e+14]]+l[t[e+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n};var h,u,f=0,p=0;const m=function(t,e,n){var i=e&&n||0,s=e||new Array(16),r=(t=t||{}).node||h,a=void 0!==t.clockseq?t.clockseq:u;if(null==r||null==a){var l=t.random||(t.rng||o)();null==r&&(r=h=[1|l[0],l[1],l[2],l[3],l[4],l[5]]),null==a&&(a=u=16383&(l[6]<<8|l[7]))}var c=void 0!==t.msecs?t.msecs:Date.now(),m=void 0!==t.nsecs?t.nsecs:p+1,g=c-f+(m-p)/1e4;if(g<0&&void 0===t.clockseq&&(a=a+1&16383),(g<0||c>f)&&void 0===t.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=c,p=m,u=a;var _=(1e4*(268435455&(c+=122192928e5))+m)%4294967296;s[i++]=_>>>24&255,s[i++]=_>>>16&255,s[i++]=_>>>8&255,s[i++]=255&_;var v=c/4294967296*1e4&268435455;s[i++]=v>>>8&255,s[i++]=255&v,s[i++]=v>>>24&15|16,s[i++]=v>>>16&255,s[i++]=a>>>8|128,s[i++]=255&a;for(var b=0;b<6;++b)s[i+b]=r[b];return e||d(s)},g=function(t){if(!a(t))throw TypeError("Invalid UUID");var e,n=new Uint8Array(16);return n[0]=(e=parseInt(t.slice(0,8),16))>>>24,n[1]=e>>>16&255,n[2]=e>>>8&255,n[3]=255&e,n[4]=(e=parseInt(t.slice(9,13),16))>>>8,n[5]=255&e,n[6]=(e=parseInt(t.slice(14,18),16))>>>8,n[7]=255&e,n[8]=(e=parseInt(t.slice(19,23),16))>>>8,n[9]=255&e,n[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,n[11]=e/4294967296&255,n[12]=e>>>24&255,n[13]=e>>>16&255,n[14]=e>>>8&255,n[15]=255&e,n};function _(t,e,n){function i(t,i,s,o){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));for(var e=[],n=0;n<t.length;++n)e.push(t.charCodeAt(n));return e}(t)),"string"==typeof i&&(i=g(i)),16!==i.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var r=new Uint8Array(16+t.length);if(r.set(i),r.set(t,i.length),(r=n(r))[6]=15&r[6]|e,r[8]=63&r[8]|128,s){o=o||0;for(var a=0;a<16;++a)s[o+a]=r[a];return s}return d(r)}try{i.name=t}catch(t){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}function v(t){return 14+(t+64>>>9<<4)+1}function b(t,e){var n=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(n>>16)<<16|65535&n}function y(t,e,n,i,s,o){return b((r=b(b(e,t),b(i,o)))<<(a=s)|r>>>32-a,n);var r,a}function w(t,e,n,i,s,o,r){return y(e&n|~e&i,t,e,s,o,r)}function E(t,e,n,i,s,o,r){return y(e&i|n&~i,t,e,s,o,r)}function A(t,e,n,i,s,o,r){return y(e^n^i,t,e,s,o,r)}function T(t,e,n,i,s,o,r){return y(n^(e|~i),t,e,s,o,r)}const C=_("v3",48,(function(t){if("string"==typeof t){var e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(var n=0;n<e.length;++n)t[n]=e.charCodeAt(n)}return function(t){for(var e=[],n=32*t.length,i="0123456789abcdef",s=0;s<n;s+=8){var o=t[s>>5]>>>s%32&255,r=parseInt(i.charAt(o>>>4&15)+i.charAt(15&o),16);e.push(r)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[v(e)-1]=e;for(var n=1732584193,i=-271733879,s=-1732584194,o=271733878,r=0;r<t.length;r+=16){var a=n,l=i,c=s,d=o;n=w(n,i,s,o,t[r],7,-680876936),o=w(o,n,i,s,t[r+1],12,-389564586),s=w(s,o,n,i,t[r+2],17,606105819),i=w(i,s,o,n,t[r+3],22,-1044525330),n=w(n,i,s,o,t[r+4],7,-176418897),o=w(o,n,i,s,t[r+5],12,1200080426),s=w(s,o,n,i,t[r+6],17,-1473231341),i=w(i,s,o,n,t[r+7],22,-45705983),n=w(n,i,s,o,t[r+8],7,1770035416),o=w(o,n,i,s,t[r+9],12,-1958414417),s=w(s,o,n,i,t[r+10],17,-42063),i=w(i,s,o,n,t[r+11],22,-1990404162),n=w(n,i,s,o,t[r+12],7,1804603682),o=w(o,n,i,s,t[r+13],12,-40341101),s=w(s,o,n,i,t[r+14],17,-1502002290),n=E(n,i=w(i,s,o,n,t[r+15],22,1236535329),s,o,t[r+1],5,-165796510),o=E(o,n,i,s,t[r+6],9,-1069501632),s=E(s,o,n,i,t[r+11],14,643717713),i=E(i,s,o,n,t[r],20,-373897302),n=E(n,i,s,o,t[r+5],5,-701558691),o=E(o,n,i,s,t[r+10],9,38016083),s=E(s,o,n,i,t[r+15],14,-660478335),i=E(i,s,o,n,t[r+4],20,-405537848),n=E(n,i,s,o,t[r+9],5,568446438),o=E(o,n,i,s,t[r+14],9,-1019803690),s=E(s,o,n,i,t[r+3],14,-187363961),i=E(i,s,o,n,t[r+8],20,1163531501),n=E(n,i,s,o,t[r+13],5,-1444681467),o=E(o,n,i,s,t[r+2],9,-51403784),s=E(s,o,n,i,t[r+7],14,1735328473),n=A(n,i=E(i,s,o,n,t[r+12],20,-1926607734),s,o,t[r+5],4,-378558),o=A(o,n,i,s,t[r+8],11,-2022574463),s=A(s,o,n,i,t[r+11],16,1839030562),i=A(i,s,o,n,t[r+14],23,-35309556),n=A(n,i,s,o,t[r+1],4,-1530992060),o=A(o,n,i,s,t[r+4],11,1272893353),s=A(s,o,n,i,t[r+7],16,-155497632),i=A(i,s,o,n,t[r+10],23,-1094730640),n=A(n,i,s,o,t[r+13],4,681279174),o=A(o,n,i,s,t[r],11,-358537222),s=A(s,o,n,i,t[r+3],16,-722521979),i=A(i,s,o,n,t[r+6],23,76029189),n=A(n,i,s,o,t[r+9],4,-640364487),o=A(o,n,i,s,t[r+12],11,-421815835),s=A(s,o,n,i,t[r+15],16,530742520),n=T(n,i=A(i,s,o,n,t[r+2],23,-995338651),s,o,t[r],6,-198630844),o=T(o,n,i,s,t[r+7],10,1126891415),s=T(s,o,n,i,t[r+14],15,-1416354905),i=T(i,s,o,n,t[r+5],21,-57434055),n=T(n,i,s,o,t[r+12],6,1700485571),o=T(o,n,i,s,t[r+3],10,-1894986606),s=T(s,o,n,i,t[r+10],15,-1051523),i=T(i,s,o,n,t[r+1],21,-2054922799),n=T(n,i,s,o,t[r+8],6,1873313359),o=T(o,n,i,s,t[r+15],10,-30611744),s=T(s,o,n,i,t[r+6],15,-1560198380),i=T(i,s,o,n,t[r+13],21,1309151649),n=T(n,i,s,o,t[r+4],6,-145523070),o=T(o,n,i,s,t[r+11],10,-1120210379),s=T(s,o,n,i,t[r+2],15,718787259),i=T(i,s,o,n,t[r+9],21,-343485551),n=b(n,a),i=b(i,l),s=b(s,c),o=b(o,d)}return[n,i,s,o]}(function(t){if(0===t.length)return[];for(var e=8*t.length,n=new Uint32Array(v(e)),i=0;i<e;i+=8)n[i>>5]|=(255&t[i/8])<<i%32;return n}(t),8*t.length))})),k=function(t,e,n){var i=(t=t||{}).random||(t.rng||o)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e){n=n||0;for(var s=0;s<16;++s)e[n+s]=i[s];return e}return d(i)};function O(t,e,n,i){switch(t){case 0:return e&n^~e&i;case 1:return e^n^i;case 2:return e&n^e&i^n&i;case 3:return e^n^i}}function L(t,e){return t<<e|t>>>32-e}const x=_("v5",80,(function(t){var e=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){var i=unescape(encodeURIComponent(t));t=[];for(var s=0;s<i.length;++s)t.push(i.charCodeAt(s))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);for(var o=t.length/4+2,r=Math.ceil(o/16),a=new Array(r),l=0;l<r;++l){for(var c=new Uint32Array(16),d=0;d<16;++d)c[d]=t[64*l+4*d]<<24|t[64*l+4*d+1]<<16|t[64*l+4*d+2]<<8|t[64*l+4*d+3];a[l]=c}a[r-1][14]=8*(t.length-1)/Math.pow(2,32),a[r-1][14]=Math.floor(a[r-1][14]),a[r-1][15]=8*(t.length-1)&4294967295;for(var h=0;h<r;++h){for(var u=new Uint32Array(80),f=0;f<16;++f)u[f]=a[h][f];for(var p=16;p<80;++p)u[p]=L(u[p-3]^u[p-8]^u[p-14]^u[p-16],1);for(var m=n[0],g=n[1],_=n[2],v=n[3],b=n[4],y=0;y<80;++y){var w=Math.floor(y/20),E=L(m,5)+O(w,g,_,v)+b+e[w]+u[y]>>>0;b=v,v=_,_=L(g,30)>>>0,g=m,m=E}n[0]=n[0]+m>>>0,n[1]=n[1]+g>>>0,n[2]=n[2]+_>>>0,n[3]=n[3]+v>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),I="00000000-0000-0000-0000-000000000000",D=function(t){if(!a(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}},631:t=>{t.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"\n   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"\n   width="100"\n   height="100"\n   viewBox="0 0 100 100"\n   version="1.1"\n   id="svg29180"\n   inkscape:version="1.0.2-2 (e86c870879, 2021-01-15)"\n   sodipodi:docname="alto_clef.svg">\n  <defs\n     id="defs29174" />\n  <sodipodi:namedview\n     id="base"\n     pagecolor="#ffffff"\n     bordercolor="#666666"\n     borderopacity="1.0"\n     inkscape:pageopacity="0.0"\n     inkscape:pageshadow="2"\n     inkscape:zoom="11.313709"\n     inkscape:cx="28.285506"\n     inkscape:cy="27.79028"\n     inkscape:document-units="px"\n     inkscape:current-layer="layer1"\n     inkscape:document-rotation="0"\n     showgrid="false"\n     fit-margin-top="0"\n     fit-margin-left="0"\n     fit-margin-right="0"\n     fit-margin-bottom="0"\n     inkscape:window-width="3840"\n     inkscape:window-height="2050"\n     inkscape:window-x="4468"\n     inkscape:window-y="321"\n     inkscape:window-maximized="1"\n     units="px" />\n  <metadata\n     id="metadata29177">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about="">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label="Ebene 1"\n     inkscape:groupmode="layer"\n     id="layer1"\n     transform="translate(-114.48547,-189.14609)">\n    <circle\n       style="fill:#ff0000;stroke:none;stroke-width:18.8976;stroke-linecap:round"\n       id="path833"\n       cx="156.91188"\n       cy="221.49623"\n       r="21.566757" />\n    <rect\n       style="fill:#00ff00;stroke:none;stroke-width:18.8976;stroke-linecap:round"\n       id="rect835"\n       width="29.610096"\n       height="41.80769"\n       x="122.08687"\n       y="229.36279" />\n    <rect\n       style="fill:#0000ff;stroke:none;stroke-width:18.8976;stroke-linecap:round"\n       id="rect837"\n       width="69.11969"\n       height="27.046835"\n       x="133.84251"\n       y="236.08031" />\n  </g>\n</svg>\n'}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{var t=i;Object.defineProperty(t,"__esModule",{value:!0}),n(169);const e=n(475);window.addEventListener("load",(()=>{new e.SvgPaletteDesigner}))})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9mbGlwLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci1saXRlLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL2Jvb3RzdHJhcC5lc20uanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9zb3VyY2UvY29kZS9TdmdQYWxldHRlRGVzaWduZXIudHMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9zb3VyY2UvY29kZS91aUhlbHBlci50cyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjEuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3BhcnNlLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MzUuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL21kNS5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjMuanMiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zaGExLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NS5qcyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmlsLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92ZXJzaW9uLmpzIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zdmctcGFsZXR0ZS1kZXNpZ25lci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3N2Zy1wYWxldHRlLWRlc2lnbmVyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc3ZnLXBhbGV0dGUtZGVzaWduZXIvLi9zb3VyY2UvY29kZS9tYWluLnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwic2VsZiIsImJvdHRvbSIsInJpZ2h0IiwibGVmdCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsInN0YXJ0IiwiZW5kIiwiY2xpcHBpbmdQYXJlbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwicmVkdWNlIiwiYWNjIiwicGxhY2VtZW50IiwiY29uY2F0IiwiYmVmb3JlUmVhZCIsInJlYWQiLCJhZnRlclJlYWQiLCJiZWZvcmVNYWluIiwibWFpbiIsImFmdGVyTWFpbiIsImJlZm9yZVdyaXRlIiwid3JpdGUiLCJhZnRlcldyaXRlIiwibW9kaWZpZXJQaGFzZXMiLCJnZXROb2RlTmFtZSIsImVsZW1lbnQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiZ2V0V2luZG93Iiwibm9kZSIsIndpbmRvdyIsInRvU3RyaW5nIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaXNFbGVtZW50IiwiRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzU2hhZG93Um9vdCIsIlNoYWRvd1Jvb3QiLCJuYW1lIiwiZW5hYmxlZCIsInBoYXNlIiwiZm4iLCJfcmVmIiwic3RhdGUiLCJPYmplY3QiLCJrZXlzIiwiZWxlbWVudHMiLCJmb3JFYWNoIiwic3R5bGUiLCJzdHlsZXMiLCJhdHRyaWJ1dGVzIiwiYXNzaWduIiwidmFsdWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJlZmZlY3QiLCJfcmVmMiIsImluaXRpYWxTdHlsZXMiLCJwb3NpdGlvbiIsIm9wdGlvbnMiLCJzdHJhdGVneSIsInRvcCIsIm1hcmdpbiIsImFycm93IiwiaGFzT3duUHJvcGVydHkiLCJwcm9wZXJ0eSIsImF0dHJpYnV0ZSIsInJlcXVpcmVzIiwiZ2V0QmFzZVBsYWNlbWVudCIsInNwbGl0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJnZXRMYXlvdXRSZWN0IiwiY2xpZW50UmVjdCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiTWF0aCIsImFicyIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJjb250YWlucyIsInBhcmVudCIsImNoaWxkIiwicm9vdE5vZGUiLCJnZXRSb290Tm9kZSIsIm5leHQiLCJpc1NhbWVOb2RlIiwicGFyZW50Tm9kZSIsImhvc3QiLCJnZXRDb21wdXRlZFN0eWxlIiwiaXNUYWJsZUVsZW1lbnQiLCJpbmRleE9mIiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRQYXJlbnROb2RlIiwiYXNzaWduZWRTbG90IiwiZ2V0VHJ1ZU9mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsImdldE9mZnNldFBhcmVudCIsImlzRmlyZWZveCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImN1cnJlbnROb2RlIiwiY3NzIiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsImZpbHRlciIsImdldENvbnRhaW5pbmdCbG9jayIsImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsIm1heCIsIm1pbiIsInJvdW5kIiwid2l0aGluIiwibWVyZ2VQYWRkaW5nT2JqZWN0IiwicGFkZGluZ09iamVjdCIsImV4cGFuZFRvSGFzaE1hcCIsImhhc2hNYXAiLCJrZXkiLCJfc3RhdGUkbW9kaWZpZXJzRGF0YSQiLCJhcnJvd0VsZW1lbnQiLCJwb3BwZXJPZmZzZXRzIiwibW9kaWZpZXJzRGF0YSIsImJhc2VQbGFjZW1lbnQiLCJheGlzIiwibGVuIiwicGFkZGluZyIsInJlY3RzIiwidG9QYWRkaW5nT2JqZWN0IiwiYXJyb3dSZWN0IiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRTaXplIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsIm9mZnNldCIsImF4aXNQcm9wIiwiY2VudGVyT2Zmc2V0IiwiX29wdGlvbnMkZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZXF1aXJlc0lmRXhpc3RzIiwidW5zZXRTaWRlcyIsIm1hcFRvU3R5bGVzIiwiX09iamVjdCRhc3NpZ24yIiwicG9wcGVyUmVjdCIsIm9mZnNldHMiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsIl9yZWYzIiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInJvdW5kT2Zmc2V0c0J5RFBSIiwiX3JlZjMkeCIsIl9yZWYzJHkiLCJoYXNYIiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJ3aW4iLCJoZWlnaHRQcm9wIiwid2lkdGhQcm9wIiwiX09iamVjdCRhc3NpZ24iLCJjb21tb25TdHlsZXMiLCJfcmVmNCIsIl9vcHRpb25zJGdwdUFjY2VsZXJhdCIsIl9vcHRpb25zJGFkYXB0aXZlIiwiX29wdGlvbnMkcm91bmRPZmZzZXRzIiwiZGF0YSIsInBhc3NpdmUiLCJpbnN0YW5jZSIsIl9vcHRpb25zJHNjcm9sbCIsInNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsInJlc2l6ZSIsInNjcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwidXBkYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhc2giLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsInJlcGxhY2UiLCJtYXRjaGVkIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJnZXRXaW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsImxpc3RTY3JvbGxQYXJlbnRzIiwibGlzdCIsIl9lbGVtZW50JG93bmVyRG9jdW1lbiIsImlzQm9keSIsInRhcmdldCIsInZpc3VhbFZpZXdwb3J0IiwidXBkYXRlZExpc3QiLCJyZWN0VG9DbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUiLCJjbGlwcGluZ1BhcmVudCIsImh0bWwiLCJnZXRWaWV3cG9ydFJlY3QiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsImdldERvY3VtZW50UmVjdCIsImdldFZhcmlhdGlvbiIsImNvbXB1dGVPZmZzZXRzIiwidmFyaWF0aW9uIiwiY29tbW9uWCIsImNvbW1vblkiLCJtYWluQXhpcyIsImRldGVjdE92ZXJmbG93IiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwbGFjZW1lbnQiLCJfb3B0aW9ucyRib3VuZGFyeSIsImJvdW5kYXJ5IiwiX29wdGlvbnMkcm9vdEJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwiX29wdGlvbnMkZWxlbWVudENvbnRlIiwiZWxlbWVudENvbnRleHQiLCJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsImFsdEJvdW5kYXJ5IiwiX29wdGlvbnMkcGFkZGluZyIsImFsdENvbnRleHQiLCJyZWZlcmVuY2VFbGVtZW50IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImNsaXBwZXJFbGVtZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJnZXRDbGlwcGluZ1JlY3QiLCJjb250ZXh0RWxlbWVudCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwicGxhY2VtZW50cyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsImFsbG93ZWRQbGFjZW1lbnRzIiwibGVuZ3RoIiwib3ZlcmZsb3dzIiwic29ydCIsImIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZmVyZW5jZVJlY3QiLCJjaGVja3NNYXAiLCJNYXAiLCJtYWtlRmFsbGJhY2tDaGVja3MiLCJmaXJzdEZpdHRpbmdQbGFjZW1lbnQiLCJfYmFzZVBsYWNlbWVudCIsImlzU3RhcnRWYXJpYXRpb24iLCJpc1ZlcnRpY2FsIiwibWFpblZhcmlhdGlvblNpZGUiLCJhbHRWYXJpYXRpb25TaWRlIiwiY2hlY2tzIiwicHVzaCIsImV2ZXJ5IiwiY2hlY2siLCJzZXQiLCJfbG9vcCIsIl9pIiwiZml0dGluZ1BsYWNlbWVudCIsImZpbmQiLCJnZXQiLCJzbGljZSIsInJlc2V0IiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic29tZSIsInNpZGUiLCJwcmV2ZW50T3ZlcmZsb3ciLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsIl9vcHRpb25zJG9mZnNldCIsImludmVydERpc3RhbmNlIiwic2tpZGRpbmciLCJkaXN0YW5jZSIsImRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZIiwiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJtYWluU2lkZSIsImFsdFNpZGUiLCJhZGRpdGl2ZSIsIm1pbkxlbiIsIm1heExlbiIsImFycm93UGFkZGluZ09iamVjdCIsImFycm93UGFkZGluZ01pbiIsImFycm93UGFkZGluZ01heCIsImFycm93TGVuIiwibWluT2Zmc2V0IiwibWF4T2Zmc2V0IiwiY2xpZW50T2Zmc2V0Iiwib2Zmc2V0TW9kaWZpZXJWYWx1ZSIsInRldGhlck1pbiIsInRldGhlck1heCIsInByZXZlbnRlZE9mZnNldCIsIl9tYWluU2lkZSIsIl9hbHRTaWRlIiwiX29mZnNldCIsIl9taW4iLCJfbWF4IiwiX3ByZXZlbnRlZE9mZnNldCIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIm9yZGVyIiwibW9kaWZpZXJzIiwibWFwIiwidmlzaXRlZCIsIlNldCIsInJlc3VsdCIsIm1vZGlmaWVyIiwiYWRkIiwiZGVwIiwiaGFzIiwiZGVwTW9kaWZpZXIiLCJERUZBVUxUX09QVElPTlMiLCJhcmVWYWxpZEVsZW1lbnRzIiwiX2xlbiIsImFyZ3VtZW50cyIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwicGVuZGluZyIsIm9yZGVyZWRNb2RpZmllcnMiLCJlZmZlY3RDbGVhbnVwRm5zIiwiaXNEZXN0cm95ZWQiLCJzZXRPcHRpb25zIiwiY2xlYW51cE1vZGlmaWVyRWZmZWN0cyIsIm1lcmdlZCIsIm9yZGVyTW9kaWZpZXJzIiwiY3VycmVudCIsImV4aXN0aW5nIiwibSIsIl9yZWYzJG9wdGlvbnMiLCJjbGVhbnVwRm4iLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsImluZGV4IiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInVuZGVmaW5lZCIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiY3JlYXRlUG9wcGVyIiwiZXZlbnRMaXN0ZW5lcnMiLCJTZWxlY3RvckVuZ2luZSIsInNlbGVjdG9yIiwicHJvdG90eXBlIiwicXVlcnlTZWxlY3RvckFsbCIsImNhbGwiLCJmaW5kT25lIiwiY2hpbGRyZW4iLCJtYXRjaGVzIiwicGFyZW50cyIsImFuY2VzdG9yIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwicHJldiIsInByZXZpb3VzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsIlRSQU5TSVRJT05fRU5EIiwiZ2V0VUlEIiwicHJlZml4IiwiZmxvb3IiLCJyYW5kb20iLCJnZXRFbGVtZW50QnlJZCIsImdldFNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwiaHJlZkF0dHIiLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGgiLCJ0cmltIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEVsZW1lbnRGcm9tU2VsZWN0b3IiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsIm9iaiIsImpxdWVyeSIsImdldEVsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwibWF0Y2giLCJSZWdFeHAiLCJUeXBlRXJyb3IiLCJ0b1VwcGVyQ2FzZSIsImlzVmlzaWJsZSIsImdldENsaWVudFJlY3RzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImlzRGlzYWJsZWQiLCJjbGFzc0xpc3QiLCJkaXNhYmxlZCIsImhhc0F0dHJpYnV0ZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwibm9vcCIsInJlZmxvdyIsImdldGpRdWVyeSIsImpRdWVyeSIsIkRPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MiLCJpc1JUTCIsImRpciIsImRlZmluZUpRdWVyeVBsdWdpbiIsInBsdWdpbiIsImNhbGxiYWNrIiwiJCIsIk5BTUUiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJqUXVlcnlJbnRlcmZhY2UiLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJyZWFkeVN0YXRlIiwiZXhlY3V0ZSIsImV4ZWN1dGVBZnRlclRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRWxlbWVudCIsIndhaXRGb3JUcmFuc2l0aW9uIiwiZW11bGF0ZWREdXJhdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJjYWxsZWQiLCJoYW5kbGVyIiwic2V0VGltZW91dCIsImdldE5leHRBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsInNob3VsZEdldE5leHQiLCJpc0N5Y2xlQWxsb3dlZCIsImxpc3RMZW5ndGgiLCJuYW1lc3BhY2VSZWdleCIsInN0cmlwTmFtZVJlZ2V4Iiwic3RyaXBVaWRSZWdleCIsImV2ZW50UmVnaXN0cnkiLCJ1aWRFdmVudCIsImN1c3RvbUV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiY3VzdG9tRXZlbnRzUmVnZXgiLCJuYXRpdmVFdmVudHMiLCJnZXRVaWRFdmVudCIsInVpZCIsImdldEV2ZW50IiwiZmluZEhhbmRsZXIiLCJldmVudHMiLCJkZWxlZ2F0aW9uU2VsZWN0b3IiLCJ1aWRFdmVudExpc3QiLCJldmVudCIsIm9yaWdpbmFsSGFuZGxlciIsIm5vcm1hbGl6ZVBhcmFtcyIsIm9yaWdpbmFsVHlwZUV2ZW50IiwiZGVsZWdhdGlvbkZuIiwiZGVsZWdhdGlvbiIsInR5cGVFdmVudCIsImdldFR5cGVFdmVudCIsImFkZEhhbmRsZXIiLCJvbmVPZmYiLCJ3cmFwRm4iLCJyZWxhdGVkVGFyZ2V0IiwiZGVsZWdhdGVUYXJnZXQiLCJ0aGlzIiwiaGFuZGxlcnMiLCJwcmV2aW91c0ZuIiwiZG9tRWxlbWVudHMiLCJFdmVudEhhbmRsZXIiLCJvZmYiLCJ0eXBlIiwiYXBwbHkiLCJib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlciIsImJvb3RzdHJhcEhhbmRsZXIiLCJyZW1vdmVIYW5kbGVyIiwiQm9vbGVhbiIsIm9uIiwib25lIiwiaW5OYW1lc3BhY2UiLCJpc05hbWVzcGFjZSIsImVsZW1lbnRFdmVudCIsIm5hbWVzcGFjZSIsInN0b3JlRWxlbWVudEV2ZW50IiwiaGFuZGxlcktleSIsInJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyIsImtleUhhbmRsZXJzIiwidHJpZ2dlciIsImlzTmF0aXZlIiwialF1ZXJ5RXZlbnQiLCJidWJibGVzIiwibmF0aXZlRGlzcGF0Y2giLCJkZWZhdWx0UHJldmVudGVkIiwiZXZ0IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJjYW5jZWxhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJwcmV2ZW50RGVmYXVsdCIsImVsZW1lbnRNYXAiLCJEYXRhIiwiaW5zdGFuY2VNYXAiLCJzaXplIiwiY29uc29sZSIsImVycm9yIiwiZnJvbSIsInJlbW92ZSIsImRlbGV0ZSIsIkJhc2VDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsIl9lbGVtZW50IiwiREFUQV9LRVkiLCJkaXNwb3NlIiwiRVZFTlRfS0VZIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3BlcnR5TmFtZSIsIl9xdWV1ZUNhbGxiYWNrIiwiaXNBbmltYXRlZCIsImdldEluc3RhbmNlIiwiRXJyb3IiLCJBbGVydCIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJjdXN0b21FdmVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiY2xvc2VzdCIsIl9kZXN0cm95RWxlbWVudCIsImVhY2giLCJnZXRPckNyZWF0ZUluc3RhbmNlIiwiYWxlcnRJbnN0YW5jZSIsImhhbmRsZURpc21pc3MiLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ1IiwiQnV0dG9uIiwidG9nZ2xlIiwibm9ybWFsaXplRGF0YSIsInZhbCIsIm5vcm1hbGl6ZURhdGFLZXkiLCJjaHIiLCJidXR0b24iLCJNYW5pcHVsYXRvciIsInNldERhdGFBdHRyaWJ1dGUiLCJyZW1vdmVEYXRhQXR0cmlidXRlIiwiZ2V0RGF0YUF0dHJpYnV0ZXMiLCJkYXRhc2V0IiwicHVyZUtleSIsImNoYXJBdCIsImdldERhdGFBdHRyaWJ1dGUiLCJOQU1FJGEiLCJEZWZhdWx0JDkiLCJpbnRlcnZhbCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsIndyYXAiLCJ0b3VjaCIsIkRlZmF1bHRUeXBlJDkiLCJPUkRFUl9ORVhUIiwiT1JERVJfUFJFViIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiS0VZX1RPX0RJUkVDVElPTiIsIkVWRU5UX1NMSUQiLCJDTEFTU19OQU1FX0FDVElWRSQyIiwiU0VMRUNUT1JfQUNUSVZFX0lURU0iLCJQT0lOVEVSX1RZUEVfVE9VQ0giLCJDYXJvdXNlbCIsInN1cGVyIiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwidG91Y2hTdGFydFgiLCJ0b3VjaERlbHRhWCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX3RvdWNoU3VwcG9ydGVkIiwibWF4VG91Y2hQb2ludHMiLCJfcG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwiX3VwZGF0ZUludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJiaW5kIiwidG8iLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJfaGFuZGxlU3dpcGUiLCJhYnNEZWx0YXgiLCJfa2V5ZG93biIsIl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwicG9pbnRlclR5cGUiLCJ0b3VjaGVzIiwiY2xpZW50WCIsIm1vdmUiLCJjbGVhclRpbWVvdXQiLCJpdGVtSW1nIiwiZSIsInRhZ05hbWUiLCJfZ2V0SXRlbUJ5T3JkZXIiLCJpc05leHQiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwiYWN0aXZlSW5kaWNhdG9yIiwiaW5kaWNhdG9ycyIsInBhcnNlSW50IiwiZWxlbWVudEludGVydmFsIiwiZGVmYXVsdEludGVydmFsIiwiZGlyZWN0aW9uT3JPcmRlciIsIl9kaXJlY3Rpb25Ub09yZGVyIiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsIl9vcmRlclRvRGlyZWN0aW9uIiwidHJpZ2dlclNsaWRFdmVudCIsImNvbXBsZXRlQ2FsbEJhY2siLCJhY3Rpb24iLCJyaWRlIiwiY2Fyb3VzZWxJbnRlcmZhY2UiLCJzbGlkZUluZGV4IiwiZGF0YUFwaUNsaWNrSGFuZGxlciIsImNhcm91c2VscyIsIk5BTUUkOSIsIkRlZmF1bHQkOCIsIkRlZmF1bHRUeXBlJDgiLCJDTEFTU19OQU1FX1NIT1ckOCIsIkNMQVNTX05BTUVfQ09MTEFQU0UiLCJDTEFTU19OQU1FX0NPTExBUFNJTkciLCJDTEFTU19OQU1FX0NPTExBUFNFRCIsIldJRFRIIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUkNCIsIkNvbGxhcHNlIiwiX2lzVHJhbnNpdGlvbmluZyIsIl90cmlnZ2VyQXJyYXkiLCJpZCIsInRvZ2dsZUxpc3QiLCJlbGVtIiwiZmlsdGVyRWxlbWVudCIsImZvdW5kRWxlbSIsIl9zZWxlY3RvciIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImhpZGUiLCJzaG93IiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwiY29udGFpbmVyIiwidGVtcEFjdGl2ZURhdGEiLCJlbGVtQWN0aXZlIiwiY29sbGFwc2VJbnRlcmZhY2UiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic2V0VHJhbnNpdGlvbmluZyIsInNjcm9sbFNpemUiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCJpc1RyYW5zaXRpb25pbmciLCJzZWxlY3RlZCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsInRyaWdnZXJEYXRhIiwiTkFNRSQ4IiwiRVNDQVBFX0tFWSQyIiwiU1BBQ0VfS0VZIiwiQVJST1dfVVBfS0VZIiwiQVJST1dfRE9XTl9LRVkiLCJSRUdFWFBfS0VZRE9XTiIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJJDMiLCJFVkVOVF9LRVlET1dOX0RBVEFfQVBJIiwiQ0xBU1NfTkFNRV9TSE9XJDciLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzIiwiU0VMRUNUT1JfTUVOVSIsIlBMQUNFTUVOVF9UT1AiLCJQTEFDRU1FTlRfVE9QRU5EIiwiUExBQ0VNRU5UX0JPVFRPTSIsIlBMQUNFTUVOVF9CT1RUT01FTkQiLCJQTEFDRU1FTlRfUklHSFQiLCJQTEFDRU1FTlRfTEVGVCIsIkRlZmF1bHQkNyIsImRpc3BsYXkiLCJwb3BwZXJDb25maWciLCJhdXRvQ2xvc2UiLCJEZWZhdWx0VHlwZSQ3IiwiRHJvcGRvd24iLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiaXNEaXNwbGF5U3RhdGljIiwiZm9jdXMiLCJfY29tcGxldGVIaWRlIiwiRGVmYXVsdCIsIkRlZmF1bHRUeXBlIiwiX2dldFBsYWNlbWVudCIsInBhcmVudERyb3Bkb3duIiwiaXNFbmQiLCJfZ2V0T2Zmc2V0IiwicG9wcGVyRGF0YSIsImRlZmF1bHRCc1BvcHBlckNvbmZpZyIsIl9zZWxlY3RNZW51SXRlbSIsIml0ZW1zIiwiZHJvcGRvd25JbnRlcmZhY2UiLCJ0b2dnbGVzIiwiY29udGV4dCIsImNvbXBvc2VkUGF0aCIsImlzTWVudVRhcmdldCIsImNsaWNrRXZlbnQiLCJpc0FjdGl2ZSIsInN0b3BQcm9wYWdhdGlvbiIsImdldFRvZ2dsZUJ1dHRvbiIsImNsZWFyTWVudXMiLCJjbGljayIsImRhdGFBcGlLZXlkb3duSGFuZGxlciIsIlNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQiLCJTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCIsIlNjcm9sbEJhckhlbHBlciIsImdldFdpZHRoIiwiZG9jdW1lbnRXaWR0aCIsImlubmVyV2lkdGgiLCJfZGlzYWJsZU92ZXJGbG93IiwiX3NldEVsZW1lbnRBdHRyaWJ1dGVzIiwiY2FsY3VsYXRlZFZhbHVlIiwiX3NhdmVJbml0aWFsQXR0cmlidXRlIiwic3R5bGVQcm9wIiwic2Nyb2xsYmFyV2lkdGgiLCJfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayIsIl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiYWN0dWFsVmFsdWUiLCJyZW1vdmVQcm9wZXJ0eSIsImNhbGxCYWNrIiwiaXNPdmVyZmxvd2luZyIsIkRlZmF1bHQkNiIsImNsaWNrQ2FsbGJhY2siLCJEZWZhdWx0VHlwZSQ2IiwiQ0xBU1NfTkFNRV9TSE9XJDYiLCJFVkVOVF9NT1VTRURPV04iLCJCYWNrZHJvcCIsIl9pc0FwcGVuZGVkIiwiX2FwcGVuZCIsIl9nZXRFbGVtZW50IiwiX2VtdWxhdGVBbmltYXRpb24iLCJiYWNrZHJvcCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJhcHBlbmRDaGlsZCIsIk5BTUUkNiIsIkVTQ0FQRV9LRVkkMSIsIkRlZmF1bHQkNSIsIkRlZmF1bHRUeXBlJDUiLCJFVkVOVF9ISURERU4kMyIsIkVWRU5UX1NIT1ckMyIsIkVWRU5UX0ZPQ1VTSU4kMiIsIkVWRU5UX1JFU0laRSIsIkVWRU5UX0NMSUNLX0RJU01JU1MkMiIsIkVWRU5UX0tFWURPV05fRElTTUlTUyQxIiwiRVZFTlRfTU9VU0VET1dOX0RJU01JU1MiLCJDTEFTU19OQU1FX09QRU4iLCJDTEFTU19OQU1FX1NIT1ckNSIsIkNMQVNTX05BTUVfU1RBVElDIiwiTW9kYWwiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2luaXRpYWxpemVCYWNrRHJvcCIsIl9pc1Nob3duIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2Nyb2xsQmFyIiwiX2lzQW5pbWF0ZWQiLCJfYWRqdXN0RGlhbG9nIiwiX3NldEVzY2FwZUV2ZW50IiwiX3NldFJlc2l6ZUV2ZW50IiwiX3Nob3dCYWNrZHJvcCIsIl9zaG93RWxlbWVudCIsIl9oaWRlTW9kYWwiLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIm1vZGFsQm9keSIsIl9lbmZvcmNlRm9jdXMiLCJfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbiIsIl9yZXNldEFkanVzdG1lbnRzIiwiY3VycmVudFRhcmdldCIsImlzTW9kYWxPdmVyZmxvd2luZyIsImlzQm9keU92ZXJmbG93aW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJzaG93RXZlbnQiLCJOQU1FJDUiLCJEZWZhdWx0JDQiLCJEZWZhdWx0VHlwZSQ0IiwiQ0xBU1NfTkFNRV9TSE9XJDQiLCJPUEVOX1NFTEVDVE9SIiwiRVZFTlRfSElEREVOJDIiLCJFVkVOVF9GT0NVU0lOJDEiLCJPZmZjYW52YXMiLCJ2aXNpYmlsaXR5IiwiX2VuZm9yY2VGb2N1c09uRWxlbWVudCIsImJsdXIiLCJhbGxSZWFkeU9wZW4iLCJlbCIsInVyaUF0dHJzIiwiU0FGRV9VUkxfUEFUVEVSTiIsIkRBVEFfVVJMX1BBVFRFUk4iLCJhbGxvd2VkQXR0cmlidXRlIiwiYXR0ciIsImFsbG93ZWRBdHRyaWJ1dGVMaXN0IiwiYXR0ck5hbWUiLCJub2RlVmFsdWUiLCJyZWdFeHAiLCJhdHRyUmVnZXgiLCJzYW5pdGl6ZUh0bWwiLCJ1bnNhZmVIdG1sIiwiYWxsb3dMaXN0Iiwic2FuaXRpemVGbiIsImNyZWF0ZWREb2N1bWVudCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImFsbG93bGlzdEtleXMiLCJlbE5hbWUiLCJhdHRyaWJ1dGVMaXN0IiwiYWxsb3dlZEF0dHJpYnV0ZXMiLCJpbm5lckhUTUwiLCJOQU1FJDQiLCJCU0NMU19QUkVGSVhfUkVHRVgkMSIsIkRJU0FMTE9XRURfQVRUUklCVVRFUyIsIkRlZmF1bHRUeXBlJDMiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJjdXN0b21DbGFzcyIsInNhbml0aXplIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJEZWZhdWx0JDMiLCJhcmVhIiwiYnIiLCJjb2wiLCJjb2RlIiwiZGl2IiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImltZyIsImxpIiwib2wiLCJwIiwicHJlIiwicyIsInNtYWxsIiwic3BhbiIsInN1YiIsInN1cCIsInN0cm9uZyIsInUiLCJ1bCIsIkV2ZW50JDIiLCJISURFIiwiSElEREVOIiwiU0hPVyIsIlNIT1dOIiwiSU5TRVJURUQiLCJDTElDSyIsIkZPQ1VTSU4iLCJGT0NVU09VVCIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiQ0xBU1NfTkFNRV9GQURFJDMiLCJDTEFTU19OQU1FX1NIT1ckMyIsIkhPVkVSX1NUQVRFX1NIT1ciLCJIT1ZFUl9TVEFURV9PVVQiLCJUUklHR0VSX0hPVkVSIiwiVFJJR0dFUl9GT0NVUyIsIlRvb2x0aXAiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIl9oaWRlTW9kYWxIYW5kbGVyIiwiaXNXaXRoQ29udGVudCIsInNoYWRvd1Jvb3QiLCJpc0luVGhlRG9tIiwidGlwSWQiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiX2FkZEF0dGFjaG1lbnRDbGFzcyIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsInNldEVsZW1lbnRDb250ZW50IiwiY29udGVudCIsInRleHRDb250ZW50IiwidXBkYXRlQXR0YWNobWVudCIsImRhdGFLZXkiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwib3JpZ2luYWxUaXRsZVR5cGUiLCJkYXRhQXR0cmlidXRlcyIsImRhdGFBdHRyIiwidGFiQ2xhc3MiLCJ0b2tlbiIsInRDbGFzcyIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsIkRlZmF1bHQkMiIsIkRlZmF1bHRUeXBlJDIiLCJFdmVudCQxIiwiU0VMRUNUT1JfVElUTEUiLCJTRUxFQ1RPUl9DT05URU5UIiwiUG9wb3ZlciIsIl9nZXRDb250ZW50IiwiTkFNRSQyIiwiRGVmYXVsdCQxIiwibWV0aG9kIiwiRGVmYXVsdFR5cGUkMSIsIkNMQVNTX05BTUVfQUNUSVZFJDEiLCJNRVRIT0RfUE9TSVRJT04iLCJTY3JvbGxTcHkiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsIml0ZW0iLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJxdWVyaWVzIiwibGluayIsImpvaW4iLCJsaXN0R3JvdXAiLCJuYXZJdGVtIiwic3B5IiwiQ0xBU1NfTkFNRV9BQ1RJVkUiLCJDTEFTU19OQU1FX0ZBREUkMSIsIkNMQVNTX05BTUVfU0hPVyQxIiwiU0VMRUNUT1JfQUNUSVZFIiwiU0VMRUNUT1JfQUNUSVZFX1VMIiwiVGFiIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRlRXZlbnQiLCJjb21wbGV0ZSIsImFjdGl2ZSIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd24iLCJDTEFTU19OQU1FX0hJREUiLCJDTEFTU19OQU1FX1NIT1ciLCJDTEFTU19OQU1FX1NIT1dJTkciLCJhdXRvaGlkZSIsIlRvYXN0IiwiX2hhc01vdXNlSW50ZXJhY3Rpb24iLCJfaGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiIsIl9jbGVhclRpbWVvdXQiLCJfbWF5YmVTY2hlZHVsZUhpZGUiLCJfb25JbnRlcmFjdGlvbiIsImlzSW50ZXJhY3RpbmciLCJfY29sb3JDb3VudCIsIl9jb2xvcnMiLCJfc2VsZWN0ZWRDb2xvciIsImluaXRDb2xvcnMiLCJpbml0U3ZnIiwidWkiLCJjb250cm9scyIsIkNvbnRyb2xzIiwibG9hZFN2Z0J1dHRvbiIsImNyZWF0ZUZpbGVJbnB1dCIsImZpbGUiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJsb2FkU3ZnIiwicmVhZEFzVGV4dCIsImNyZWF0ZUFjdGlvbkJ1dHRvbiIsImV4cG9ydFN2ZyIsInNlbGVjdGVkQ29sb3JJbnB1dCIsImNyZWF0ZVNlbGVjdExpc3RJbnB1dCIsInNlbGVjdGVkSW5kZXgiLCJjb2xvciIsImNvbG9ySW5wdXQiLCJjcmVhdGVDb2xvcklucHV0IiwibGFiZWxzIiwiZ2VuZXJhdGVDc3MiLCJfc3R5bGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNpIiwiY29tcCIsInN2ZyIsIl9zdmciLCJzdmdQcmV2aWV3Iiwic3ZnRWxlbWVudCIsImFkZENsaWNrTGlzdGVuZXJzIiwic3ZnU3RyaW5nIiwibG9nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlQ2hpbGQiLCJjb2xvck5hbWUiLCJfY29udHJvbHNFbGVtZW50Iiwib25zdWJtaXQiLCJldiIsImNyZWF0ZUdlbmVyaWNSYW5nZWRJbnB1dCIsImxhYmVsIiwicGxhY2Vob2xkZXIiLCJkZXNjcmlwdGlvbiIsInN0ZXAiLCJyYW5nZWRJbnB1dCIsImNyZWF0ZUdlbmVyaWNJbnB1dCIsIlN0cmluZyIsImNyZWF0ZUxhYmVsIiwiaHRtbEZvciIsImxhYmVsRWxlbWVudCIsImlubmVyVGV4dCIsImNyZWF0ZURlc2NyaXB0aW9uIiwic21hbGxJZCIsInNtYWxsRWxlbWVudCIsImNyZWF0ZUlucHV0IiwiY3JlYXRlTWFpbkVsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJidXR0b25FbGVtZW50Iiwic2VsZWN0RWxlbWVudCIsIm9wdGlvbkVsZW1lbnQiLCJjcmVhdGVUZXh0SW5wdXQiLCJjcmVhdGVOdW1iZXJJbnB1dCIsImNyZWF0ZVNsaWRlcklucHV0Iiwic2xpZGVySW5wdXQiLCJhY2NlcHQiLCJtdWx0aXBsZSIsImZpbGVJbnB1dCIsIndyYXBwZXIiLCJwYXJlbnRFbGVtZW50IiwicmVwbGFjZUNoaWxkIiwib25jbGljayIsIm9uY2hhbmdlIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJ1dWlkIiwiYnl0ZVRvSGV4Iiwic3Vic3RyIiwiYXJyIiwiX25vZGVJZCIsIl9jbG9ja3NlcSIsIl9sYXN0TVNlY3MiLCJfbGFzdE5TZWNzIiwiYnVmIiwiY2xvY2tzZXEiLCJzZWVkQnl0ZXMiLCJtc2VjcyIsIkRhdGUiLCJub3ciLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJuIiwidiIsInZlcnNpb24iLCJoYXNoZnVuYyIsImdlbmVyYXRlVVVJRCIsInN0ciIsInVuZXNjYXBlIiwiYnl0ZXMiLCJjaGFyQ29kZUF0Iiwic3RyaW5nVG9CeXRlcyIsImVyciIsIkROUyIsIlVSTCIsImdldE91dHB1dExlbmd0aCIsImlucHV0TGVuZ3RoOCIsInNhZmVBZGQiLCJsc3ciLCJtZDVjbW4iLCJxIiwidCIsIm51bSIsImNudCIsIm1kNWZmIiwiYyIsImQiLCJtZDVnZyIsIm1kNWhoIiwibWQ1aWkiLCJ2MzUiLCJtc2ciLCJpbnB1dCIsIm91dHB1dCIsImxlbmd0aDMyIiwiaGV4VGFiIiwiaGV4IiwibWQ1VG9IZXhFbmNvZGVkQXJyYXkiLCJvbGRhIiwib2xkYiIsIm9sZGMiLCJvbGRkIiwid29yZHNUb01kNSIsImxlbmd0aDgiLCJVaW50MzJBcnJheSIsImJ5dGVzVG9Xb3JkcyIsInJuZHMiLCJmIiwieiIsIlJPVEwiLCJLIiwiSCIsImlzQXJyYXkiLCJsIiwiTiIsImNlaWwiLCJNIiwiaiIsInBvdyIsIl9pMiIsIlciLCJfdCIsIl90MiIsIlQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJlbnVtZXJhYmxlIiwicHJvcCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIlN2Z1BhbGV0dGVEZXNpZ25lciJdLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUNoRCxHQUFzQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxTQUNiLEdBQXFCLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsT0FDUCxDQUNKLElBQUlLLEVBQUlMLElBQ1IsSUFBSSxJQUFJTSxLQUFLRCxHQUF1QixpQkFBWkosUUFBdUJBLFFBQVVGLEdBQU1PLEdBQUtELEVBQUVDLElBUHhFLENBU0dDLE1BQU0sV0FDVCxNLDAzQkNWTyxJQUFJLEVBQU0sTUFDTkMsRUFBUyxTQUNUQyxFQUFRLFFBQ1JDLEVBQU8sT0FDUEMsRUFBTyxPQUNQQyxFQUFpQixDQUFDLEVBQUtKLEVBQVFDLEVBQU9DLEdBQ3RDRyxFQUFRLFFBQ1JDLEVBQU0sTUFDTkMsRUFBa0Isa0JBQ2xCQyxFQUFXLFdBQ1hDLEVBQVMsU0FDVEMsRUFBWSxZQUNaQyxFQUFtQ1AsRUFBZVEsUUFBTyxTQUFVQyxFQUFLQyxHQUNqRixPQUFPRCxFQUFJRSxPQUFPLENBQUNELEVBQVksSUFBTVQsRUFBT1MsRUFB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QyxPQUFPZ1gsVUFBVTVWLGVBQWU4VixLQUFLOEIsRUFBS3d5QixHQ0NsRlAsRUFBb0JRLEVBQUtodkMsSUFDSCxvQkFBWGl2QyxRQUEwQkEsT0FBT0MsYUFDMUMzckMsT0FBTzZnQixlQUFlcGtCLEVBQVNpdkMsT0FBT0MsWUFBYSxDQUFFbnJDLE1BQU8sV0FFN0RSLE9BQU82Z0IsZUFBZXBrQixFQUFTLGFBQWMsQ0FBRStELE9BQU8sSyw4RUNMdkQsT0FDQSxlQUVBeEIsT0FBT2dLLGlCQUFpQixRQUFRLEtBQzVCLElBQUksRUFBQTRpQyx1QiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIFRoaXMgbW9kaWZpZXIgdGFrZXMgdGhlIHN0eWxlcyBwcmVwYXJlZCBieSB0aGUgYGNvbXB1dGVTdHlsZXNgIG1vZGlmaWVyXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTsiLCJpbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB4OiByZWN0LmxlZnQsXG4gICAgeTogcmVjdC50b3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufSIsImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59IC8vIGAub2Zmc2V0UGFyZW50YCByZXBvcnRzIGBudWxsYCBmb3IgZml4ZWQgZWxlbWVudHMsIHdoaWxlIGFic29sdXRlIGVsZW1lbnRzXG4vLyByZXR1cm4gdGhlIGNvbnRhaW5pbmcgYmxvY2tcblxuXG5mdW5jdGlvbiBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkge1xuICB2YXIgaXNGaXJlZm94ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSAhPT0gLTE7XG4gIHZhciBpc0lFID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgIT09IC0xO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCJleHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgcm91bmQgPSBNYXRoLnJvdW5kOyIsImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIG1hdGhNYXgobWluLCBtYXRoTWluKHZhbHVlLCBtYXgpKTtcbn0iLCJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgd2l0aGluIGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4uL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi4vdXRpbHMvZXhwYW5kVG9IYXNoTWFwLmpzXCI7XG5pbXBvcnQgeyBsZWZ0LCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHRvcCwgYm90dG9tIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHRvUGFkZGluZ09iamVjdCA9IGZ1bmN0aW9uIHRvUGFkZGluZ09iamVjdChwYWRkaW5nLCBzdGF0ZSkge1xuICBwYWRkaW5nID0gdHlwZW9mIHBhZGRpbmcgPT09ICdmdW5jdGlvbicgPyBwYWRkaW5nKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogcGFkZGluZztcbiAgcmV0dXJuIG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG59O1xuXG5mdW5jdGlvbiBhcnJvdyhfcmVmKSB7XG4gIHZhciBfc3RhdGUkbW9kaWZpZXJzRGF0YSQ7XG5cbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBpc1ZlcnRpY2FsID0gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDA7XG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIGlmICghYXJyb3dFbGVtZW50IHx8ICFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdPYmplY3QgPSB0b1BhZGRpbmdPYmplY3Qob3B0aW9ucy5wYWRkaW5nLCBzdGF0ZSk7XG4gIHZhciBhcnJvd1JlY3QgPSBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCk7XG4gIHZhciBtaW5Qcm9wID0gYXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgdmFyIG1heFByb3AgPSBheGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgdmFyIGVuZERpZmYgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbbGVuXSArIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXSAtIHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5wb3BwZXJbbGVuXTtcbiAgdmFyIHN0YXJ0RGlmZiA9IHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc107XG4gIHZhciBhcnJvd09mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChhcnJvd0VsZW1lbnQpO1xuICB2YXIgY2xpZW50U2l6ZSA9IGFycm93T2Zmc2V0UGFyZW50ID8gYXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRXaWR0aCB8fCAwIDogMDtcbiAgdmFyIGNlbnRlclRvUmVmZXJlbmNlID0gZW5kRGlmZiAvIDIgLSBzdGFydERpZmYgLyAyOyAvLyBNYWtlIHN1cmUgdGhlIGFycm93IGRvZXNuJ3Qgb3ZlcmZsb3cgdGhlIHBvcHBlciBpZiB0aGUgY2VudGVyIHBvaW50IGlzXG4gIC8vIG91dHNpZGUgb2YgdGhlIHBvcHBlciBib3VuZHNcblxuICB2YXIgbWluID0gcGFkZGluZ09iamVjdFttaW5Qcm9wXTtcbiAgdmFyIG1heCA9IGNsaWVudFNpemUgLSBhcnJvd1JlY3RbbGVuXSAtIHBhZGRpbmdPYmplY3RbbWF4UHJvcF07XG4gIHZhciBjZW50ZXIgPSBjbGllbnRTaXplIC8gMiAtIGFycm93UmVjdFtsZW5dIC8gMiArIGNlbnRlclRvUmVmZXJlbmNlO1xuICB2YXIgb2Zmc2V0ID0gd2l0aGluKG1pbiwgY2VudGVyLCBtYXgpOyAvLyBQcmV2ZW50cyBicmVha2luZyBzeW50YXggaGlnaGxpZ2h0aW5nLi4uXG5cbiAgdmFyIGF4aXNQcm9wID0gYXhpcztcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IChfc3RhdGUkbW9kaWZpZXJzRGF0YSQgPSB7fSwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkW2F4aXNQcm9wXSA9IG9mZnNldCwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkLmNlbnRlck9mZnNldCA9IG9mZnNldCAtIGNlbnRlciwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50LFxuICAgICAgYXJyb3dFbGVtZW50ID0gX29wdGlvbnMkZWxlbWVudCA9PT0gdm9pZCAwID8gJ1tkYXRhLXBvcHBlci1hcnJvd10nIDogX29wdGlvbnMkZWxlbWVudDtcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ1NTIHNlbGVjdG9yXG5cblxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBlbGVtZW50IG11c3QgYmUgYW4gSFRNTEVsZW1lbnQgKG5vdCBhbiBTVkdFbGVtZW50KS4nLCAnVG8gdXNlIGFuIFNWRyBhcnJvdywgd3JhcCBpdCBpbiBhbiBIVE1MRWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcycsICd0aGUgYXJyb3cuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBtb2RpZmllclxcJ3MgYGVsZW1lbnRgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgcG9wcGVyJywgJ2VsZW1lbnQuJ10uam9pbignICcpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGFycm93LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddXG59OyIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHJvdW5kKHggKiBkcHIpIC8gZHByKSB8fCAwLFxuICAgIHk6IHJvdW5kKHJvdW5kKHkgKiBkcHIpIC8gZHByKSB8fCAwXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb1N0eWxlcyhfcmVmMikge1xuICB2YXIgX09iamVjdCRhc3NpZ24yO1xuXG4gIHZhciBwb3BwZXIgPSBfcmVmMi5wb3BwZXIsXG4gICAgICBwb3BwZXJSZWN0ID0gX3JlZjIucG9wcGVyUmVjdCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIG9mZnNldHMgPSBfcmVmMi5vZmZzZXRzLFxuICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9yZWYyLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGFkYXB0aXZlID0gX3JlZjIuYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHMgPSBfcmVmMi5yb3VuZE9mZnNldHM7XG5cbiAgdmFyIF9yZWYzID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIob2Zmc2V0cykgOiB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKG9mZnNldHMpIDogb2Zmc2V0cyxcbiAgICAgIF9yZWYzJHggPSBfcmVmMy54LFxuICAgICAgeCA9IF9yZWYzJHggPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR4LFxuICAgICAgX3JlZjMkeSA9IF9yZWYzLnksXG4gICAgICB5ID0gX3JlZjMkeSA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJHk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3ApIHtcbiAgICAgIHNpZGVZID0gYm90dG9tOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgeSAtPSBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF0gLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB4IC09IG9mZnNldFBhcmVudFt3aWR0aFByb3BdIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbikge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltzaWRlWV0gPSBoYXNZID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduW3NpZGVYXSA9IGhhc1ggPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ24udHJhbnNmb3JtID0gKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDwgMiA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNC5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoYWRhcHRpdmUgJiYgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICB9KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBEZXRlY3RlZCBDU1MgdHJhbnNpdGlvbnMgb24gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcnLCAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJywgJ1xcblxcbicsICdEaXNhYmxlIHRoZSBcImNvbXB1dGVTdHlsZXNcIiBtb2RpZmllclxcJ3MgYGFkYXB0aXZlYCBvcHRpb24gdG8gYWxsb3cnLCAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJywgJ3RyYW5zaXRpb24gZGVjbGFyYXRpb24gb24gdGhlIHBvcHBlciBlbGVtZW50IGlmIG9ubHkgdHJhbnNpdGlvbmluZycsICdvcGFjaXR5IG9yIGJhY2tncm91bmQtY29sb3IgZm9yIGV4YW1wbGUuJywgJ1xcblxcbicsICdXZSByZWNvbW1lbmQgdXNpbmcgdGhlIHBvcHBlciBlbGVtZW50IGFzIGEgd3JhcHBlciBhcm91bmQgYW4gaW5uZXInLCAnZWxlbWVudCB0aGF0IGNhbiBoYXZlIGFueSBDU1MgcHJvcGVydHkgdHJhbnNpdGlvbmVkIGZvciBhbmltYXRpb25zLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiBncHVBY2NlbGVyYXRpb25cbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufSIsImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09ICgoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHkpO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcmVjdCwge1xuICAgIGxlZnQ6IHJlY3QueCxcbiAgICB0b3A6IHJlY3QueSxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSkgOiBpc0hUTUxFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwOyAvLyBOQjogVGhpcyBpc24ndCBzdXBwb3J0ZWQgb24gaU9TIDw9IDEyLiBJZiB0aGUga2V5Ym9hcmQgaXMgb3BlbiwgdGhlIHBvcHBlclxuICAvLyBjYW4gYmUgb2JzY3VyZWQgdW5kZXJuZWF0aCBpdC5cbiAgLy8gQWxzbywgYGh0bWwuY2xpZW50SGVpZ2h0YCBhZGRzIHRoZSBib3R0b20gYmFyIGhlaWdodCBpbiBTYWZhcmkgaU9TLCBldmVuXG4gIC8vIGlmIGl0IGlzbid0IG9wZW4sIHNvIGlmIHRoaXMgaXNuJ3QgYXZhaWxhYmxlLCB0aGUgcG9wcGVyIHdpbGwgYmUgZGV0ZWN0ZWRcbiAgLy8gdG8gb3ZlcmZsb3cgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIHRvbyBlYXJseS5cblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDsgLy8gVXNlcyBMYXlvdXQgVmlld3BvcnQgKGxpa2UgQ2hyb21lOyBTYWZhcmkgZG9lcyBub3QgY3VycmVudGx5KVxuICAgIC8vIEluIENocm9tZSwgaXQgcmV0dXJucyBhIHZhbHVlIHZlcnkgY2xvc2UgdG8gMCAoKy8tKSBidXQgY29udGFpbnMgcm91bmRpbmdcbiAgICAvLyBlcnJvcnMgZHVlIHRvIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIHNvIHdlIG5lZWQgdG8gY2hlY2sgcHJlY2lzaW9uLlxuICAgIC8vIFNhZmFyaSByZXR1cm5zIGEgbnVtYmVyIDw9IDAsIHVzdWFsbHkgPCAtMSB3aGVuIHBpbmNoLXpvb21lZFxuICAgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZhaWxzIGluIG1vYmlsZSBlbXVsYXRpb24gbW9kZSBpbiBDaHJvbWUuXG4gICAgLy8gTWF0aC5hYnMod2luLmlubmVyV2lkdGggLyB2aXN1YWxWaWV3cG9ydC5zY2FsZSAtIHZpc3VhbFZpZXdwb3J0LndpZHRoKSA8XG4gICAgLy8gMC4wMDFcbiAgICAvLyBGYWxsYmFjayBoZXJlOiBcIk5vdCBTYWZhcmlcIiB1c2VyQWdlbnRcblxuICAgIGlmICghL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4vcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgY2xpcHBpbmdQYXJlbnRzLCByZWZlcmVuY2UsIHBvcHBlciwgYm90dG9tLCB0b3AsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4vZXhwYW5kVG9IYXNoTWFwLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZUVsZW1lbnQpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHBvcHBlck9mZnNldHMpKTtcbiAgdmFyIGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0OyAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcblxuICB2YXIgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTogZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC0gY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDogZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0XG4gIH07XG4gIHZhciBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7IC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcblxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgdmFyIGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufSIsImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyDigJMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHdpdGhpbiBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMgfHwgY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIHRldGhlck9mZnNldFZhbHVlIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWUgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XVttYWluQXhpc10gOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IG1hdGhNYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKF9taW4sIHRldGhlck1pbikgOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KF9tYXgsIHRldGhlck1heCkgOiBfbWF4KTtcblxuICAgICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tIFwiLi9nZXROb2RlU2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7IC8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50KTtcbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgeyBtb2RpZmllclBoYXNlcyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBzb3VyY2U6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5ODc1MjU1XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlc107XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyIsIi8qIVxuICAqIEJvb3RzdHJhcCB2NS4wLjIgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAyMSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAqL1xuaW1wb3J0ICogYXMgUG9wcGVyIGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBkb20vc2VsZWN0b3ItZW5naW5lLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmNvbnN0IE5PREVfVEVYVCA9IDM7XG5jb25zdCBTZWxlY3RvckVuZ2luZSA9IHtcbiAgZmluZChzZWxlY3RvciwgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiBbXS5jb25jYXQoLi4uRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbC5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKSk7XG4gIH0sXG5cbiAgZmluZE9uZShzZWxlY3RvciwgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpO1xuICB9LFxuXG4gIGNoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdCguLi5lbGVtZW50LmNoaWxkcmVuKS5maWx0ZXIoY2hpbGQgPT4gY2hpbGQubWF0Y2hlcyhzZWxlY3RvcikpO1xuICB9LFxuXG4gIHBhcmVudHMoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBwYXJlbnRzID0gW107XG4gICAgbGV0IGFuY2VzdG9yID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgd2hpbGUgKGFuY2VzdG9yICYmIGFuY2VzdG9yLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBhbmNlc3Rvci5ub2RlVHlwZSAhPT0gTk9ERV9URVhUKSB7XG4gICAgICBpZiAoYW5jZXN0b3IubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKGFuY2VzdG9yKTtcbiAgICAgIH1cblxuICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRzO1xuICB9LFxuXG4gIHByZXYoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBsZXQgcHJldmlvdXMgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG5cbiAgICB3aGlsZSAocHJldmlvdXMpIHtcbiAgICAgIGlmIChwcmV2aW91cy5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gW3ByZXZpb3VzXTtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXMgPSBwcmV2aW91cy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfSxcblxuICBuZXh0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgbGV0IG5leHQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcblxuICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICBpZiAobmV4dC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gW25leHRdO1xuICAgICAgfVxuXG4gICAgICBuZXh0ID0gbmV4dC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdXRpbC9pbmRleC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE1BWF9VSUQgPSAxMDAwMDAwO1xuY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwO1xuY29uc3QgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblxuY29uc3QgdG9UeXBlID0gb2JqID0+IHtcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBgJHtvYmp9YDtcbiAgfVxuXG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XG59O1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUHVibGljIFV0aWwgQXBpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuY29uc3QgZ2V0VUlEID0gcHJlZml4ID0+IHtcbiAgZG8ge1xuICAgIHByZWZpeCArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTtcbiAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgcmV0dXJuIHByZWZpeDtcbn07XG5cbmNvbnN0IGdldFNlbGVjdG9yID0gZWxlbWVudCA9PiB7XG4gIGxldCBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXRhcmdldCcpO1xuXG4gIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgIGxldCBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7IC8vIFRoZSBvbmx5IHZhbGlkIGNvbnRlbnQgdGhhdCBjb3VsZCBkb3VibGUgYXMgYSBzZWxlY3RvciBhcmUgSURzIG9yIGNsYXNzZXMsXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgIC8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCB3aWxsIHJpZ2h0ZnVsbHkgY29tcGxhaW4gaXQgaXMgaW52YWxpZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8zMjI3M1xuXG4gICAgaWYgKCFocmVmQXR0ciB8fCAhaHJlZkF0dHIuaW5jbHVkZXMoJyMnKSAmJiAhaHJlZkF0dHIuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIEp1c3QgaW4gY2FzZSBzb21lIENNUyBwdXRzIG91dCBhIGZ1bGwgVVJMIHdpdGggdGhlIGFuY2hvciBhcHBlbmRlZFxuXG5cbiAgICBpZiAoaHJlZkF0dHIuaW5jbHVkZXMoJyMnKSAmJiAhaHJlZkF0dHIuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICBocmVmQXR0ciA9IGAjJHtocmVmQXR0ci5zcGxpdCgnIycpWzFdfWA7XG4gICAgfVxuXG4gICAgc2VsZWN0b3IgPSBocmVmQXR0ciAmJiBocmVmQXR0ciAhPT0gJyMnID8gaHJlZkF0dHIudHJpbSgpIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn07XG5cbmNvbnN0IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KTtcblxuICBpZiAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KTtcbiAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsO1xufTtcblxuY29uc3QgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcblxuXG4gIGxldCB7XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIHRyYW5zaXRpb25EZWxheVxuICB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpOyAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG5cbiAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG5cblxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXTtcbiAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF07XG4gIHJldHVybiAoTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVI7XG59O1xuXG5jb25zdCB0cmlnZ2VyVHJhbnNpdGlvbkVuZCA9IGVsZW1lbnQgPT4ge1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFRSQU5TSVRJT05fRU5EKSk7XG59O1xuXG5jb25zdCBpc0VsZW1lbnQgPSBvYmogPT4ge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvYmogPSBvYmpbMF07XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5jb25zdCBnZXRFbGVtZW50ID0gb2JqID0+IHtcbiAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgLy8gaXQncyBhIGpRdWVyeSBvYmplY3Qgb3IgYSBub2RlIGVsZW1lbnRcbiAgICByZXR1cm4gb2JqLmpxdWVyeSA/IG9ialswXSA6IG9iajtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyAmJiBvYmoubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kT25lKG9iaik7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IHR5cGVDaGVja0NvbmZpZyA9IChjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSA9PiB7XG4gIE9iamVjdC5rZXlzKGNvbmZpZ1R5cGVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldO1xuICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICBjb25zdCB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBpc0VsZW1lbnQodmFsdWUpID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKTtcblxuICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwiJHtwcm9wZXJ0eX1cIiBwcm92aWRlZCB0eXBlIFwiJHt2YWx1ZVR5cGV9XCIgYnV0IGV4cGVjdGVkIHR5cGUgXCIke2V4cGVjdGVkVHlwZXN9XCIuYCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IGlzVmlzaWJsZSA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWlzRWxlbWVudChlbGVtZW50KSB8fCBlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpID09PSAndmlzaWJsZSc7XG59O1xuXG5jb25zdCBpc0Rpc2FibGVkID0gZWxlbWVudCA9PiB7XG4gIGlmICghZWxlbWVudCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGVsZW1lbnQuZGlzYWJsZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZGlzYWJsZWQ7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgIT09ICdmYWxzZSc7XG59O1xuXG5jb25zdCBmaW5kU2hhZG93Um9vdCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcblxuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5nZXRSb290Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGw7XG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSAvLyB3aGVuIHdlIGRvbid0IGZpbmQgYSBzaGFkb3cgcm9vdFxuXG5cbiAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmaW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpO1xufTtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG5jb25zdCByZWZsb3cgPSBlbGVtZW50ID0+IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG5jb25zdCBnZXRqUXVlcnkgPSAoKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBqUXVlcnlcbiAgfSA9IHdpbmRvdztcblxuICBpZiAoalF1ZXJ5ICYmICFkb2N1bWVudC5ib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS1icy1uby1qcXVlcnknKSkge1xuICAgIHJldHVybiBqUXVlcnk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MgPSBbXTtcblxuY29uc3Qgb25ET01Db250ZW50TG9hZGVkID0gY2FsbGJhY2sgPT4ge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgLy8gYWRkIGxpc3RlbmVyIG9uIHRoZSBmaXJzdCBjYWxsIHdoZW4gdGhlIGRvY3VtZW50IGlzIGluIGxvYWRpbmcgc3RhdGVcbiAgICBpZiAoIURPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn07XG5cbmNvbnN0IGlzUlRMID0gKCkgPT4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpciA9PT0gJ3J0bCc7XG5cbmNvbnN0IGRlZmluZUpRdWVyeVBsdWdpbiA9IHBsdWdpbiA9PiB7XG4gIG9uRE9NQ29udGVudExvYWRlZCgoKSA9PiB7XG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG4gICAgaWYgKCQpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwbHVnaW4uTkFNRTtcbiAgICAgIGNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bbmFtZV07XG4gICAgICAkLmZuW25hbWVdID0gcGx1Z2luLmpRdWVyeUludGVyZmFjZTtcbiAgICAgICQuZm5bbmFtZV0uQ29uc3RydWN0b3IgPSBwbHVnaW47XG5cbiAgICAgICQuZm5bbmFtZV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgICAgICAgJC5mbltuYW1lXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5qUXVlcnlJbnRlcmZhY2U7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBleGVjdXRlID0gY2FsbGJhY2sgPT4ge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufTtcblxuY29uc3QgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbiA9IChjYWxsYmFjaywgdHJhbnNpdGlvbkVsZW1lbnQsIHdhaXRGb3JUcmFuc2l0aW9uID0gdHJ1ZSkgPT4ge1xuICBpZiAoIXdhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZHVyYXRpb25QYWRkaW5nID0gNTtcbiAgY29uc3QgZW11bGF0ZWREdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRyYW5zaXRpb25FbGVtZW50KSArIGR1cmF0aW9uUGFkZGluZztcbiAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhbmRsZXIgPSAoe1xuICAgIHRhcmdldFxuICB9KSA9PiB7XG4gICAgaWYgKHRhcmdldCAhPT0gdHJhbnNpdGlvbkVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHRyYW5zaXRpb25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpO1xuICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICB9O1xuXG4gIHRyYW5zaXRpb25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkVsZW1lbnQpO1xuICAgIH1cbiAgfSwgZW11bGF0ZWREdXJhdGlvbik7XG59O1xuLyoqXG4gKiBSZXR1cm4gdGhlIHByZXZpb3VzL25leHQgZWxlbWVudCBvZiBhIGxpc3QuXG4gKlxuICogQHBhcmFtIHthcnJheX0gbGlzdCAgICBUaGUgbGlzdCBvZiBlbGVtZW50c1xuICogQHBhcmFtIGFjdGl2ZUVsZW1lbnQgICBUaGUgYWN0aXZlIGVsZW1lbnRcbiAqIEBwYXJhbSBzaG91bGRHZXROZXh0ICAgQ2hvb3NlIHRvIGdldCBuZXh0IG9yIHByZXZpb3VzIGVsZW1lbnRcbiAqIEBwYXJhbSBpc0N5Y2xlQWxsb3dlZFxuICogQHJldHVybiB7RWxlbWVudHxlbGVtfSBUaGUgcHJvcGVyIGVsZW1lbnRcbiAqL1xuXG5cbmNvbnN0IGdldE5leHRBY3RpdmVFbGVtZW50ID0gKGxpc3QsIGFjdGl2ZUVsZW1lbnQsIHNob3VsZEdldE5leHQsIGlzQ3ljbGVBbGxvd2VkKSA9PiB7XG4gIGxldCBpbmRleCA9IGxpc3QuaW5kZXhPZihhY3RpdmVFbGVtZW50KTsgLy8gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3QgcmV0dXJuIGFuIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHRoZSBkaXJlY3Rpb24gYW5kIGlmIGN5Y2xlIGlzIGFsbG93ZWRcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIGxpc3RbIXNob3VsZEdldE5leHQgJiYgaXNDeWNsZUFsbG93ZWQgPyBsaXN0Lmxlbmd0aCAtIDEgOiAwXTtcbiAgfVxuXG4gIGNvbnN0IGxpc3RMZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgaW5kZXggKz0gc2hvdWxkR2V0TmV4dCA/IDEgOiAtMTtcblxuICBpZiAoaXNDeWNsZUFsbG93ZWQpIHtcbiAgICBpbmRleCA9IChpbmRleCArIGxpc3RMZW5ndGgpICUgbGlzdExlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBsaXN0W01hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBsaXN0TGVuZ3RoIC0gMSkpXTtcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogZG9tL2V2ZW50LWhhbmRsZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgbmFtZXNwYWNlUmVnZXggPSAvW14uXSooPz1cXC4uKilcXC58LiovO1xuY29uc3Qgc3RyaXBOYW1lUmVnZXggPSAvXFwuLiovO1xuY29uc3Qgc3RyaXBVaWRSZWdleCA9IC86OlxcZCskLztcbmNvbnN0IGV2ZW50UmVnaXN0cnkgPSB7fTsgLy8gRXZlbnRzIHN0b3JhZ2VcblxubGV0IHVpZEV2ZW50ID0gMTtcbmNvbnN0IGN1c3RvbUV2ZW50cyA9IHtcbiAgbW91c2VlbnRlcjogJ21vdXNlb3ZlcicsXG4gIG1vdXNlbGVhdmU6ICdtb3VzZW91dCdcbn07XG5jb25zdCBjdXN0b21FdmVudHNSZWdleCA9IC9eKG1vdXNlZW50ZXJ8bW91c2VsZWF2ZSkvaTtcbmNvbnN0IG5hdGl2ZUV2ZW50cyA9IG5ldyBTZXQoWydjbGljaycsICdkYmxjbGljaycsICdtb3VzZXVwJywgJ21vdXNlZG93bicsICdjb250ZXh0bWVudScsICdtb3VzZXdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZW1vdmUnLCAnc2VsZWN0c3RhcnQnLCAnc2VsZWN0ZW5kJywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnLCAnb3JpZW50YXRpb25jaGFuZ2UnLCAndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnLCAncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJsZWF2ZScsICdwb2ludGVyY2FuY2VsJywgJ2dlc3R1cmVzdGFydCcsICdnZXN0dXJlY2hhbmdlJywgJ2dlc3R1cmVlbmQnLCAnZm9jdXMnLCAnYmx1cicsICdjaGFuZ2UnLCAncmVzZXQnLCAnc2VsZWN0JywgJ3N1Ym1pdCcsICdmb2N1c2luJywgJ2ZvY3Vzb3V0JywgJ2xvYWQnLCAndW5sb2FkJywgJ2JlZm9yZXVubG9hZCcsICdyZXNpemUnLCAnbW92ZScsICdET01Db250ZW50TG9hZGVkJywgJ3JlYWR5c3RhdGVjaGFuZ2UnLCAnZXJyb3InLCAnYWJvcnQnLCAnc2Nyb2xsJ10pO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFByaXZhdGUgbWV0aG9kc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZnVuY3Rpb24gZ2V0VWlkRXZlbnQoZWxlbWVudCwgdWlkKSB7XG4gIHJldHVybiB1aWQgJiYgYCR7dWlkfTo6JHt1aWRFdmVudCsrfWAgfHwgZWxlbWVudC51aWRFdmVudCB8fCB1aWRFdmVudCsrO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudChlbGVtZW50KSB7XG4gIGNvbnN0IHVpZCA9IGdldFVpZEV2ZW50KGVsZW1lbnQpO1xuICBlbGVtZW50LnVpZEV2ZW50ID0gdWlkO1xuICBldmVudFJlZ2lzdHJ5W3VpZF0gPSBldmVudFJlZ2lzdHJ5W3VpZF0gfHwge307XG4gIHJldHVybiBldmVudFJlZ2lzdHJ5W3VpZF07XG59XG5cbmZ1bmN0aW9uIGJvb3RzdHJhcEhhbmRsZXIoZWxlbWVudCwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICBldmVudC5kZWxlZ2F0ZVRhcmdldCA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoaGFuZGxlci5vbmVPZmYpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgZm4pO1xuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgc2VsZWN0b3IsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgZG9tRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChsZXQge1xuICAgICAgdGFyZ2V0XG4gICAgfSA9IGV2ZW50OyB0YXJnZXQgJiYgdGFyZ2V0ICE9PSB0aGlzOyB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZSkge1xuICAgICAgZm9yIChsZXQgaSA9IGRvbUVsZW1lbnRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudHNbaV0gPT09IHRhcmdldCkge1xuICAgICAgICAgIGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgaWYgKGhhbmRsZXIub25lT2ZmKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9jb25zaXN0ZW50LWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgc2VsZWN0b3IsIGZuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGFyZ2V0LCBbZXZlbnRdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gVG8gcGxlYXNlIEVTTGludFxuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEhhbmRsZXIoZXZlbnRzLCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IgPSBudWxsKSB7XG4gIGNvbnN0IHVpZEV2ZW50TGlzdCA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHVpZEV2ZW50TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW3VpZEV2ZW50TGlzdFtpXV07XG5cbiAgICBpZiAoZXZlbnQub3JpZ2luYWxIYW5kbGVyID09PSBoYW5kbGVyICYmIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvciA9PT0gZGVsZWdhdGlvblNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhcmFtcyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XG4gIGNvbnN0IGRlbGVnYXRpb24gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZyc7XG4gIGNvbnN0IG9yaWdpbmFsSGFuZGxlciA9IGRlbGVnYXRpb24gPyBkZWxlZ2F0aW9uRm4gOiBoYW5kbGVyO1xuICBsZXQgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KG9yaWdpbmFsVHlwZUV2ZW50KTtcbiAgY29uc3QgaXNOYXRpdmUgPSBuYXRpdmVFdmVudHMuaGFzKHR5cGVFdmVudCk7XG5cbiAgaWYgKCFpc05hdGl2ZSkge1xuICAgIHR5cGVFdmVudCA9IG9yaWdpbmFsVHlwZUV2ZW50O1xuICB9XG5cbiAgcmV0dXJuIFtkZWxlZ2F0aW9uLCBvcmlnaW5hbEhhbmRsZXIsIHR5cGVFdmVudF07XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZWxlbWVudCwgb3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbiwgb25lT2ZmKSB7XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWxUeXBlRXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgaGFuZGxlciA9IGRlbGVnYXRpb25GbjtcbiAgICBkZWxlZ2F0aW9uRm4gPSBudWxsO1xuICB9IC8vIGluIGNhc2Ugb2YgbW91c2VlbnRlciBvciBtb3VzZWxlYXZlIHdyYXAgdGhlIGhhbmRsZXIgd2l0aGluIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgZm9yIGl0cyBET00gcG9zaXRpb25cbiAgLy8gdGhpcyBwcmV2ZW50cyB0aGUgaGFuZGxlciBmcm9tIGJlaW5nIGRpc3BhdGNoZWQgdGhlIHNhbWUgd2F5IGFzIG1vdXNlb3ZlciBvciBtb3VzZW91dCBkb2VzXG5cblxuICBpZiAoY3VzdG9tRXZlbnRzUmVnZXgudGVzdChvcmlnaW5hbFR5cGVFdmVudCkpIHtcbiAgICBjb25zdCB3cmFwRm4gPSBmbiA9PiB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0ICE9PSBldmVudC5kZWxlZ2F0ZVRhcmdldCAmJiAhZXZlbnQuZGVsZWdhdGVUYXJnZXQuY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcblxuICAgIGlmIChkZWxlZ2F0aW9uRm4pIHtcbiAgICAgIGRlbGVnYXRpb25GbiA9IHdyYXBGbihkZWxlZ2F0aW9uRm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVyID0gd3JhcEZuKGhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFtkZWxlZ2F0aW9uLCBvcmlnaW5hbEhhbmRsZXIsIHR5cGVFdmVudF0gPSBub3JtYWxpemVQYXJhbXMob3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbik7XG4gIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50KGVsZW1lbnQpO1xuICBjb25zdCBoYW5kbGVycyA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IChldmVudHNbdHlwZUV2ZW50XSA9IHt9KTtcbiAgY29uc3QgcHJldmlvdXNGbiA9IGZpbmRIYW5kbGVyKGhhbmRsZXJzLCBvcmlnaW5hbEhhbmRsZXIsIGRlbGVnYXRpb24gPyBoYW5kbGVyIDogbnVsbCk7XG5cbiAgaWYgKHByZXZpb3VzRm4pIHtcbiAgICBwcmV2aW91c0ZuLm9uZU9mZiA9IHByZXZpb3VzRm4ub25lT2ZmICYmIG9uZU9mZjtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB1aWQgPSBnZXRVaWRFdmVudChvcmlnaW5hbEhhbmRsZXIsIG9yaWdpbmFsVHlwZUV2ZW50LnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSk7XG4gIGNvbnN0IGZuID0gZGVsZWdhdGlvbiA/IGJvb3RzdHJhcERlbGVnYXRpb25IYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbikgOiBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIpO1xuICBmbi5kZWxlZ2F0aW9uU2VsZWN0b3IgPSBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGw7XG4gIGZuLm9yaWdpbmFsSGFuZGxlciA9IG9yaWdpbmFsSGFuZGxlcjtcbiAgZm4ub25lT2ZmID0gb25lT2ZmO1xuICBmbi51aWRFdmVudCA9IHVpZDtcbiAgaGFuZGxlcnNbdWlkXSA9IGZuO1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZUV2ZW50LCBmbiwgZGVsZWdhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3Rvcikge1xuICBjb25zdCBmbiA9IGZpbmRIYW5kbGVyKGV2ZW50c1t0eXBlRXZlbnRdLCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IpO1xuXG4gIGlmICghZm4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZUV2ZW50LCBmbiwgQm9vbGVhbihkZWxlZ2F0aW9uU2VsZWN0b3IpKTtcbiAgZGVsZXRlIGV2ZW50c1t0eXBlRXZlbnRdW2ZuLnVpZEV2ZW50XTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBuYW1lc3BhY2UpIHtcbiAgY29uc3Qgc3RvcmVFbGVtZW50RXZlbnQgPSBldmVudHNbdHlwZUV2ZW50XSB8fCB7fTtcbiAgT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpLmZvckVhY2goaGFuZGxlcktleSA9PiB7XG4gICAgaWYgKGhhbmRsZXJLZXkuaW5jbHVkZXMobmFtZXNwYWNlKSkge1xuICAgICAgY29uc3QgZXZlbnQgPSBzdG9yZUVsZW1lbnRFdmVudFtoYW5kbGVyS2V5XTtcbiAgICAgIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIGV2ZW50Lm9yaWdpbmFsSGFuZGxlciwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlRXZlbnQoZXZlbnQpIHtcbiAgLy8gYWxsb3cgdG8gZ2V0IHRoZSBuYXRpdmUgZXZlbnRzIGZyb20gbmFtZXNwYWNlZCBldmVudHMgKCdjbGljay5icy5idXR0b24nIC0tPiAnY2xpY2snKVxuICBldmVudCA9IGV2ZW50LnJlcGxhY2Uoc3RyaXBOYW1lUmVnZXgsICcnKTtcbiAgcmV0dXJuIGN1c3RvbUV2ZW50c1tldmVudF0gfHwgZXZlbnQ7XG59XG5cbmNvbnN0IEV2ZW50SGFuZGxlciA9IHtcbiAgb24oZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICAgIGFkZEhhbmRsZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbiwgZmFsc2UpO1xuICB9LFxuXG4gIG9uZShlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XG4gICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuLCB0cnVlKTtcbiAgfSxcblxuICBvZmYoZWxlbWVudCwgb3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxUeXBlRXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgW2RlbGVnYXRpb24sIG9yaWdpbmFsSGFuZGxlciwgdHlwZUV2ZW50XSA9IG5vcm1hbGl6ZVBhcmFtcyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKTtcbiAgICBjb25zdCBpbk5hbWVzcGFjZSA9IHR5cGVFdmVudCAhPT0gb3JpZ2luYWxUeXBlRXZlbnQ7XG4gICAgY29uc3QgZXZlbnRzID0gZ2V0RXZlbnQoZWxlbWVudCk7XG4gICAgY29uc3QgaXNOYW1lc3BhY2UgPSBvcmlnaW5hbFR5cGVFdmVudC5zdGFydHNXaXRoKCcuJyk7XG5cbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsSGFuZGxlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFNpbXBsZXN0IGNhc2U6IGhhbmRsZXIgaXMgcGFzc2VkLCByZW1vdmUgdGhhdCBsaXN0ZW5lciBPTkxZLlxuICAgICAgaWYgKCFldmVudHMgfHwgIWV2ZW50c1t0eXBlRXZlbnRdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgb3JpZ2luYWxIYW5kbGVyLCBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc05hbWVzcGFjZSkge1xuICAgICAgT2JqZWN0LmtleXMoZXZlbnRzKS5mb3JFYWNoKGVsZW1lbnRFdmVudCA9PiB7XG4gICAgICAgIHJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyhlbGVtZW50LCBldmVudHMsIGVsZW1lbnRFdmVudCwgb3JpZ2luYWxUeXBlRXZlbnQuc2xpY2UoMSkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVFbGVtZW50RXZlbnQgPSBldmVudHNbdHlwZUV2ZW50XSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkuZm9yRWFjaChrZXlIYW5kbGVycyA9PiB7XG4gICAgICBjb25zdCBoYW5kbGVyS2V5ID0ga2V5SGFuZGxlcnMucmVwbGFjZShzdHJpcFVpZFJlZ2V4LCAnJyk7XG5cbiAgICAgIGlmICghaW5OYW1lc3BhY2UgfHwgb3JpZ2luYWxUeXBlRXZlbnQuaW5jbHVkZXMoaGFuZGxlcktleSkpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBzdG9yZUVsZW1lbnRFdmVudFtrZXlIYW5kbGVyc107XG4gICAgICAgIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIGV2ZW50Lm9yaWdpbmFsSGFuZGxlciwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB0cmlnZ2VyKGVsZW1lbnQsIGV2ZW50LCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0ICQgPSBnZXRqUXVlcnkoKTtcbiAgICBjb25zdCB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQoZXZlbnQpO1xuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gZXZlbnQgIT09IHR5cGVFdmVudDtcbiAgICBjb25zdCBpc05hdGl2ZSA9IG5hdGl2ZUV2ZW50cy5oYXModHlwZUV2ZW50KTtcbiAgICBsZXQgalF1ZXJ5RXZlbnQ7XG4gICAgbGV0IGJ1YmJsZXMgPSB0cnVlO1xuICAgIGxldCBuYXRpdmVEaXNwYXRjaCA9IHRydWU7XG4gICAgbGV0IGRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICBsZXQgZXZ0ID0gbnVsbDtcblxuICAgIGlmIChpbk5hbWVzcGFjZSAmJiAkKSB7XG4gICAgICBqUXVlcnlFdmVudCA9ICQuRXZlbnQoZXZlbnQsIGFyZ3MpO1xuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKGpRdWVyeUV2ZW50KTtcbiAgICAgIGJ1YmJsZXMgPSAhalF1ZXJ5RXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtcbiAgICAgIG5hdGl2ZURpc3BhdGNoID0gIWpRdWVyeUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCk7XG4gICAgICBkZWZhdWx0UHJldmVudGVkID0galF1ZXJ5RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTmF0aXZlKSB7XG4gICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICAgICAgZXZ0LmluaXRFdmVudCh0eXBlRXZlbnQsIGJ1YmJsZXMsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgYnViYmxlcyxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSAvLyBtZXJnZSBjdXN0b20gaW5mb3JtYXRpb24gaW4gb3VyIGV2ZW50XG5cblxuICAgIGlmICh0eXBlb2YgYXJncyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2dCwga2V5LCB7XG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3Nba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG5hdGl2ZURpc3BhdGNoKSB7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG5cbiAgICBpZiAoZXZ0LmRlZmF1bHRQcmV2ZW50ZWQgJiYgdHlwZW9mIGpRdWVyeUV2ZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgalF1ZXJ5RXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZ0O1xuICB9XG5cbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogZG9tL2RhdGEuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY29uc3QgZWxlbWVudE1hcCA9IG5ldyBNYXAoKTtcbnZhciBEYXRhID0ge1xuICBzZXQoZWxlbWVudCwga2V5LCBpbnN0YW5jZSkge1xuICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnQsIG5ldyBNYXAoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KTsgLy8gbWFrZSBpdCBjbGVhciB3ZSBvbmx5IHdhbnQgb25lIGluc3RhbmNlIHBlciBlbGVtZW50XG4gICAgLy8gY2FuIGJlIHJlbW92ZWQgbGF0ZXIgd2hlbiBtdWx0aXBsZSBrZXkvaW5zdGFuY2VzIGFyZSBmaW5lIHRvIGJlIHVzZWRcblxuICAgIGlmICghaW5zdGFuY2VNYXAuaGFzKGtleSkgJiYgaW5zdGFuY2VNYXAuc2l6ZSAhPT0gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEJvb3RzdHJhcCBkb2Vzbid0IGFsbG93IG1vcmUgdGhhbiBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnQuIEJvdW5kIGluc3RhbmNlOiAke0FycmF5LmZyb20oaW5zdGFuY2VNYXAua2V5cygpKVswXX0uYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2VNYXAuc2V0KGtleSwgaW5zdGFuY2UpO1xuICB9LFxuXG4gIGdldChlbGVtZW50LCBrZXkpIHtcbiAgICBpZiAoZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50TWFwLmdldChlbGVtZW50KS5nZXQoa2V5KSB8fCBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIHJlbW92ZShlbGVtZW50LCBrZXkpIHtcbiAgICBpZiAoIWVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KTtcbiAgICBpbnN0YW5jZU1hcC5kZWxldGUoa2V5KTsgLy8gZnJlZSB1cCBlbGVtZW50IHJlZmVyZW5jZXMgaWYgdGhlcmUgYXJlIG5vIGluc3RhbmNlcyBsZWZ0IGZvciBhbiBlbGVtZW50XG5cbiAgICBpZiAoaW5zdGFuY2VNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgZWxlbWVudE1hcC5kZWxldGUoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogYmFzZS1jb21wb25lbnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgVkVSU0lPTiA9ICc1LjAuMic7XG5cbmNsYXNzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgZWxlbWVudCA9IGdldEVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICBEYXRhLnNldCh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgRGF0YS5yZW1vdmUodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4ge1xuICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIF9xdWV1ZUNhbGxiYWNrKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkID0gdHJ1ZSkge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIGVsZW1lbnQsIGlzQW5pbWF0ZWQpO1xuICB9XG4gIC8qKiBTdGF0aWMgKi9cblxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIERhdGEuZ2V0KGVsZW1lbnQsIHRoaXMuREFUQV9LRVkpO1xuICB9XG5cbiAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZShlbGVtZW50KSB8fCBuZXcgdGhpcyhlbGVtZW50LCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGwpO1xuICB9XG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IGhhdmUgdG8gaW1wbGVtZW50IHRoZSBzdGF0aWMgbWV0aG9kIFwiTkFNRVwiLCBmb3IgZWFjaCBjb21wb25lbnQhJyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFfS0VZKCkge1xuICAgIHJldHVybiBgYnMuJHt0aGlzLk5BTUV9YDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRVZFTlRfS0VZKCkge1xuICAgIHJldHVybiBgLiR7dGhpcy5EQVRBX0tFWX1gO1xuICB9XG5cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJGMgPSAnYWxlcnQnO1xuY29uc3QgREFUQV9LRVkkYiA9ICdicy5hbGVydCc7XG5jb25zdCBFVkVOVF9LRVkkYiA9IGAuJHtEQVRBX0tFWSRifWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkOCA9ICcuZGF0YS1hcGknO1xuY29uc3QgU0VMRUNUT1JfRElTTUlTUyA9ICdbZGF0YS1icy1kaXNtaXNzPVwiYWxlcnRcIl0nO1xuY29uc3QgRVZFTlRfQ0xPU0UgPSBgY2xvc2Uke0VWRU5UX0tFWSRifWA7XG5jb25zdCBFVkVOVF9DTE9TRUQgPSBgY2xvc2VkJHtFVkVOVF9LRVkkYn1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNyA9IGBjbGljayR7RVZFTlRfS0VZJGJ9JHtEQVRBX0FQSV9LRVkkOH1gO1xuY29uc3QgQ0xBU1NfTkFNRV9BTEVSVCA9ICdhbGVydCc7XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkNiA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQ5ID0gJ3Nob3cnO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEFsZXJ0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJGM7XG4gIH0gLy8gUHVibGljXG5cblxuICBjbG9zZShlbGVtZW50KSB7XG4gICAgY29uc3Qgcm9vdEVsZW1lbnQgPSBlbGVtZW50ID8gdGhpcy5fZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkgOiB0aGlzLl9lbGVtZW50O1xuXG4gICAgY29uc3QgY3VzdG9tRXZlbnQgPSB0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChyb290RWxlbWVudCk7XG5cbiAgICBpZiAoY3VzdG9tRXZlbnQgPT09IG51bGwgfHwgY3VzdG9tRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbW92ZUVsZW1lbnQocm9vdEVsZW1lbnQpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkgfHwgZWxlbWVudC5jbG9zZXN0KGAuJHtDTEFTU19OQU1FX0FMRVJUfWApO1xuICB9XG5cbiAgX3RyaWdnZXJDbG9zZUV2ZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gRXZlbnRIYW5kbGVyLnRyaWdnZXIoZWxlbWVudCwgRVZFTlRfQ0xPU0UpO1xuICB9XG5cbiAgX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckOSk7XG4gICAgY29uc3QgaXNBbmltYXRlZCA9IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQ2KTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4gdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCksIGVsZW1lbnQsIGlzQW5pbWF0ZWQpO1xuICB9XG5cbiAgX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKGVsZW1lbnQsIEVWRU5UX0NMT1NFRCk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IEFsZXJ0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XG5cbiAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcbiAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGhhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBhbGVydEluc3RhbmNlLmNsb3NlKHRoaXMpO1xuICAgIH07XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNywgU0VMRUNUT1JfRElTTUlTUywgQWxlcnQuaGFuZGxlRGlzbWlzcyhuZXcgQWxlcnQoKSkpO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkFsZXJ0IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKEFsZXJ0KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBidXR0b24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSRiID0gJ2J1dHRvbic7XG5jb25zdCBEQVRBX0tFWSRhID0gJ2JzLmJ1dHRvbic7XG5jb25zdCBFVkVOVF9LRVkkYSA9IGAuJHtEQVRBX0tFWSRhfWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkNyA9ICcuZGF0YS1hcGknO1xuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUkMyA9ICdhY3RpdmUnO1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUkNSA9ICdbZGF0YS1icy10b2dnbGU9XCJidXR0b25cIl0nO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNiA9IGBjbGljayR7RVZFTlRfS0VZJGF9JHtEQVRBX0FQSV9LRVkkN31gO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEJ1dHRvbiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSRiO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgdG9nZ2xlKCkge1xuICAgIC8vIFRvZ2dsZSBjbGFzcyBhbmQgc3luYyB0aGUgYGFyaWEtcHJlc3NlZGAgYXR0cmlidXRlIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgYC50b2dnbGUoKWAgbWV0aG9kXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShDTEFTU19OQU1FX0FDVElWRSQzKSk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IEJ1dHRvbi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuXG4gICAgICBpZiAoY29uZmlnID09PSAndG9nZ2xlJykge1xuICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSQ2LCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ1LCBldmVudCA9PiB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX0RBVEFfVE9HR0xFJDUpO1xuICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UoYnV0dG9uKTtcbiAgZGF0YS50b2dnbGUoKTtcbn0pO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkJ1dHRvbiB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihCdXR0b24pO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGRvbS9tYW5pcHVsYXRvci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhKHZhbCkge1xuICBpZiAodmFsID09PSAndHJ1ZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh2YWwgPT09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodmFsID09PSBOdW1iZXIodmFsKS50b1N0cmluZygpKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWwpO1xuICB9XG5cbiAgaWYgKHZhbCA9PT0gJycgfHwgdmFsID09PSAnbnVsbCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURhdGFLZXkoa2V5KSB7XG4gIHJldHVybiBrZXkucmVwbGFjZSgvW0EtWl0vZywgY2hyID0+IGAtJHtjaHIudG9Mb3dlckNhc2UoKX1gKTtcbn1cblxuY29uc3QgTWFuaXB1bGF0b3IgPSB7XG4gIHNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWAsIHZhbHVlKTtcbiAgfSxcblxuICByZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWApO1xuICB9LFxuXG4gIGdldERhdGFBdHRyaWJ1dGVzKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgT2JqZWN0LmtleXMoZWxlbWVudC5kYXRhc2V0KS5maWx0ZXIoa2V5ID0+IGtleS5zdGFydHNXaXRoKCdicycpKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBsZXQgcHVyZUtleSA9IGtleS5yZXBsYWNlKC9eYnMvLCAnJyk7XG4gICAgICBwdXJlS2V5ID0gcHVyZUtleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHB1cmVLZXkuc2xpY2UoMSwgcHVyZUtleS5sZW5ndGgpO1xuICAgICAgYXR0cmlidXRlc1twdXJlS2V5XSA9IG5vcm1hbGl6ZURhdGEoZWxlbWVudC5kYXRhc2V0W2tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICB9LFxuXG4gIGdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5KSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZURhdGEoZWxlbWVudC5nZXRBdHRyaWJ1dGUoYGRhdGEtYnMtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YCkpO1xuICB9LFxuXG4gIG9mZnNldChlbGVtZW50KSB7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdFxuICAgIH07XG4gIH0sXG5cbiAgcG9zaXRpb24oZWxlbWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgICAgbGVmdDogZWxlbWVudC5vZmZzZXRMZWZ0XG4gICAgfTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGNhcm91c2VsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkYSA9ICdjYXJvdXNlbCc7XG5jb25zdCBEQVRBX0tFWSQ5ID0gJ2JzLmNhcm91c2VsJztcbmNvbnN0IEVWRU5UX0tFWSQ5ID0gYC4ke0RBVEFfS0VZJDl9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ2ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBBUlJPV19MRUZUX0tFWSA9ICdBcnJvd0xlZnQnO1xuY29uc3QgQVJST1dfUklHSFRfS0VZID0gJ0Fycm93UmlnaHQnO1xuY29uc3QgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbmNvbnN0IFNXSVBFX1RIUkVTSE9MRCA9IDQwO1xuY29uc3QgRGVmYXVsdCQ5ID0ge1xuICBpbnRlcnZhbDogNTAwMCxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHNsaWRlOiBmYWxzZSxcbiAgcGF1c2U6ICdob3ZlcicsXG4gIHdyYXA6IHRydWUsXG4gIHRvdWNoOiB0cnVlXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkOSA9IHtcbiAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgd3JhcDogJ2Jvb2xlYW4nLFxuICB0b3VjaDogJ2Jvb2xlYW4nXG59O1xuY29uc3QgT1JERVJfTkVYVCA9ICduZXh0JztcbmNvbnN0IE9SREVSX1BSRVYgPSAncHJldic7XG5jb25zdCBESVJFQ1RJT05fTEVGVCA9ICdsZWZ0JztcbmNvbnN0IERJUkVDVElPTl9SSUdIVCA9ICdyaWdodCc7XG5jb25zdCBLRVlfVE9fRElSRUNUSU9OID0ge1xuICBbQVJST1dfTEVGVF9LRVldOiBESVJFQ1RJT05fUklHSFQsXG4gIFtBUlJPV19SSUdIVF9LRVldOiBESVJFQ1RJT05fTEVGVFxufTtcbmNvbnN0IEVWRU5UX1NMSURFID0gYHNsaWRlJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfU0xJRCA9IGBzbGlkJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfS0VZRE9XTiA9IGBrZXlkb3duJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfTU9VU0VFTlRFUiA9IGBtb3VzZWVudGVyJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfTU9VU0VMRUFWRSA9IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfVE9VQ0hTVEFSVCA9IGB0b3VjaHN0YXJ0JHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfVE9VQ0hNT1ZFID0gYHRvdWNobW92ZSR7RVZFTlRfS0VZJDl9YDtcbmNvbnN0IEVWRU5UX1RPVUNIRU5EID0gYHRvdWNoZW5kJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfUE9JTlRFUkRPV04gPSBgcG9pbnRlcmRvd24ke0VWRU5UX0tFWSQ5fWA7XG5jb25zdCBFVkVOVF9QT0lOVEVSVVAgPSBgcG9pbnRlcnVwJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfRFJBR19TVEFSVCA9IGBkcmFnc3RhcnQke0VWRU5UX0tFWSQ5fWA7XG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJJDIgPSBgbG9hZCR7RVZFTlRfS0VZJDl9JHtEQVRBX0FQSV9LRVkkNn1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNSA9IGBjbGljayR7RVZFTlRfS0VZJDl9JHtEQVRBX0FQSV9LRVkkNn1gO1xuY29uc3QgQ0xBU1NfTkFNRV9DQVJPVVNFTCA9ICdjYXJvdXNlbCc7XG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSQyID0gJ2FjdGl2ZSc7XG5jb25zdCBDTEFTU19OQU1FX1NMSURFID0gJ3NsaWRlJztcbmNvbnN0IENMQVNTX05BTUVfRU5EID0gJ2Nhcm91c2VsLWl0ZW0tZW5kJztcbmNvbnN0IENMQVNTX05BTUVfU1RBUlQgPSAnY2Fyb3VzZWwtaXRlbS1zdGFydCc7XG5jb25zdCBDTEFTU19OQU1FX05FWFQgPSAnY2Fyb3VzZWwtaXRlbS1uZXh0JztcbmNvbnN0IENMQVNTX05BTUVfUFJFViA9ICdjYXJvdXNlbC1pdGVtLXByZXYnO1xuY29uc3QgQ0xBU1NfTkFNRV9QT0lOVEVSX0VWRU5UID0gJ3BvaW50ZXItZXZlbnQnO1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFJDEgPSAnLmFjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkVfSVRFTSA9ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nO1xuY29uc3QgU0VMRUNUT1JfSVRFTSA9ICcuY2Fyb3VzZWwtaXRlbSc7XG5jb25zdCBTRUxFQ1RPUl9JVEVNX0lNRyA9ICcuY2Fyb3VzZWwtaXRlbSBpbWcnO1xuY29uc3QgU0VMRUNUT1JfTkVYVF9QUkVWID0gJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnO1xuY29uc3QgU0VMRUNUT1JfSU5ESUNBVE9SUyA9ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycyc7XG5jb25zdCBTRUxFQ1RPUl9JTkRJQ0FUT1IgPSAnW2RhdGEtYnMtdGFyZ2V0XSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NMSURFID0gJ1tkYXRhLWJzLXNsaWRlXSwgW2RhdGEtYnMtc2xpZGUtdG9dJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfUklERSA9ICdbZGF0YS1icy1yaWRlPVwiY2Fyb3VzZWxcIl0nO1xuY29uc3QgUE9JTlRFUl9UWVBFX1RPVUNIID0gJ3RvdWNoJztcbmNvbnN0IFBPSU5URVJfVFlQRV9QRU4gPSAncGVuJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBDYXJvdXNlbCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgdGhpcy50b3VjaFRpbWVvdXQgPSBudWxsO1xuICAgIHRoaXMudG91Y2hTdGFydFggPSAwO1xuICAgIHRoaXMudG91Y2hEZWx0YVggPSAwO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9JTkRJQ0FUT1JTLCB0aGlzLl9lbGVtZW50KTtcbiAgICB0aGlzLl90b3VjaFN1cHBvcnRlZCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuICAgIHRoaXMuX3BvaW50ZXJFdmVudCA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCk7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQ5O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJGE7XG4gIH0gLy8gUHVibGljXG5cblxuICBuZXh0KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX05FWFQpO1xuICB9XG5cbiAgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgaXNWaXNpYmxlKHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX1BSRVYpO1xuICB9XG5cbiAgcGF1c2UoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfTkVYVF9QUkVWLCB0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCk7XG4gICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgIH1cblxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgfVxuXG4gIGN5Y2xlKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcgJiYgdGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fdXBkYXRlSW50ZXJ2YWwoKTtcblxuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgdG8oaW5kZXgpIHtcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCk7XG5cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCAoKSA9PiB0aGlzLnRvKGluZGV4KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9yZGVyID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWO1xuXG4gICAgdGhpcy5fc2xpZGUob3JkZXIsIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkOSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSRhLCBjb25maWcsIERlZmF1bHRUeXBlJDkpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfaGFuZGxlU3dpcGUoKSB7XG4gICAgY29uc3QgYWJzRGVsdGF4ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7XG5cbiAgICBpZiAoYWJzRGVsdGF4IDw9IFNXSVBFX1RIUkVTSE9MRCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGFic0RlbHRheCAvIHRoaXMudG91Y2hEZWx0YVg7XG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiA+IDAgPyBESVJFQ1RJT05fUklHSFQgOiBESVJFQ1RJT05fTEVGVCk7XG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV04sIGV2ZW50ID0+IHRoaXMuX2tleWRvd24oZXZlbnQpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VFTlRFUiwgZXZlbnQgPT4gdGhpcy5wYXVzZShldmVudCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFTEVBVkUsIGV2ZW50ID0+IHRoaXMuY3ljbGUoZXZlbnQpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvdWNoICYmIHRoaXMuX3RvdWNoU3VwcG9ydGVkKSB7XG4gICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBldmVudCA9PiB7XG4gICAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50ICYmIChldmVudC5wb2ludGVyVHlwZSA9PT0gUE9JTlRFUl9UWVBFX1BFTiB8fCBldmVudC5wb2ludGVyVHlwZSA9PT0gUE9JTlRFUl9UWVBFX1RPVUNIKSkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3BvaW50ZXJFdmVudCkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBtb3ZlID0gZXZlbnQgPT4ge1xuICAgICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxID8gMCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydFg7XG4gICAgfTtcblxuICAgIGNvbnN0IGVuZCA9IGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQgJiYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpKSB7XG4gICAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGFuZGxlU3dpcGUoKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAvLyBJZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXG4gICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxuICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChldmVudCA9PiB0aGlzLmN5Y2xlKGV2ZW50KSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSVRFTV9JTUcsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goaXRlbUltZyA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIub24oaXRlbUltZywgRVZFTlRfRFJBR19TVEFSVCwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX3BvaW50ZXJFdmVudCkge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJET1dOLCBldmVudCA9PiBzdGFydChldmVudCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJVUCwgZXZlbnQgPT4gZW5kKGV2ZW50KSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hTVEFSVCwgZXZlbnQgPT4gc3RhcnQoZXZlbnQpKTtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSE1PVkUsIGV2ZW50ID0+IG1vdmUoZXZlbnQpKTtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSEVORCwgZXZlbnQgPT4gZW5kKGV2ZW50KSk7XG4gICAgfVxuICB9XG5cbiAgX2tleWRvd24oZXZlbnQpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBLRVlfVE9fRElSRUNUSU9OW2V2ZW50LmtleV07XG5cbiAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUgPyBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lURU0sIGVsZW1lbnQucGFyZW50Tm9kZSkgOiBbXTtcbiAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcbiAgfVxuXG4gIF9nZXRJdGVtQnlPcmRlcihvcmRlciwgYWN0aXZlRWxlbWVudCkge1xuICAgIGNvbnN0IGlzTmV4dCA9IG9yZGVyID09PSBPUkRFUl9ORVhUO1xuICAgIHJldHVybiBnZXROZXh0QWN0aXZlRWxlbWVudCh0aGlzLl9pdGVtcywgYWN0aXZlRWxlbWVudCwgaXNOZXh0LCB0aGlzLl9jb25maWcud3JhcCk7XG4gIH1cblxuICBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG5cbiAgICBjb25zdCBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCkpO1xuXG4gICAgcmV0dXJuIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSURFLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICBmcm9tOiBmcm9tSW5kZXgsXG4gICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUluZGljYXRvciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFJDEsIHRoaXMuX2luZGljYXRvcnNFbGVtZW50KTtcbiAgICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgYWN0aXZlSW5kaWNhdG9yLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gICAgICBjb25zdCBpbmRpY2F0b3JzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JTkRJQ0FUT1IsIHRoaXMuX2luZGljYXRvcnNFbGVtZW50KTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoaW5kaWNhdG9yc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKSwgMTApID09PSB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCkpIHtcbiAgICAgICAgICBpbmRpY2F0b3JzW2ldLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICAgICAgaW5kaWNhdG9yc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2FjdGl2ZUVsZW1lbnQgfHwgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCk7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50SW50ZXJ2YWwgPSBOdW1iZXIucGFyc2VJbnQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtaW50ZXJ2YWwnKSwgMTApO1xuXG4gICAgaWYgKGVsZW1lbnRJbnRlcnZhbCkge1xuICAgICAgdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gZWxlbWVudEludGVydmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbDtcbiAgICB9XG4gIH1cblxuICBfc2xpZGUoZGlyZWN0aW9uT3JPcmRlciwgZWxlbWVudCkge1xuICAgIGNvbnN0IG9yZGVyID0gdGhpcy5fZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb25Pck9yZGVyKTtcblxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KTtcblxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCB0aGlzLl9nZXRJdGVtQnlPcmRlcihvcmRlciwgYWN0aXZlRWxlbWVudCk7XG5cbiAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTtcblxuICAgIGNvbnN0IGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuICAgIGNvbnN0IGlzTmV4dCA9IG9yZGVyID09PSBPUkRFUl9ORVhUO1xuICAgIGNvbnN0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9TVEFSVCA6IENMQVNTX05BTUVfRU5EO1xuICAgIGNvbnN0IG9yZGVyQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9ORVhUIDogQ0xBU1NfTkFNRV9QUkVWO1xuXG4gICAgY29uc3QgZXZlbnREaXJlY3Rpb25OYW1lID0gdGhpcy5fb3JkZXJUb0RpcmVjdGlvbihvcmRlcik7XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgJiYgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQUNUSVZFJDIpKSB7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2xpZGVFdmVudCA9IHRoaXMuX3RyaWdnZXJTbGlkZUV2ZW50KG5leHRFbGVtZW50LCBldmVudERpcmVjdGlvbk5hbWUpO1xuXG4gICAgaWYgKHNsaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgIC8vIFNvbWUgd2VpcmRuZXNzIGlzIGhhcHBlbmluZywgc28gd2UgYmFpbFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWU7XG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG5cbiAgICBjb25zdCB0cmlnZ2VyU2xpZEV2ZW50ID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TTElERSkpIHtcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQob3JkZXJDbGFzc05hbWUpO1xuICAgICAgcmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShkaXJlY3Rpb25hbENsYXNzTmFtZSwgb3JkZXJDbGFzc05hbWUpO1xuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMiwgb3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHNldFRpbWVvdXQodHJpZ2dlclNsaWRFdmVudCwgMCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbEJhY2ssIGFjdGl2ZUVsZW1lbnQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICB0cmlnZ2VyU2xpZEV2ZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgdGhpcy5jeWNsZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9kaXJlY3Rpb25Ub09yZGVyKGRpcmVjdGlvbikge1xuICAgIGlmICghW0RJUkVDVElPTl9SSUdIVCwgRElSRUNUSU9OX0xFRlRdLmluY2x1ZGVzKGRpcmVjdGlvbikpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfUFJFViA6IE9SREVSX05FWFQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX0xFRlQgPyBPUkRFUl9ORVhUIDogT1JERVJfUFJFVjtcbiAgfVxuXG4gIF9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKSB7XG4gICAgaWYgKCFbT1JERVJfTkVYVCwgT1JERVJfUFJFVl0uaW5jbHVkZXMob3JkZXIpKSB7XG4gICAgICByZXR1cm4gb3JkZXI7XG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgIH1cblxuICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9SSUdIVCA6IERJUkVDVElPTl9MRUZUO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGNhcm91c2VsSW50ZXJmYWNlKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIGNvbnN0IGRhdGEgPSBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgbGV0IHtcbiAgICAgIF9jb25maWdcbiAgICB9ID0gZGF0YTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgX2NvbmZpZyA9IHsgLi4uX2NvbmZpZyxcbiAgICAgICAgLi4uY29uZmlnXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgZGF0YS50byhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2FjdGlvbn1cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlKSB7XG4gICAgICBkYXRhLnBhdXNlKCk7XG4gICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIENhcm91c2VsLmNhcm91c2VsSW50ZXJmYWNlKHRoaXMsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyk7XG5cbiAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0NBUk9VU0VMKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHsgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGFyZ2V0KSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMpXG4gICAgfTtcbiAgICBjb25zdCBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKTtcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBDYXJvdXNlbC5jYXJvdXNlbEludGVyZmFjZSh0YXJnZXQsIGNvbmZpZyk7XG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UodGFyZ2V0KS50byhzbGlkZUluZGV4KTtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDUsIFNFTEVDVE9SX0RBVEFfU0xJREUsIENhcm91c2VsLmRhdGFBcGlDbGlja0hhbmRsZXIpO1xuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSQyLCAoKSA9PiB7XG4gIGNvbnN0IGNhcm91c2VscyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9SSURFKTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgQ2Fyb3VzZWwuY2Fyb3VzZWxJbnRlcmZhY2UoY2Fyb3VzZWxzW2ldLCBDYXJvdXNlbC5nZXRJbnN0YW5jZShjYXJvdXNlbHNbaV0pKTtcbiAgfVxufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQ2Fyb3VzZWwgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQ2Fyb3VzZWwpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkOSA9ICdjb2xsYXBzZSc7XG5jb25zdCBEQVRBX0tFWSQ4ID0gJ2JzLmNvbGxhcHNlJztcbmNvbnN0IEVWRU5UX0tFWSQ4ID0gYC4ke0RBVEFfS0VZJDh9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ1ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBEZWZhdWx0JDggPSB7XG4gIHRvZ2dsZTogdHJ1ZSxcbiAgcGFyZW50OiAnJ1xufTtcbmNvbnN0IERlZmF1bHRUeXBlJDggPSB7XG4gIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufTtcbmNvbnN0IEVWRU5UX1NIT1ckNSA9IGBzaG93JHtFVkVOVF9LRVkkOH1gO1xuY29uc3QgRVZFTlRfU0hPV04kNSA9IGBzaG93biR7RVZFTlRfS0VZJDh9YDtcbmNvbnN0IEVWRU5UX0hJREUkNSA9IGBoaWRlJHtFVkVOVF9LRVkkOH1gO1xuY29uc3QgRVZFTlRfSElEREVOJDUgPSBgaGlkZGVuJHtFVkVOVF9LRVkkOH1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCA9IGBjbGljayR7RVZFTlRfS0VZJDh9JHtEQVRBX0FQSV9LRVkkNX1gO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDggPSAnc2hvdyc7XG5jb25zdCBDTEFTU19OQU1FX0NPTExBUFNFID0gJ2NvbGxhcHNlJztcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0lORyA9ICdjb2xsYXBzaW5nJztcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0VEID0gJ2NvbGxhcHNlZCc7XG5jb25zdCBXSURUSCA9ICd3aWR0aCc7XG5jb25zdCBIRUlHSFQgPSAnaGVpZ2h0JztcbmNvbnN0IFNFTEVDVE9SX0FDVElWRVMgPSAnLnNob3csIC5jb2xsYXBzaW5nJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFJDQgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIENvbGxhcHNlIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFNlbGVjdG9yRW5naW5lLmZpbmQoYCR7U0VMRUNUT1JfREFUQV9UT0dHTEUkNH1baHJlZj1cIiMke3RoaXMuX2VsZW1lbnQuaWR9XCJdLGAgKyBgJHtTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0fVtkYXRhLWJzLXRhcmdldD1cIiMke3RoaXMuX2VsZW1lbnQuaWR9XCJdYCk7XG4gICAgY29uc3QgdG9nZ2xlTGlzdCA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUkNCk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgZWxlbSA9IHRvZ2dsZUxpc3RbaV07XG4gICAgICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbSk7XG4gICAgICBjb25zdCBmaWx0ZXJFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvcikuZmlsdGVyKGZvdW5kRWxlbSA9PiBmb3VuZEVsZW0gPT09IHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXG4gICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fdHJpZ2dlckFycmF5KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICB9XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDg7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkOTtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDgpKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ4KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhY3RpdmVzO1xuICAgIGxldCBhY3RpdmVzRGF0YTtcblxuICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgIGFjdGl2ZXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRVMsIHRoaXMuX3BhcmVudCkuZmlsdGVyKGVsZW0gPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXBhcmVudCcpID09PSB0aGlzLl9jb25maWcucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChhY3RpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBhY3RpdmVzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHRoaXMuX3NlbGVjdG9yKTtcblxuICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICBjb25zdCB0ZW1wQWN0aXZlRGF0YSA9IGFjdGl2ZXMuZmluZChlbGVtID0+IGNvbnRhaW5lciAhPT0gZWxlbSk7XG4gICAgICBhY3RpdmVzRGF0YSA9IHRlbXBBY3RpdmVEYXRhID8gQ29sbGFwc2UuZ2V0SW5zdGFuY2UodGVtcEFjdGl2ZURhdGEpIDogbnVsbDtcblxuICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDUpO1xuXG4gICAgaWYgKHN0YXJ0RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICBhY3RpdmVzLmZvckVhY2goZWxlbUFjdGl2ZSA9PiB7XG4gICAgICAgIGlmIChjb250YWluZXIgIT09IGVsZW1BY3RpdmUpIHtcbiAgICAgICAgICBDb2xsYXBzZS5jb2xsYXBzZUludGVyZmFjZShlbGVtQWN0aXZlLCAnaGlkZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAgIERhdGEuc2V0KGVsZW1BY3RpdmUsIERBVEFfS0VZJDgsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcblxuICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0VEKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1ckOCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOJDUpO1xuICAgIH07XG5cbiAgICBjb25zdCBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICAgIGNvbnN0IHNjcm9sbFNpemUgPSBgc2Nyb2xsJHtjYXBpdGFsaXplZERpbWVuc2lvbn1gO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YDtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUkNSk7XG5cbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl19cHhgO1xuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0UsIENMQVNTX05BTUVfU0hPVyQ4KTtcblxuICAgIGNvbnN0IHRyaWdnZXJBcnJheUxlbmd0aCA9IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7XG5cbiAgICBpZiAodHJpZ2dlckFycmF5TGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldO1xuICAgICAgICBjb25zdCBlbGVtID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0cmlnZ2VyKTtcblxuICAgICAgICBpZiAoZWxlbSAmJiAhZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDgpKSB7XG4gICAgICAgICAgdHJpZ2dlci5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0VEKTtcbiAgICAgICAgICB0cmlnZ2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOJDUpO1xuICAgIH07XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRydWUpO1xuICB9XG5cbiAgc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkOCxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH07XG4gICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG5cbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ5LCBjb25maWcsIERlZmF1bHRUeXBlJDgpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfZ2V0RGltZW5zaW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhXSURUSCkgPyBXSURUSCA6IEhFSUdIVDtcbiAgfVxuXG4gIF9nZXRQYXJlbnQoKSB7XG4gICAgbGV0IHtcbiAgICAgIHBhcmVudFxuICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgcGFyZW50ID0gZ2V0RWxlbWVudChwYXJlbnQpO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCR7U0VMRUNUT1JfREFUQV9UT0dHTEUkNH1bZGF0YS1icy1wYXJlbnQ9XCIke3BhcmVudH1cIl1gO1xuICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHBhcmVudCkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KTtcblxuICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHNlbGVjdGVkLCBbZWxlbWVudF0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuICAgIGlmICghZWxlbWVudCB8fCAhdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzT3BlbiA9IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ4KTtcbiAgICB0cmlnZ2VyQXJyYXkuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0VEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFRCk7XG4gICAgICB9XG5cbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICB9KTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBjb2xsYXBzZUludGVyZmFjZShlbGVtZW50LCBjb25maWcpIHtcbiAgICBsZXQgZGF0YSA9IENvbGxhcHNlLmdldEluc3RhbmNlKGVsZW1lbnQpO1xuICAgIGNvbnN0IF9jb25maWcgPSB7IC4uLkRlZmF1bHQkOCxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKGVsZW1lbnQpLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KVxuICAgIH07XG5cbiAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZGF0YSkge1xuICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZShlbGVtZW50LCBfY29uZmlnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgQ29sbGFwc2UuY29sbGFwc2VJbnRlcmZhY2UodGhpcywgY29uZmlnKTtcbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSQ0LCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0LCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgPT09ICdBJyB8fCBldmVudC5kZWxlZ2F0ZVRhcmdldCAmJiBldmVudC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgY29uc3QgdHJpZ2dlckRhdGEgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzKTtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuICBjb25zdCBzZWxlY3RvckVsZW1lbnRzID0gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3Rvcik7XG4gIHNlbGVjdG9yRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBjb25zdCBkYXRhID0gQ29sbGFwc2UuZ2V0SW5zdGFuY2UoZWxlbWVudCk7XG4gICAgbGV0IGNvbmZpZztcblxuICAgIGlmIChkYXRhKSB7XG4gICAgICAvLyB1cGRhdGUgcGFyZW50IGF0dHJpYnV0ZVxuICAgICAgaWYgKGRhdGEuX3BhcmVudCA9PT0gbnVsbCAmJiB0eXBlb2YgdHJpZ2dlckRhdGEucGFyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhLl9jb25maWcucGFyZW50ID0gdHJpZ2dlckRhdGEucGFyZW50O1xuICAgICAgICBkYXRhLl9wYXJlbnQgPSBkYXRhLl9nZXRQYXJlbnQoKTtcbiAgICAgIH1cblxuICAgICAgY29uZmlnID0gJ3RvZ2dsZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IHRyaWdnZXJEYXRhO1xuICAgIH1cblxuICAgIENvbGxhcHNlLmNvbGxhcHNlSW50ZXJmYWNlKGVsZW1lbnQsIGNvbmZpZyk7XG4gIH0pO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQ29sbGFwc2UgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQ29sbGFwc2UpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGRyb3Bkb3duLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkOCA9ICdkcm9wZG93bic7XG5jb25zdCBEQVRBX0tFWSQ3ID0gJ2JzLmRyb3Bkb3duJztcbmNvbnN0IEVWRU5UX0tFWSQ3ID0gYC4ke0RBVEFfS0VZJDd9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ0ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBFU0NBUEVfS0VZJDIgPSAnRXNjYXBlJztcbmNvbnN0IFNQQUNFX0tFWSA9ICdTcGFjZSc7XG5jb25zdCBUQUJfS0VZID0gJ1RhYic7XG5jb25zdCBBUlJPV19VUF9LRVkgPSAnQXJyb3dVcCc7XG5jb25zdCBBUlJPV19ET1dOX0tFWSA9ICdBcnJvd0Rvd24nO1xuY29uc3QgUklHSFRfTU9VU0VfQlVUVE9OID0gMjsgLy8gTW91c2VFdmVudC5idXR0b24gdmFsdWUgZm9yIHRoZSBzZWNvbmRhcnkgYnV0dG9uLCB1c3VhbGx5IHRoZSByaWdodCBidXR0b25cblxuY29uc3QgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKGAke0FSUk9XX1VQX0tFWX18JHtBUlJPV19ET1dOX0tFWX18JHtFU0NBUEVfS0VZJDJ9YCk7XG5jb25zdCBFVkVOVF9ISURFJDQgPSBgaGlkZSR7RVZFTlRfS0VZJDd9YDtcbmNvbnN0IEVWRU5UX0hJRERFTiQ0ID0gYGhpZGRlbiR7RVZFTlRfS0VZJDd9YDtcbmNvbnN0IEVWRU5UX1NIT1ckNCA9IGBzaG93JHtFVkVOVF9LRVkkN31gO1xuY29uc3QgRVZFTlRfU0hPV04kNCA9IGBzaG93biR7RVZFTlRfS0VZJDd9YDtcbmNvbnN0IEVWRU5UX0NMSUNLID0gYGNsaWNrJHtFVkVOVF9LRVkkN31gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMyA9IGBjbGljayR7RVZFTlRfS0VZJDd9JHtEQVRBX0FQSV9LRVkkNH1gO1xuY29uc3QgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSA9IGBrZXlkb3duJHtFVkVOVF9LRVkkN30ke0RBVEFfQVBJX0tFWSQ0fWA7XG5jb25zdCBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IGBrZXl1cCR7RVZFTlRfS0VZJDd9JHtEQVRBX0FQSV9LRVkkNH1gO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDcgPSAnc2hvdyc7XG5jb25zdCBDTEFTU19OQU1FX0RST1BVUCA9ICdkcm9wdXAnO1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRU5EID0gJ2Ryb3BlbmQnO1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QU1RBUlQgPSAnZHJvcHN0YXJ0JztcbmNvbnN0IENMQVNTX05BTUVfTkFWQkFSID0gJ25hdmJhcic7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCJdJztcbmNvbnN0IFNFTEVDVE9SX01FTlUgPSAnLmRyb3Bkb3duLW1lbnUnO1xuY29uc3QgU0VMRUNUT1JfTkFWQkFSX05BViA9ICcubmF2YmFyLW5hdic7XG5jb25zdCBTRUxFQ1RPUl9WSVNJQkxFX0lURU1TID0gJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpJztcbmNvbnN0IFBMQUNFTUVOVF9UT1AgPSBpc1JUTCgpID8gJ3RvcC1lbmQnIDogJ3RvcC1zdGFydCc7XG5jb25zdCBQTEFDRU1FTlRfVE9QRU5EID0gaXNSVEwoKSA/ICd0b3Atc3RhcnQnIDogJ3RvcC1lbmQnO1xuY29uc3QgUExBQ0VNRU5UX0JPVFRPTSA9IGlzUlRMKCkgPyAnYm90dG9tLWVuZCcgOiAnYm90dG9tLXN0YXJ0JztcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT01FTkQgPSBpc1JUTCgpID8gJ2JvdHRvbS1zdGFydCcgOiAnYm90dG9tLWVuZCc7XG5jb25zdCBQTEFDRU1FTlRfUklHSFQgPSBpc1JUTCgpID8gJ2xlZnQtc3RhcnQnIDogJ3JpZ2h0LXN0YXJ0JztcbmNvbnN0IFBMQUNFTUVOVF9MRUZUID0gaXNSVEwoKSA/ICdyaWdodC1zdGFydCcgOiAnbGVmdC1zdGFydCc7XG5jb25zdCBEZWZhdWx0JDcgPSB7XG4gIG9mZnNldDogWzAsIDJdLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIHJlZmVyZW5jZTogJ3RvZ2dsZScsXG4gIGRpc3BsYXk6ICdkeW5hbWljJyxcbiAgcG9wcGVyQ29uZmlnOiBudWxsLFxuICBhdXRvQ2xvc2U6IHRydWVcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ3ID0ge1xuICBvZmZzZXQ6ICcoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKScsXG4gIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudHxvYmplY3QpJyxcbiAgZGlzcGxheTogJ3N0cmluZycsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknLFxuICBhdXRvQ2xvc2U6ICcoYm9vbGVhbnxzdHJpbmcpJ1xufTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBEcm9wZG93biBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQ3O1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGUkNztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSQ4O1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2hvdygpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAoaXNEaXNhYmxlZCh0aGlzLl9lbGVtZW50KSB8fCB0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckNykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH07XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQ0LCByZWxhdGVkVGFyZ2V0KTtcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVG90YWxseSBkaXNhYmxlIFBvcHBlciBmb3IgRHJvcGRvd25zIGluIE5hdmJhclxuXG5cbiAgICBpZiAodGhpcy5faW5OYXZiYXIpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicsICdub25lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAncGFyZW50Jykge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xuICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IGdldEVsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcG9wcGVyQ29uZmlnID0gdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCk7XG5cbiAgICAgIGNvbnN0IGlzRGlzcGxheVN0YXRpYyA9IHBvcHBlckNvbmZpZy5tb2RpZmllcnMuZmluZChtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZXMnICYmIG1vZGlmaWVyLmVuYWJsZWQgPT09IGZhbHNlKTtcbiAgICAgIHRoaXMuX3BvcHBlciA9IFBvcHBlci5jcmVhdGVQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgcG9wcGVyQ29uZmlnKTtcblxuICAgICAgaWYgKGlzRGlzcGxheVN0YXRpYykge1xuICAgICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICdwb3BwZXInLCAnc3RhdGljJyk7XG4gICAgICB9XG4gICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG5cbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICFwYXJlbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVJfTkFWKSkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbSA9PiBFdmVudEhhbmRsZXIub24oZWxlbSwgJ21vdXNlb3ZlcicsIG5vb3ApKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgdGhpcy5fbWVudS5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfU0hPVyQ3KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiQ0LCByZWxhdGVkVGFyZ2V0KTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgIXRoaXMuX21lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ3KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfTtcblxuICAgIHRoaXMuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKTtcbiAgICB9XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDSywgZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfSk7XG4gIH1cblxuICBfY29tcGxldGVIaWRlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFJDQsIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cblxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGVsZW0gPT4gRXZlbnRIYW5kbGVyLm9mZihlbGVtLCAnbW91c2VvdmVyJywgbm9vcCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbWVudS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ3KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJyk7XG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOJDQsIHJlbGF0ZWRUYXJnZXQpO1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uY29uZmlnXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ4LCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25maWcucmVmZXJlbmNlID09PSAnb2JqZWN0JyAmJiAhaXNFbGVtZW50KGNvbmZpZy5yZWZlcmVuY2UpICYmIHR5cGVvZiBjb25maWcucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gUG9wcGVyIHZpcnR1YWwgZWxlbWVudHMgcmVxdWlyZSBhIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBtZXRob2RcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7TkFNRSQ4LnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmApO1xuICAgIH1cblxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIFNlbGVjdG9yRW5naW5lLm5leHQodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF07XG4gIH1cblxuICBfZ2V0UGxhY2VtZW50KCkge1xuICAgIGNvbnN0IHBhcmVudERyb3Bkb3duID0gdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BFTkQpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX1JJR0hUO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QU1RBUlQpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX0xFRlQ7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHRyaW0gdGhlIHZhbHVlIGJlY2F1c2UgY3VzdG9tIHByb3BlcnRpZXMgY2FuIGFsc28gaW5jbHVkZSBzcGFjZXNcblxuXG4gICAgY29uc3QgaXNFbmQgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lbnUpLmdldFByb3BlcnR5VmFsdWUoJy0tYnMtcG9zaXRpb24nKS50cmltKCkgPT09ICdlbmQnO1xuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BVUCkpIHtcbiAgICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9UT1BFTkQgOiBQTEFDRU1FTlRfVE9QO1xuICAgIH1cblxuICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9CT1RUT01FTkQgOiBQTEFDRU1FTlRfQk9UVE9NO1xuICB9XG5cbiAgX2RldGVjdE5hdmJhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbG9zZXN0KGAuJHtDTEFTU19OQU1FX05BVkJBUn1gKSAhPT0gbnVsbDtcbiAgfVxuXG4gIF9nZXRPZmZzZXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgb2Zmc2V0XG4gICAgfSA9IHRoaXMuX2NvbmZpZztcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcCh2YWwgPT4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTApKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHBvcHBlckRhdGEgPT4gb2Zmc2V0KHBvcHBlckRhdGEsIHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgIGNvbnN0IGRlZmF1bHRCc1BvcHBlckNvbmZpZyA9IHtcbiAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICBtb2RpZmllcnM6IFt7XG4gICAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH07IC8vIERpc2FibGUgUG9wcGVyIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xuICAgICAgZGVmYXVsdEJzUG9wcGVyQ29uZmlnLm1vZGlmaWVycyA9IFt7XG4gICAgICAgIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XTtcbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5kZWZhdWx0QnNQb3BwZXJDb25maWcsXG4gICAgICAuLi4odHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPT09ICdmdW5jdGlvbicgPyB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKGRlZmF1bHRCc1BvcHBlckNvbmZpZykgOiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKVxuICAgIH07XG4gIH1cblxuICBfc2VsZWN0TWVudUl0ZW0oe1xuICAgIGtleSxcbiAgICB0YXJnZXRcbiAgfSkge1xuICAgIGNvbnN0IGl0ZW1zID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9WSVNJQkxFX0lURU1TLCB0aGlzLl9tZW51KS5maWx0ZXIoaXNWaXNpYmxlKTtcblxuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpZiB0YXJnZXQgaXNuJ3QgaW5jbHVkZWQgaW4gaXRlbXMgKGUuZy4gd2hlbiBleHBhbmRpbmcgdGhlIGRyb3Bkb3duKVxuICAgIC8vIGFsbG93IGN5Y2xpbmcgdG8gZ2V0IHRoZSBsYXN0IGl0ZW0gaW4gY2FzZSBrZXkgZXF1YWxzIEFSUk9XX1VQX0tFWVxuXG5cbiAgICBnZXROZXh0QWN0aXZlRWxlbWVudChpdGVtcywgdGFyZ2V0LCBrZXkgPT09IEFSUk9XX0RPV05fS0VZLCAhaXRlbXMuaW5jbHVkZXModGFyZ2V0KSkuZm9jdXMoKTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBkcm9wZG93bkludGVyZmFjZShlbGVtZW50LCBjb25maWcpIHtcbiAgICBjb25zdCBkYXRhID0gRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCBjb25maWcpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIERyb3Bkb3duLmRyb3Bkb3duSW50ZXJmYWNlKHRoaXMsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgY2xlYXJNZW51cyhldmVudCkge1xuICAgIGlmIChldmVudCAmJiAoZXZlbnQuYnV0dG9uID09PSBSSUdIVF9NT1VTRV9CVVRUT04gfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgIT09IFRBQl9LRVkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUkMyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZXNbaV0pO1xuXG4gICAgICBpZiAoIWNvbnRleHQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udGV4dC5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDcpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBjb250ZXh0Ll9lbGVtZW50XG4gICAgICB9O1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgY29tcG9zZWRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgIGNvbnN0IGlzTWVudVRhcmdldCA9IGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9tZW51KTtcblxuICAgICAgICBpZiAoY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX2VsZW1lbnQpIHx8IGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdpbnNpZGUnICYmICFpc01lbnVUYXJnZXQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gJ291dHNpZGUnICYmIGlzTWVudVRhcmdldCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIFRhYiBuYXZpZ2F0aW9uIHRocm91Z2ggdGhlIGRyb3Bkb3duIG1lbnUgb3IgZXZlbnRzIGZyb20gY29udGFpbmVkIGlucHV0cyBzaG91bGRuJ3QgY2xvc2UgdGhlIG1lbnVcblxuXG4gICAgICAgIGlmIChjb250ZXh0Ll9tZW51LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgKGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQua2V5ID09PSBUQUJfS0VZIHx8IC9pbnB1dHxzZWxlY3R8b3B0aW9ufHRleHRhcmVhfGZvcm0vaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fY29tcGxldGVIaWRlKHJlbGF0ZWRUYXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgc3RhdGljIGRhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgIC8vIElmIG5vdCBpbnB1dC90ZXh0YXJlYTpcbiAgICAvLyAgLSBBbmQgbm90IGEga2V5IGluIFJFR0VYUF9LRVlET1dOID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyBJZiBpbnB1dC90ZXh0YXJlYTpcbiAgICAvLyAgLSBJZiBzcGFjZSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vICAtIElmIGtleSBpcyBvdGhlciB0aGFuIGVzY2FwZVxuICAgIC8vICAgIC0gSWYga2V5IGlzIG5vdCB1cCBvciBkb3duID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyAgICAtIElmIHRyaWdnZXIgaW5zaWRlIHRoZSBtZW51ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgPyBldmVudC5rZXkgPT09IFNQQUNFX0tFWSB8fCBldmVudC5rZXkgIT09IEVTQ0FQRV9LRVkkMiAmJiAoZXZlbnQua2V5ICE9PSBBUlJPV19ET1dOX0tFWSAmJiBldmVudC5rZXkgIT09IEFSUk9XX1VQX0tFWSB8fCBldmVudC50YXJnZXQuY2xvc2VzdChTRUxFQ1RPUl9NRU5VKSkgOiAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC5rZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSQyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0VG9nZ2xlQnV0dG9uID0gKCkgPT4gdGhpcy5tYXRjaGVzKFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMpID8gdGhpcyA6IFNlbGVjdG9yRW5naW5lLnByZXYodGhpcywgU0VMRUNUT1JfREFUQV9UT0dHTEUkMylbMF07XG5cbiAgICBpZiAoZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZJDIpIHtcbiAgICAgIGdldFRvZ2dsZUJ1dHRvbigpLmZvY3VzKCk7XG4gICAgICBEcm9wZG93bi5jbGVhck1lbnVzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gQVJST1dfVVBfS0VZIHx8IGV2ZW50LmtleSA9PT0gQVJST1dfRE9XTl9LRVkpIHtcbiAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgZ2V0VG9nZ2xlQnV0dG9uKCkuY2xpY2soKTtcbiAgICAgIH1cblxuICAgICAgRHJvcGRvd24uZ2V0SW5zdGFuY2UoZ2V0VG9nZ2xlQnV0dG9uKCkpLl9zZWxlY3RNZW51SXRlbShldmVudCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aXZlIHx8IGV2ZW50LmtleSA9PT0gU1BBQ0VfS0VZKSB7XG4gICAgICBEcm9wZG93bi5jbGVhck1lbnVzKCk7XG4gICAgfVxuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMsIERyb3Bkb3duLmRhdGFBcGlLZXlkb3duSGFuZGxlcik7XG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX01FTlUsIERyb3Bkb3duLmRhdGFBcGlLZXlkb3duSGFuZGxlcik7XG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDMsIERyb3Bkb3duLmNsZWFyTWVudXMpO1xuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uY2xlYXJNZW51cyk7XG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDMsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMsIGZ1bmN0aW9uIChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBEcm9wZG93bi5kcm9wZG93bkludGVyZmFjZSh0aGlzKTtcbn0pO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkRyb3Bkb3duIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKERyb3Bkb3duKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiB1dGlsL3Njcm9sbEJhci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCBTRUxFQ1RPUl9GSVhFRF9DT05URU5UID0gJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnO1xuY29uc3QgU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQgPSAnLnN0aWNreS10b3AnO1xuXG5jbGFzcyBTY3JvbGxCYXJIZWxwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICAgIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgcmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnRXaWR0aCk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuXG4gICAgdGhpcy5fZGlzYWJsZU92ZXJGbG93KCk7IC8vIGdpdmUgcGFkZGluZyB0byBlbGVtZW50IHRvIGJhbGFuY2UgdGhlIGhpZGRlbiBzY3JvbGxiYXIgd2lkdGhcblxuXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ3BhZGRpbmdSaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgKyB3aWR0aCk7IC8vIHRyaWNrOiBXZSBhZGp1c3QgcG9zaXRpdmUgcGFkZGluZ1JpZ2h0IGFuZCBuZWdhdGl2ZSBtYXJnaW5SaWdodCB0byBzdGlja3ktdG9wIGVsZW1lbnRzIHRvIGtlZXAgc2hvd2luZyBmdWxsd2lkdGhcblxuXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgJ3BhZGRpbmdSaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgKyB3aWR0aCk7XG5cbiAgICB0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgJ21hcmdpblJpZ2h0JywgY2FsY3VsYXRlZFZhbHVlID0+IGNhbGN1bGF0ZWRWYWx1ZSAtIHdpZHRoKTtcbiAgfVxuXG4gIF9kaXNhYmxlT3ZlckZsb3coKSB7XG4gICAgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodGhpcy5fZWxlbWVudCwgJ292ZXJmbG93Jyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIH1cblxuICBfc2V0RWxlbWVudEF0dHJpYnV0ZXMoc2VsZWN0b3IsIHN0eWxlUHJvcCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcblxuICAgIGNvbnN0IG1hbmlwdWxhdGlvbkNhbGxCYWNrID0gZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCAhPT0gdGhpcy5fZWxlbWVudCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA+IGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcCk7XG5cbiAgICAgIGNvbnN0IGNhbGN1bGF0ZWRWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW3N0eWxlUHJvcF07XG4gICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSBgJHtjYWxsYmFjayhOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpKX1weGA7XG4gICAgfTtcblxuICAgIHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIG1hbmlwdWxhdGlvbkNhbGxCYWNrKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ292ZXJmbG93Jyk7XG5cbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnKTtcblxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgJ3BhZGRpbmdSaWdodCcpO1xuXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgJ21hcmdpblJpZ2h0Jyk7XG4gIH1cblxuICBfc2F2ZUluaXRpYWxBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wKSB7XG4gICAgY29uc3QgYWN0dWFsVmFsdWUgPSBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF07XG5cbiAgICBpZiAoYWN0dWFsVmFsdWUpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wLCBhY3R1YWxWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoc2VsZWN0b3IsIHN0eWxlUHJvcCkge1xuICAgIGNvbnN0IG1hbmlwdWxhdGlvbkNhbGxCYWNrID0gZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShzdHlsZVByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApO1xuICAgICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgbWFuaXB1bGF0aW9uQ2FsbEJhY2spO1xuICB9XG5cbiAgX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIGNhbGxCYWNrKSB7XG4gICAgaWYgKGlzRWxlbWVudChzZWxlY3RvcikpIHtcbiAgICAgIGNhbGxCYWNrKHNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvciwgdGhpcy5fZWxlbWVudCkuZm9yRWFjaChjYWxsQmFjayk7XG4gICAgfVxuICB9XG5cbiAgaXNPdmVyZmxvd2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXaWR0aCgpID4gMDtcbiAgfVxuXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdXRpbC9iYWNrZHJvcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmNvbnN0IERlZmF1bHQkNiA9IHtcbiAgaXNWaXNpYmxlOiB0cnVlLFxuICAvLyBpZiBmYWxzZSwgd2UgdXNlIHRoZSBiYWNrZHJvcCBoZWxwZXIgd2l0aG91dCBhZGRpbmcgYW55IGVsZW1lbnQgdG8gdGhlIGRvbVxuICBpc0FuaW1hdGVkOiBmYWxzZSxcbiAgcm9vdEVsZW1lbnQ6ICdib2R5JyxcbiAgLy8gZ2l2ZSB0aGUgY2hvaWNlIHRvIHBsYWNlIGJhY2tkcm9wIHVuZGVyIGRpZmZlcmVudCBlbGVtZW50c1xuICBjbGlja0NhbGxiYWNrOiBudWxsXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkNiA9IHtcbiAgaXNWaXNpYmxlOiAnYm9vbGVhbicsXG4gIGlzQW5pbWF0ZWQ6ICdib29sZWFuJyxcbiAgcm9vdEVsZW1lbnQ6ICcoZWxlbWVudHxzdHJpbmcpJyxcbiAgY2xpY2tDYWxsYmFjazogJyhmdW5jdGlvbnxudWxsKSdcbn07XG5jb25zdCBOQU1FJDcgPSAnYmFja2Ryb3AnO1xuY29uc3QgQ0xBU1NfTkFNRV9CQUNLRFJPUCA9ICdtb2RhbC1iYWNrZHJvcCc7XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkNSA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQ2ID0gJ3Nob3cnO1xuY29uc3QgRVZFTlRfTU9VU0VET1dOID0gYG1vdXNlZG93bi5icy4ke05BTUUkN31gO1xuXG5jbGFzcyBCYWNrZHJvcCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgfVxuXG4gIHNob3coY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5pc1Zpc2libGUpIHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2FwcGVuZCgpO1xuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB7XG4gICAgICByZWZsb3codGhpcy5fZ2V0RWxlbWVudCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckNik7XG5cbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICAgIH0pO1xuICB9XG5cbiAgaGlkZShjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmlzVmlzaWJsZSkge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuXG4gICAgdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKSA9PiB7XG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICAgIH0pO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRFbGVtZW50KCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgY29uc3QgYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGJhY2tkcm9wLmNsYXNzTmFtZSA9IENMQVNTX05BTUVfQkFDS0RST1A7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuaXNBbmltYXRlZCkge1xuICAgICAgICBiYWNrZHJvcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSQ1KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGJhY2tkcm9wO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkNixcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH07IC8vIHVzZSBnZXRFbGVtZW50KCkgd2l0aCB0aGUgZGVmYXVsdCBcImJvZHlcIiB0byBnZXQgYSBmcmVzaCBFbGVtZW50IG9uIGVhY2ggaW5zdGFudGlhdGlvblxuXG4gICAgY29uZmlnLnJvb3RFbGVtZW50ID0gZ2V0RWxlbWVudChjb25maWcucm9vdEVsZW1lbnQpO1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJDcsIGNvbmZpZywgRGVmYXVsdFR5cGUkNik7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9hcHBlbmQoKSB7XG4gICAgaWYgKHRoaXMuX2lzQXBwZW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jb25maWcucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZ2V0RWxlbWVudCgpKTtcblxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9nZXRFbGVtZW50KCksIEVWRU5UX01PVVNFRE9XTiwgKCkgPT4ge1xuICAgICAgZXhlY3V0ZSh0aGlzLl9jb25maWcuY2xpY2tDYWxsYmFjayk7XG4gICAgfSk7XG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IHRydWU7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICghdGhpcy5faXNBcHBlbmRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOKTtcblxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gZmFsc2U7XG4gIH1cblxuICBfZW11bGF0ZUFuaW1hdGlvbihjYWxsYmFjaykge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIHRoaXMuX2dldEVsZW1lbnQoKSwgdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpO1xuICB9XG5cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBtb2RhbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJDYgPSAnbW9kYWwnO1xuY29uc3QgREFUQV9LRVkkNiA9ICdicy5tb2RhbCc7XG5jb25zdCBFVkVOVF9LRVkkNiA9IGAuJHtEQVRBX0tFWSQ2fWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkMyA9ICcuZGF0YS1hcGknO1xuY29uc3QgRVNDQVBFX0tFWSQxID0gJ0VzY2FwZSc7XG5jb25zdCBEZWZhdWx0JDUgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgZm9jdXM6IHRydWVcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ1ID0ge1xuICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICBmb2N1czogJ2Jvb2xlYW4nXG59O1xuY29uc3QgRVZFTlRfSElERSQzID0gYGhpZGUke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9ISURFX1BSRVZFTlRFRCA9IGBoaWRlUHJldmVudGVkJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfSElEREVOJDMgPSBgaGlkZGVuJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfU0hPVyQzID0gYHNob3cke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9TSE9XTiQzID0gYHNob3duJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfRk9DVVNJTiQyID0gYGZvY3VzaW4ke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfRElTTUlTUyQyID0gYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MkMSA9IGBrZXlkb3duLmRpc21pc3Mke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9NT1VTRVVQX0RJU01JU1MgPSBgbW91c2V1cC5kaXNtaXNzJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MgPSBgbW91c2Vkb3duLmRpc21pc3Mke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQyID0gYGNsaWNrJHtFVkVOVF9LRVkkNn0ke0RBVEFfQVBJX0tFWSQzfWA7XG5jb25zdCBDTEFTU19OQU1FX09QRU4gPSAnbW9kYWwtb3Blbic7XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkNCA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQ1ID0gJ3Nob3cnO1xuY29uc3QgQ0xBU1NfTkFNRV9TVEFUSUMgPSAnbW9kYWwtc3RhdGljJztcbmNvbnN0IFNFTEVDVE9SX0RJQUxPRyA9ICcubW9kYWwtZGlhbG9nJztcbmNvbnN0IFNFTEVDVE9SX01PREFMX0JPRFkgPSAnLm1vZGFsLWJvZHknO1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUkMiA9ICdbZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiXSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MkMiA9ICdbZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIl0nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIE1vZGFsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2RpYWxvZyA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRElBTE9HLCB0aGlzLl9lbGVtZW50KTtcbiAgICB0aGlzLl9iYWNrZHJvcCA9IHRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpO1xuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fc2Nyb2xsQmFyID0gbmV3IFNjcm9sbEJhckhlbHBlcigpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQ1O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDY7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBpZiAodGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDMsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICB9KTtcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQoKSkge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxCYXIuaGlkZSgpO1xuXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfT1BFTik7XG5cbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MkMiwgU0VMRUNUT1JfREFUQV9ESVNNSVNTJDIsIGV2ZW50ID0+IHRoaXMuaGlkZShldmVudCkpO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9kaWFsb2csIEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTLCAoKSA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIub25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFVVBfRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc2hvd0JhY2tkcm9wKCgpID0+IHRoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpKTtcbiAgfVxuXG4gIGhpZGUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQgJiYgWydBJywgJ0FSRUEnXS5pbmNsdWRlcyhldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUkMyk7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5faXNBbmltYXRlZCgpO1xuXG4gICAgaWYgKGlzQW5pbWF0ZWQpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOJDIpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ1KTtcblxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUyQyKTtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2RpYWxvZywgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9oaWRlTW9kYWwoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZCk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIFt3aW5kb3csIHRoaXMuX2RpYWxvZ10uZm9yRWFjaChodG1sRWxlbWVudCA9PiBFdmVudEhhbmRsZXIub2ZmKGh0bWxFbGVtZW50LCBFVkVOVF9LRVkkNikpO1xuXG4gICAgdGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpO1xuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIC8qKlxuICAgICAqIGBkb2N1bWVudGAgaGFzIDIgZXZlbnRzIGBFVkVOVF9GT0NVU0lOYCBhbmQgYEVWRU5UX0NMSUNLX0RBVEFfQVBJYFxuICAgICAqIERvIG5vdCBtb3ZlIGBkb2N1bWVudGAgaW4gYGh0bWxFbGVtZW50c2AgYXJyYXlcbiAgICAgKiBJdCB3aWxsIHJlbW92ZSBgRVZFTlRfQ0xJQ0tfREFUQV9BUElgIGV2ZW50IHRoYXQgc2hvdWxkIHJlbWFpblxuICAgICAqL1xuXG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTiQyKTtcbiAgfVxuXG4gIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xuICAgIHJldHVybiBuZXcgQmFja2Ryb3Aoe1xuICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCksXG4gICAgICAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWVcbiAgICAgIGlzQW5pbWF0ZWQ6IHRoaXMuX2lzQW5pbWF0ZWQoKVxuICAgIH0pO1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkNSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ2LCBjb25maWcsIERlZmF1bHRUeXBlJDUpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLl9pc0FuaW1hdGVkKCk7XG5cbiAgICBjb25zdCBtb2RhbEJvZHkgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX01PREFMX0JPRFksIHRoaXMuX2RpYWxvZyk7XG5cbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdkaWFsb2cnKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMDtcblxuICAgIGlmIChtb2RhbEJvZHkpIHtcbiAgICAgIG1vZGFsQm9keS5zY3JvbGxUb3AgPSAwO1xuICAgIH1cblxuICAgIGlmIChpc0FuaW1hdGVkKSB7XG4gICAgICByZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQ1KTtcblxuICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgIH1cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOJDMsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2sodHJhbnNpdGlvbkNvbXBsZXRlLCB0aGlzLl9kaWFsb2csIGlzQW5pbWF0ZWQpO1xuICB9XG5cbiAgX2VuZm9yY2VGb2N1cygpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOJDIpOyAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcblxuICAgIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTiQyLCBldmVudCA9PiB7XG4gICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiB0aGlzLl9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgIXRoaXMuX2VsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MkMSwgZXZlbnQgPT4ge1xuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSQxKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY29uZmlnLmtleWJvYXJkICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSQxKSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MkMSk7XG4gICAgfVxuICB9XG5cbiAgX3NldFJlc2l6ZUV2ZW50KCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9SRVNJWkUsICgpID0+IHRoaXMuX2FkanVzdERpYWxvZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZih3aW5kb3csIEVWRU5UX1JFU0laRSk7XG4gICAgfVxuICB9XG5cbiAgX2hpZGVNb2RhbCgpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cbiAgICB0aGlzLl9iYWNrZHJvcC5oaWRlKCgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX09QRU4pO1xuXG4gICAgICB0aGlzLl9yZXNldEFkanVzdG1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX3Njcm9sbEJhci5yZXNldCgpO1xuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4kMyk7XG4gICAgfSk7XG4gIH1cblxuICBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MkMiwgZXZlbnQgPT4ge1xuICAgICAgaWYgKHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coY2FsbGJhY2spO1xuICB9XG5cbiAgX2lzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQ0KTtcbiAgfVxuXG4gIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREVfUFJFVkVOVEVEKTtcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTGlzdCxcbiAgICAgIHNjcm9sbEhlaWdodCxcbiAgICAgIHN0eWxlXG4gICAgfSA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID0gc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsgLy8gcmV0dXJuIGlmIHRoZSBmb2xsb3dpbmcgYmFja2dyb3VuZCB0cmFuc2l0aW9uIGhhc24ndCB5ZXQgY29tcGxldGVkXG5cbiAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZyAmJiBzdHlsZS5vdmVyZmxvd1kgPT09ICdoaWRkZW4nIHx8IGNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NUQVRJQykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gICAgfVxuXG4gICAgY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NUQVRJQyk7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuXG4gICAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICBzdHlsZS5vdmVyZmxvd1kgPSAnJztcbiAgICAgICAgfSwgdGhpcy5fZGlhbG9nKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLl9kaWFsb2cpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiAgX2FkanVzdERpYWxvZygpIHtcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpO1xuXG4gICAgY29uc3QgaXNCb2R5T3ZlcmZsb3dpbmcgPSBzY3JvbGxiYXJXaWR0aCA+IDA7XG5cbiAgICBpZiAoIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZyAmJiAhaXNSVEwoKSB8fCBpc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nICYmIGlzUlRMKCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHtzY3JvbGxiYXJXaWR0aH1weGA7XG4gICAgfVxuXG4gICAgaWYgKGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgIWlzUlRMKCkgfHwgIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZyAmJiBpc1JUTCgpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke3Njcm9sbGJhcldpZHRofXB4YDtcbiAgICB9XG4gIH1cblxuICBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpO1xuXG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIEVWRU5UX1NIT1ckMywgc2hvd0V2ZW50ID0+IHtcbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOJDMsICgpID0+IHtcbiAgICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgZGF0YSA9IE1vZGFsLmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KTtcbiAgZGF0YS50b2dnbGUodGhpcyk7XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Nb2RhbCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihNb2RhbCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogb2ZmY2FudmFzLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQ1ID0gJ29mZmNhbnZhcyc7XG5jb25zdCBEQVRBX0tFWSQ1ID0gJ2JzLm9mZmNhbnZhcyc7XG5jb25zdCBFVkVOVF9LRVkkNSA9IGAuJHtEQVRBX0tFWSQ1fWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkMiA9ICcuZGF0YS1hcGknO1xuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSQxID0gYGxvYWQke0VWRU5UX0tFWSQ1fSR7REFUQV9BUElfS0VZJDJ9YDtcbmNvbnN0IEVTQ0FQRV9LRVkgPSAnRXNjYXBlJztcbmNvbnN0IERlZmF1bHQkNCA9IHtcbiAgYmFja2Ryb3A6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBzY3JvbGw6IGZhbHNlXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkNCA9IHtcbiAgYmFja2Ryb3A6ICdib29sZWFuJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2Nyb2xsOiAnYm9vbGVhbidcbn07XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckNCA9ICdzaG93JztcbmNvbnN0IE9QRU5fU0VMRUNUT1IgPSAnLm9mZmNhbnZhcy5zaG93JztcbmNvbnN0IEVWRU5UX1NIT1ckMiA9IGBzaG93JHtFVkVOVF9LRVkkNX1gO1xuY29uc3QgRVZFTlRfU0hPV04kMiA9IGBzaG93biR7RVZFTlRfS0VZJDV9YDtcbmNvbnN0IEVWRU5UX0hJREUkMiA9IGBoaWRlJHtFVkVOVF9LRVkkNX1gO1xuY29uc3QgRVZFTlRfSElEREVOJDIgPSBgaGlkZGVuJHtFVkVOVF9LRVkkNX1gO1xuY29uc3QgRVZFTlRfRk9DVVNJTiQxID0gYGZvY3VzaW4ke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQxID0gYGNsaWNrJHtFVkVOVF9LRVkkNX0ke0RBVEFfQVBJX0tFWSQyfWA7XG5jb25zdCBFVkVOVF9DTElDS19ESVNNSVNTJDEgPSBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZJDV9YDtcbmNvbnN0IEVWRU5UX0tFWURPV05fRElTTUlTUyA9IGBrZXlkb3duLmRpc21pc3Mke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MkMSA9ICdbZGF0YS1icy1kaXNtaXNzPVwib2ZmY2FudmFzXCJdJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFJDEgPSAnW2RhdGEtYnMtdG9nZ2xlPVwib2ZmY2FudmFzXCJdJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBPZmZjYW52YXMgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKCk7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSQ1O1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDQ7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1ckMiwge1xuICAgICAgcmVsYXRlZFRhcmdldFxuICAgIH0pO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWU7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuXG4gICAgdGhpcy5fYmFja2Ryb3Auc2hvdygpO1xuXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkuaGlkZSgpO1xuXG4gICAgICB0aGlzLl9lbmZvcmNlRm9jdXNPbkVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDQpO1xuXG4gICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOJDIsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5faXNTaG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUkMik7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOJDEpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5ibHVyKCk7XG5cbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDQpO1xuXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgpO1xuXG4gICAgY29uc3QgY29tcGxldGVDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4kMik7XG4gICAgfTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsYmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKTtcblxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOJDEpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0geyAuLi5EZWZhdWx0JDQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH07XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkNSwgY29uZmlnLCBEZWZhdWx0VHlwZSQ0KTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2luaXRpYWxpemVCYWNrRHJvcCgpIHtcbiAgICByZXR1cm4gbmV3IEJhY2tkcm9wKHtcbiAgICAgIGlzVmlzaWJsZTogdGhpcy5fY29uZmlnLmJhY2tkcm9wLFxuICAgICAgaXNBbmltYXRlZDogdHJ1ZSxcbiAgICAgIHJvb3RFbGVtZW50OiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICBjbGlja0NhbGxiYWNrOiAoKSA9PiB0aGlzLmhpZGUoKVxuICAgIH0pO1xuICB9XG5cbiAgX2VuZm9yY2VGb2N1c09uRWxlbWVudChlbGVtZW50KSB7XG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTiQxKTsgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG5cbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4kMSwgZXZlbnQgPT4ge1xuICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmICFlbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUyQxLCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MkMSwgKCkgPT4gdGhpcy5oaWRlKCkpO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDEsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDEsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpO1xuXG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOJDIsICgpID0+IHtcbiAgICAvLyBmb2N1cyBvbiB0cmlnZ2VyIHdoZW4gaXQgaXMgY2xvc2VkXG4gICAgaWYgKGlzVmlzaWJsZSh0aGlzKSkge1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfSk7IC8vIGF2b2lkIGNvbmZsaWN0IHdoZW4gY2xpY2tpbmcgYSB0b2dnbGVyIG9mIGFuIG9mZmNhbnZhcywgd2hpbGUgYW5vdGhlciBpcyBvcGVuXG5cbiAgY29uc3QgYWxsUmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SKTtcblxuICBpZiAoYWxsUmVhZHlPcGVuICYmIGFsbFJlYWR5T3BlbiAhPT0gdGFyZ2V0KSB7XG4gICAgT2ZmY2FudmFzLmdldEluc3RhbmNlKGFsbFJlYWR5T3BlbikuaGlkZSgpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldCk7XG4gIGRhdGEudG9nZ2xlKHRoaXMpO1xufSk7XG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJJDEsICgpID0+IFNlbGVjdG9yRW5naW5lLmZpbmQoT1BFTl9TRUxFQ1RPUikuZm9yRWFjaChlbCA9PiBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbCkuc2hvdygpKSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oT2ZmY2FudmFzKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiB1dGlsL3Nhbml0aXplci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCB1cmlBdHRycyA9IG5ldyBTZXQoWydiYWNrZ3JvdW5kJywgJ2NpdGUnLCAnaHJlZicsICdpdGVtdHlwZScsICdsb25nZGVzYycsICdwb3N0ZXInLCAnc3JjJywgJ3hsaW5rOmhyZWYnXSk7XG5jb25zdCBBUklBX0FUVFJJQlVURV9QQVRURVJOID0gL15hcmlhLVtcXHctXSokL2k7XG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cblxuY29uc3QgU0FGRV9VUkxfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fG1haWx0b3xmdHB8dGVsfGZpbGUpOnxbXiMmLzo/XSooPzpbIy8/XXwkKSkvaTtcbi8qKlxuICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIGRhdGEgVVJMcy4gT25seSBtYXRjaGVzIGltYWdlLCB2aWRlbyBhbmQgYXVkaW8gdHlwZXMuXG4gKlxuICogU2hvdXRvdXQgdG8gQW5ndWxhciA3IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi83LjIuNC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICovXG5cbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pO1xuXG5jb25zdCBhbGxvd2VkQXR0cmlidXRlID0gKGF0dHIsIGFsbG93ZWRBdHRyaWJ1dGVMaXN0KSA9PiB7XG4gIGNvbnN0IGF0dHJOYW1lID0gYXR0ci5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChhbGxvd2VkQXR0cmlidXRlTGlzdC5pbmNsdWRlcyhhdHRyTmFtZSkpIHtcbiAgICBpZiAodXJpQXR0cnMuaGFzKGF0dHJOYW1lKSkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oU0FGRV9VUkxfUEFUVEVSTi50ZXN0KGF0dHIubm9kZVZhbHVlKSB8fCBEQVRBX1VSTF9QQVRURVJOLnRlc3QoYXR0ci5ub2RlVmFsdWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHJlZ0V4cCA9IGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmZpbHRlcihhdHRyUmVnZXggPT4gYXR0clJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKTsgLy8gQ2hlY2sgaWYgYSByZWd1bGFyIGV4cHJlc3Npb24gdmFsaWRhdGVzIHRoZSBhdHRyaWJ1dGUuXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlZ0V4cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChyZWdFeHBbaV0udGVzdChhdHRyTmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IERlZmF1bHRBbGxvd2xpc3QgPSB7XG4gIC8vIEdsb2JhbCBhdHRyaWJ1dGVzIGFsbG93ZWQgb24gYW55IHN1cHBsaWVkIGVsZW1lbnQgYmVsb3cuXG4gICcqJzogWydjbGFzcycsICdkaXInLCAnaWQnLCAnbGFuZycsICdyb2xlJywgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTl0sXG4gIGE6IFsndGFyZ2V0JywgJ2hyZWYnLCAndGl0bGUnLCAncmVsJ10sXG4gIGFyZWE6IFtdLFxuICBiOiBbXSxcbiAgYnI6IFtdLFxuICBjb2w6IFtdLFxuICBjb2RlOiBbXSxcbiAgZGl2OiBbXSxcbiAgZW06IFtdLFxuICBocjogW10sXG4gIGgxOiBbXSxcbiAgaDI6IFtdLFxuICBoMzogW10sXG4gIGg0OiBbXSxcbiAgaDU6IFtdLFxuICBoNjogW10sXG4gIGk6IFtdLFxuICBpbWc6IFsnc3JjJywgJ3NyY3NldCcsICdhbHQnLCAndGl0bGUnLCAnd2lkdGgnLCAnaGVpZ2h0J10sXG4gIGxpOiBbXSxcbiAgb2w6IFtdLFxuICBwOiBbXSxcbiAgcHJlOiBbXSxcbiAgczogW10sXG4gIHNtYWxsOiBbXSxcbiAgc3BhbjogW10sXG4gIHN1YjogW10sXG4gIHN1cDogW10sXG4gIHN0cm9uZzogW10sXG4gIHU6IFtdLFxuICB1bDogW11cbn07XG5mdW5jdGlvbiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgYWxsb3dMaXN0LCBzYW5pdGl6ZUZuKSB7XG4gIGlmICghdW5zYWZlSHRtbC5sZW5ndGgpIHtcbiAgICByZXR1cm4gdW5zYWZlSHRtbDtcbiAgfVxuXG4gIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNhbml0aXplRm4odW5zYWZlSHRtbCk7XG4gIH1cblxuICBjb25zdCBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuICBjb25zdCBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKTtcbiAgY29uc3QgYWxsb3dsaXN0S2V5cyA9IE9iamVjdC5rZXlzKGFsbG93TGlzdCk7XG4gIGNvbnN0IGVsZW1lbnRzID0gW10uY29uY2F0KC4uLmNyZWF0ZWREb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgZWwgPSBlbGVtZW50c1tpXTtcbiAgICBjb25zdCBlbE5hbWUgPSBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKCFhbGxvd2xpc3RLZXlzLmluY2x1ZGVzKGVsTmFtZSkpIHtcbiAgICAgIGVsLnJlbW92ZSgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlTGlzdCA9IFtdLmNvbmNhdCguLi5lbC5hdHRyaWJ1dGVzKTtcbiAgICBjb25zdCBhbGxvd2VkQXR0cmlidXRlcyA9IFtdLmNvbmNhdChhbGxvd0xpc3RbJyonXSB8fCBbXSwgYWxsb3dMaXN0W2VsTmFtZV0gfHwgW10pO1xuICAgIGF0dHJpYnV0ZUxpc3QuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyLCBhbGxvd2VkQXR0cmlidXRlcykpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIubm9kZU5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTDtcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiB0b29sdGlwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkNCA9ICd0b29sdGlwJztcbmNvbnN0IERBVEFfS0VZJDQgPSAnYnMudG9vbHRpcCc7XG5jb25zdCBFVkVOVF9LRVkkNCA9IGAuJHtEQVRBX0tFWSQ0fWA7XG5jb25zdCBDTEFTU19QUkVGSVgkMSA9ICdicy10b29sdGlwJztcbmNvbnN0IEJTQ0xTX1BSRUZJWF9SRUdFWCQxID0gbmV3IFJlZ0V4cChgKF58XFxcXHMpJHtDTEFTU19QUkVGSVgkMX1cXFxcUytgLCAnZycpO1xuY29uc3QgRElTQUxMT1dFRF9BVFRSSUJVVEVTID0gbmV3IFNldChbJ3Nhbml0aXplJywgJ2FsbG93TGlzdCcsICdzYW5pdGl6ZUZuJ10pO1xuY29uc3QgRGVmYXVsdFR5cGUkMyA9IHtcbiAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gIHRlbXBsYXRlOiAnc3RyaW5nJyxcbiAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgdHJpZ2dlcjogJ3N0cmluZycsXG4gIGRlbGF5OiAnKG51bWJlcnxvYmplY3QpJyxcbiAgaHRtbDogJ2Jvb2xlYW4nLFxuICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiAnYXJyYXknLFxuICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBjdXN0b21DbGFzczogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gIGFsbG93TGlzdDogJ29iamVjdCcsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknXG59O1xuY29uc3QgQXR0YWNobWVudE1hcCA9IHtcbiAgQVVUTzogJ2F1dG8nLFxuICBUT1A6ICd0b3AnLFxuICBSSUdIVDogaXNSVEwoKSA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gIEJPVFRPTTogJ2JvdHRvbScsXG4gIExFRlQ6IGlzUlRMKCkgPyAncmlnaHQnIDogJ2xlZnQnXG59O1xuY29uc3QgRGVmYXVsdCQzID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+JyArICc8L2Rpdj4nLFxuICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICB0aXRsZTogJycsXG4gIGRlbGF5OiAwLFxuICBodG1sOiBmYWxzZSxcbiAgc2VsZWN0b3I6IGZhbHNlLFxuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICBvZmZzZXQ6IFswLCAwXSxcbiAgY29udGFpbmVyOiBmYWxzZSxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIGN1c3RvbUNsYXNzOiAnJyxcbiAgc2FuaXRpemU6IHRydWUsXG4gIHNhbml0aXplRm46IG51bGwsXG4gIGFsbG93TGlzdDogRGVmYXVsdEFsbG93bGlzdCxcbiAgcG9wcGVyQ29uZmlnOiBudWxsXG59O1xuY29uc3QgRXZlbnQkMiA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWSQ0fWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZJDR9YCxcbiAgU0hPVzogYHNob3cke0VWRU5UX0tFWSQ0fWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWSQ0fWAsXG4gIElOU0VSVEVEOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWSQ0fWAsXG4gIENMSUNLOiBgY2xpY2ske0VWRU5UX0tFWSQ0fWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVkkNH1gLFxuICBGT0NVU09VVDogYGZvY3Vzb3V0JHtFVkVOVF9LRVkkNH1gLFxuICBNT1VTRUVOVEVSOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZJDR9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWSQ0fWBcbn07XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkMyA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfTU9EQUwgPSAnbW9kYWwnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDMgPSAnc2hvdyc7XG5jb25zdCBIT1ZFUl9TVEFURV9TSE9XID0gJ3Nob3cnO1xuY29uc3QgSE9WRVJfU1RBVEVfT1VUID0gJ291dCc7XG5jb25zdCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSID0gJy50b29sdGlwLWlubmVyJztcbmNvbnN0IFRSSUdHRVJfSE9WRVIgPSAnaG92ZXInO1xuY29uc3QgVFJJR0dFUl9GT0NVUyA9ICdmb2N1cyc7XG5jb25zdCBUUklHR0VSX0NMSUNLID0gJ2NsaWNrJztcbmNvbnN0IFRSSUdHRVJfTUFOVUFMID0gJ21hbnVhbCc7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICB9XG5cbiAgICBzdXBlcihlbGVtZW50KTsgLy8gcHJpdmF0ZVxuXG4gICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLl90aW1lb3V0ID0gMDtcbiAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9O1xuICAgIHRoaXMuX3BvcHBlciA9IG51bGw7IC8vIFByb3RlY3RlZFxuXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy50aXAgPSBudWxsO1xuXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkNDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgcmV0dXJuIEV2ZW50JDI7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZSQzO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBkaXNhYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgdG9nZ2xlRW5hYmxlZCgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICB9XG5cbiAgdG9nZ2xlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQpO1xuXG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckMykpIHtcbiAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQuY2xvc2VzdChgLiR7Q0xBU1NfTkFNRV9NT0RBTH1gKSwgJ2hpZGUuYnMubW9kYWwnLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKTtcblxuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgdGhpcy50aXAucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpO1xuICAgIH1cblxuICAgIGlmICghKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpO1xuICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSBmaW5kU2hhZG93Um9vdCh0aGlzLl9lbGVtZW50KTtcbiAgICBjb25zdCBpc0luVGhlRG9tID0gc2hhZG93Um9vdCA9PT0gbnVsbCA/IHRoaXMuX2VsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGhpcy5fZWxlbWVudCkgOiBzaGFkb3dSb290LmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgY29uc3QgdGlwSWQgPSBnZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtcbiAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuXG4gICAgdGhpcy5zZXRDb250ZW50KCk7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFJDMpO1xuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLl9jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5fZWxlbWVudCkgOiB0aGlzLl9jb25maWcucGxhY2VtZW50O1xuXG4gICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KTtcblxuICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lclxuICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgRGF0YS5zZXQodGlwLCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXApO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHRoaXMuX2VsZW1lbnQsIHRpcCwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpKTtcbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckMyk7XG4gICAgY29uc3QgY3VzdG9tQ2xhc3MgPSB0eXBlb2YgdGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKCkgOiB0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3M7XG5cbiAgICBpZiAoY3VzdG9tQ2xhc3MpIHtcbiAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKC4uLmN1c3RvbUNsYXNzLnNwbGl0KCcgJykpO1xuICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByZXZIb3ZlclN0YXRlID0gdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTik7XG5cbiAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQzKTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMudGlwLCBpc0FuaW1hdGVkKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ob3ZlclN0YXRlICE9PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIHRpcC5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDMpOyAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaChlbGVtZW50ID0+IEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfQ0xJQ0tdID0gZmFsc2U7XG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0ZPQ1VTXSA9IGZhbHNlO1xuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9IT1ZFUl0gPSBmYWxzZTtcbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQzKTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMudGlwLCBpc0FuaW1hdGVkKTtcblxuICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3BwZXIudXBkYXRlKCk7XG4gICAgfVxuICB9IC8vIFByb3RlY3RlZFxuXG5cbiAgaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuICB9XG5cbiAgZ2V0VGlwRWxlbWVudCgpIHtcbiAgICBpZiAodGhpcy50aXApIHtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9jb25maWcudGVtcGxhdGU7XG4gICAgdGhpcy50aXAgPSBlbGVtZW50LmNoaWxkcmVuWzBdO1xuICAgIHJldHVybiB0aGlzLnRpcDtcbiAgfVxuXG4gIHNldENvbnRlbnQoKSB7XG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIsIHRpcCksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9GQURFJDMsIENMQVNTX05BTUVfU0hPVyQzKTtcbiAgfVxuXG4gIHNldEVsZW1lbnRDb250ZW50KGVsZW1lbnQsIGNvbnRlbnQpIHtcbiAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0VsZW1lbnQoY29udGVudCkpIHtcbiAgICAgIGNvbnRlbnQgPSBnZXRFbGVtZW50KGNvbnRlbnQpOyAvLyBjb250ZW50IGlzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnlcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICAgIGlmIChjb250ZW50LnBhcmVudE5vZGUgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50LnRleHRDb250ZW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLnNhbml0aXplKSB7XG4gICAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoY29udGVudCwgdGhpcy5fY29uZmlnLmFsbG93TGlzdCwgdGhpcy5fY29uZmlnLnNhbml0aXplRm4pO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIGxldCB0aXRsZSA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLl9jb25maWcudGl0bGUgPT09ICdmdW5jdGlvbicgPyB0aGlzLl9jb25maWcudGl0bGUuY2FsbCh0aGlzLl9lbGVtZW50KSA6IHRoaXMuX2NvbmZpZy50aXRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGl0bGU7XG4gIH1cblxuICB1cGRhdGVBdHRhY2htZW50KGF0dGFjaG1lbnQpIHtcbiAgICBpZiAoYXR0YWNobWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuICdlbmQnO1xuICAgIH1cblxuICAgIGlmIChhdHRhY2htZW50ID09PSAnbGVmdCcpIHtcbiAgICAgIHJldHVybiAnc3RhcnQnO1xuICAgIH1cblxuICAgIHJldHVybiBhdHRhY2htZW50O1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb25zdCBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICBjb250ZXh0ID0gY29udGV4dCB8fCBEYXRhLmdldChldmVudC5kZWxlZ2F0ZVRhcmdldCwgZGF0YUtleSk7XG5cbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5kZWxlZ2F0ZVRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICBEYXRhLnNldChldmVudC5kZWxlZ2F0ZVRhcmdldCwgZGF0YUtleSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cblxuICBfZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9mZnNldFxuICAgIH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsID0+IE51bWJlci5wYXJzZUludCh2YWwsIDEwKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50KSB7XG4gICAgY29uc3QgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xuICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICBuYW1lOiAnZmxpcCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHRoaXMuX2NvbmZpZy5mYWxsYmFja1BsYWNlbWVudHNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KClcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgZWxlbWVudDogYC4ke3RoaXMuY29uc3RydWN0b3IuTkFNRX0tYXJyb3dgXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ29uQ2hhbmdlJyxcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcGhhc2U6ICdhZnRlcldyaXRlJyxcbiAgICAgICAgZm46IGRhdGEgPT4gdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpXG4gICAgICB9XSxcbiAgICAgIG9uRmlyc3RVcGRhdGU6IGRhdGEgPT4ge1xuICAgICAgICBpZiAoZGF0YS5vcHRpb25zLnBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7IC4uLmRlZmF1bHRCc1BvcHBlckNvbmZpZyxcbiAgICAgIC4uLih0eXBlb2YgdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcoZGVmYXVsdEJzUG9wcGVyQ29uZmlnKSA6IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcpXG4gICAgfTtcbiAgfVxuXG4gIF9hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgIHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoYCR7Q0xBU1NfUFJFRklYJDF9LSR7dGhpcy51cGRhdGVBdHRhY2htZW50KGF0dGFjaG1lbnQpfWApO1xuICB9XG5cbiAgX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIEF0dGFjaG1lbnRNYXBbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0cmlnZ2VycyA9IHRoaXMuX2NvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJyk7XG5cbiAgICB0cmlnZ2Vycy5mb3JFYWNoKHRyaWdnZXIgPT4ge1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4gdGhpcy50b2dnbGUoZXZlbnQpKTtcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVFJJR0dFUl9NQU5VQUwpIHtcbiAgICAgICAgY29uc3QgZXZlbnRJbiA9IHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVIgPyB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU47XG4gICAgICAgIGNvbnN0IGV2ZW50T3V0ID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudEluLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHRoaXMuX2VudGVyKGV2ZW50KSk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudE91dCwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB0aGlzLl9sZWF2ZShldmVudCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5faGlkZU1vZGFsSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudC5jbG9zZXN0KGAuJHtDTEFTU19OQU1FX01PREFMfWApLCAnaGlkZS5icy5tb2RhbCcsIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpO1xuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgdGhpcy5fY29uZmlnID0geyAuLi50aGlzLl9jb25maWcsXG4gICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgfVxuICB9XG5cbiAgX2ZpeFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG5cbiAgICBjb25zdCBvcmlnaW5hbFRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgaWYgKHRpdGxlIHx8IG9yaWdpbmFsVGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnLCB0aXRsZSB8fCAnJyk7XG5cbiAgICAgIGlmICh0aXRsZSAmJiAhdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSAmJiAhdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRpdGxlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xuICAgIH1cbiAgfVxuXG4gIF9lbnRlcihldmVudCwgY29udGV4dCkge1xuICAgIGNvbnRleHQgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQsIGNvbnRleHQpO1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckMykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1c7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xuXG4gICAgaWYgKCFjb250ZXh0Ll9jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuX2NvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgIH1cbiAgICB9LCBjb250ZXh0Ll9jb25maWcuZGVsYXkuc2hvdyk7XG4gIH1cblxuICBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJdID0gY29udGV4dC5fZWxlbWVudC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9PVVQ7XG5cbiAgICBpZiAoIWNvbnRleHQuX2NvbmZpZy5kZWxheSB8fCAhY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICB9XG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpO1xuICB9XG5cbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTtcbiAgICBPYmplY3Qua2V5cyhkYXRhQXR0cmlidXRlcykuZm9yRWFjaChkYXRhQXR0ciA9PiB7XG4gICAgICBpZiAoRElTQUxMT1dFRF9BVFRSSUJVVEVTLmhhcyhkYXRhQXR0cikpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25maWcgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLmRhdGFBdHRyaWJ1dGVzLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KVxuICAgIH07XG4gICAgY29uZmlnLmNvbnRhaW5lciA9IGNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6IGdldEVsZW1lbnQoY29uZmlnLmNvbnRhaW5lcik7XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICBoaWRlOiBjb25maWcuZGVsYXlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJDQsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cbiAgICBpZiAoY29uZmlnLnNhbml0aXplKSB7XG4gICAgICBjb25maWcudGVtcGxhdGUgPSBzYW5pdGl6ZUh0bWwoY29uZmlnLnRlbXBsYXRlLCBjb25maWcuYWxsb3dMaXN0LCBjb25maWcuc2FuaXRpemVGbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSB7fTtcblxuICAgIGlmICh0aGlzLl9jb25maWcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2NvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuX2NvbmZpZ1trZXldKSB7XG4gICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLl9jb25maWdba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICBjb25zdCB0YWJDbGFzcyA9IHRpcC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYJDEpO1xuXG4gICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRhYkNsYXNzLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZvckVhY2godENsYXNzID0+IHRpcC5jbGFzc0xpc3QucmVtb3ZlKHRDbGFzcykpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YXRlXG4gICAgfSA9IHBvcHBlckRhdGE7XG5cbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50aXAgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXI7XG5cbiAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICB0aGlzLl9hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChzdGF0ZS5wbGFjZW1lbnQpKTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gVG9vbHRpcC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlRvb2x0aXAgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5cbmRlZmluZUpRdWVyeVBsdWdpbihUb29sdGlwKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBwb3BvdmVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkMyA9ICdwb3BvdmVyJztcbmNvbnN0IERBVEFfS0VZJDMgPSAnYnMucG9wb3Zlcic7XG5jb25zdCBFVkVOVF9LRVkkMyA9IGAuJHtEQVRBX0tFWSQzfWA7XG5jb25zdCBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XG5jb25zdCBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKGAoXnxcXFxccykke0NMQVNTX1BSRUZJWH1cXFxcUytgLCAnZycpO1xuY29uc3QgRGVmYXVsdCQyID0geyAuLi5Ub29sdGlwLkRlZmF1bHQsXG4gIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgb2Zmc2V0OiBbMCwgOF0sXG4gIHRyaWdnZXI6ICdjbGljaycsXG4gIGNvbnRlbnQ6ICcnLFxuICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWFycm93XCI+PC9kaXY+JyArICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+JyArICc8L2Rpdj4nXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkMiA9IHsgLi4uVG9vbHRpcC5EZWZhdWx0VHlwZSxcbiAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG59O1xuY29uc3QgRXZlbnQkMSA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWSQzfWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZJDN9YCxcbiAgU0hPVzogYHNob3cke0VWRU5UX0tFWSQzfWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWSQzfWAsXG4gIElOU0VSVEVEOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWSQzfWAsXG4gIENMSUNLOiBgY2xpY2ske0VWRU5UX0tFWSQzfWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVkkM31gLFxuICBGT0NVU09VVDogYGZvY3Vzb3V0JHtFVkVOVF9LRVkkM31gLFxuICBNT1VTRUVOVEVSOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZJDN9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWSQzfWBcbn07XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkMiA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQyID0gJ3Nob3cnO1xuY29uc3QgU0VMRUNUT1JfVElUTEUgPSAnLnBvcG92ZXItaGVhZGVyJztcbmNvbnN0IFNFTEVDVE9SX0NPTlRFTlQgPSAnLnBvcG92ZXItYm9keSc7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIFRvb2x0aXAge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQyO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudCQxO1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGUkMjtcbiAgfSAvLyBPdmVycmlkZXNcblxuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KCk7XG4gIH1cblxuICBnZXRUaXBFbGVtZW50KCkge1xuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH1cblxuICAgIHRoaXMudGlwID0gc3VwZXIuZ2V0VGlwRWxlbWVudCgpO1xuXG4gICAgaWYgKCF0aGlzLmdldFRpdGxlKCkpIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfVElUTEUsIHRoaXMudGlwKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2dldENvbnRlbnQoKSkge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9DT05URU5ULCB0aGlzLnRpcCkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGlwO1xuICB9XG5cbiAgc2V0Q29udGVudCgpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTsgLy8gd2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuXG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX1RJVExFLCB0aXApLCB0aGlzLmdldFRpdGxlKCkpO1xuXG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLl9nZXRDb250ZW50KCk7XG5cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNhbGwodGhpcy5fZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0NPTlRFTlQsIHRpcCksIGNvbnRlbnQpO1xuICAgIHRpcC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfRkFERSQyLCBDTEFTU19OQU1FX1NIT1ckMik7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgdGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChgJHtDTEFTU19QUkVGSVh9LSR7dGhpcy51cGRhdGVBdHRhY2htZW50KGF0dGFjaG1lbnQpfWApO1xuICB9XG5cbiAgX2dldENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLWNvbnRlbnQnKSB8fCB0aGlzLl9jb25maWcuY29udGVudDtcbiAgfVxuXG4gIF9jbGVhblRpcENsYXNzKCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgIGNvbnN0IHRhYkNsYXNzID0gdGlwLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXG4gICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRhYkNsYXNzLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZvckVhY2godENsYXNzID0+IHRpcC5jbGFzc0xpc3QucmVtb3ZlKHRDbGFzcykpO1xuICAgIH1cbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gUG9wb3Zlci5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlBvcG92ZXIgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5cbmRlZmluZUpRdWVyeVBsdWdpbihQb3BvdmVyKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBzY3JvbGxzcHkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQyID0gJ3Njcm9sbHNweSc7XG5jb25zdCBEQVRBX0tFWSQyID0gJ2JzLnNjcm9sbHNweSc7XG5jb25zdCBFVkVOVF9LRVkkMiA9IGAuJHtEQVRBX0tFWSQyfWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkMSA9ICcuZGF0YS1hcGknO1xuY29uc3QgRGVmYXVsdCQxID0ge1xuICBvZmZzZXQ6IDEwLFxuICBtZXRob2Q6ICdhdXRvJyxcbiAgdGFyZ2V0OiAnJ1xufTtcbmNvbnN0IERlZmF1bHRUeXBlJDEgPSB7XG4gIG9mZnNldDogJ251bWJlcicsXG4gIG1ldGhvZDogJ3N0cmluZycsXG4gIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG59O1xuY29uc3QgRVZFTlRfQUNUSVZBVEUgPSBgYWN0aXZhdGUke0VWRU5UX0tFWSQyfWA7XG5jb25zdCBFVkVOVF9TQ1JPTEwgPSBgc2Nyb2xsJHtFVkVOVF9LRVkkMn1gO1xuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVkkMn0ke0RBVEFfQVBJX0tFWSQxfWA7XG5jb25zdCBDTEFTU19OQU1FX0RST1BET1dOX0lURU0gPSAnZHJvcGRvd24taXRlbSc7XG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSQxID0gJ2FjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nO1xuY29uc3QgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAkMSA9ICcubmF2LCAubGlzdC1ncm91cCc7XG5jb25zdCBTRUxFQ1RPUl9OQVZfTElOS1MgPSAnLm5hdi1saW5rJztcbmNvbnN0IFNFTEVDVE9SX05BVl9JVEVNUyA9ICcubmF2LWl0ZW0nO1xuY29uc3QgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJztcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOJDEgPSAnLmRyb3Bkb3duJztcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSQxID0gJy5kcm9wZG93bi10b2dnbGUnO1xuY29uc3QgTUVUSE9EX09GRlNFVCA9ICdvZmZzZXQnO1xuY29uc3QgTUVUSE9EX1BPU0lUSU9OID0gJ3Bvc2l0aW9uJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBTY3JvbGxTcHkgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogdGhpcy5fZWxlbWVudDtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9zZWxlY3RvciA9IGAke3RoaXMuX2NvbmZpZy50YXJnZXR9ICR7U0VMRUNUT1JfTkFWX0xJTktTfSwgJHt0aGlzLl9jb25maWcudGFyZ2V0fSAke1NFTEVDVE9SX0xJU1RfSVRFTVN9LCAke3RoaXMuX2NvbmZpZy50YXJnZXR9IC4ke0NMQVNTX05BTUVfRFJPUERPV05fSVRFTX1gO1xuICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9zY3JvbGxFbGVtZW50LCBFVkVOVF9TQ1JPTEwsICgpID0+IHRoaXMuX3Byb2Nlc3MoKSk7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG5cbiAgICB0aGlzLl9wcm9jZXNzKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDE7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkMjtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHJlZnJlc2goKSB7XG4gICAgY29uc3QgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gTUVUSE9EX09GRlNFVCA6IE1FVEhPRF9QT1NJVElPTjtcbiAgICBjb25zdCBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcbiAgICBjb25zdCBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBNRVRIT0RfUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICBjb25zdCB0YXJnZXRzID0gU2VsZWN0b3JFbmdpbmUuZmluZCh0aGlzLl9zZWxlY3Rvcik7XG4gICAgdGFyZ2V0cy5tYXAoZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTZWxlY3RvciA/IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUodGFyZ2V0U2VsZWN0b3IpIDogbnVsbDtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIFtNYW5pcHVsYXRvcltvZmZzZXRNZXRob2RdKHRhcmdldCkudG9wICsgb2Zmc2V0QmFzZSwgdGFyZ2V0U2VsZWN0b3JdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pLmZpbHRlcihpdGVtID0+IGl0ZW0pLnNvcnQoKGEsIGIpID0+IGFbMF0gLSBiWzBdKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgdGhpcy5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pO1xuXG4gICAgICB0aGlzLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgfSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fc2Nyb2xsRWxlbWVudCwgRVZFTlRfS0VZJDIpO1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCQxLFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycgJiYgaXNFbGVtZW50KGNvbmZpZy50YXJnZXQpKSB7XG4gICAgICBsZXQge1xuICAgICAgICBpZFxuICAgICAgfSA9IGNvbmZpZy50YXJnZXQ7XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgaWQgPSBnZXRVSUQoTkFNRSQyKTtcbiAgICAgICAgY29uZmlnLnRhcmdldC5pZCA9IGlkO1xuICAgICAgfVxuXG4gICAgICBjb25maWcudGFyZ2V0ID0gYCMke2lkfWA7XG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkMiwgY29uZmlnLCBEZWZhdWx0VHlwZSQxKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2dldFNjcm9sbFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgX2dldFNjcm9sbEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICB9XG5cbiAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gIH1cblxuICBfcHJvY2VzcygpIHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG5cbiAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgIGNvbnN0IG1heFNjcm9sbCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcblxuICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICYmIHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbMF0gJiYgdGhpcy5fb2Zmc2V0c1swXSA+IDApIHtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGNvbnN0IGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hY3RpdmF0ZSh0YXJnZXQpIHtcbiAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgY29uc3QgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJykubWFwKHNlbGVjdG9yID0+IGAke3NlbGVjdG9yfVtkYXRhLWJzLXRhcmdldD1cIiR7dGFyZ2V0fVwiXSwke3NlbGVjdG9yfVtocmVmPVwiJHt0YXJnZXR9XCJdYCk7XG5cbiAgICBjb25zdCBsaW5rID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShxdWVyaWVzLmpvaW4oJywnKSk7XG5cbiAgICBpZiAobGluay5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUkMSwgbGluay5jbG9zZXN0KFNFTEVDVE9SX0RST1BET1dOJDEpKS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgICAgbGluay5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICBsaW5rLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICBTZWxlY3RvckVuZ2luZS5wYXJlbnRzKGxpbmssIFNFTEVDVE9SX05BVl9MSVNUX0dST1VQJDEpLmZvckVhY2gobGlzdEdyb3VwID0+IHtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIGAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7U0VMRUNUT1JfTElTVF9JVEVNU31gKS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpKTsgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZSB3aGVuIC5uYXYtbGluayBpcyBpbnNpZGUgLm5hdi1pdGVtXG5cbiAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIFNFTEVDVE9SX05BVl9JVEVNUykuZm9yRWFjaChuYXZJdGVtID0+IHtcbiAgICAgICAgICBTZWxlY3RvckVuZ2luZS5jaGlsZHJlbihuYXZJdGVtLCBTRUxFQ1RPUl9OQVZfTElOS1MpLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX0FDVElWQVRFLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcbiAgICB9KTtcbiAgfVxuXG4gIF9jbGVhcigpIHtcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIobm9kZSA9PiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSQxKSkuZm9yRWFjaChub2RlID0+IG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSQxKSk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFNjcm9sbFNweS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfU1BZKS5mb3JFYWNoKHNweSA9PiBuZXcgU2Nyb2xsU3B5KHNweSkpO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuU2Nyb2xsU3B5IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFNjcm9sbFNweSk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdGFiLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkMSA9ICd0YWInO1xuY29uc3QgREFUQV9LRVkkMSA9ICdicy50YWInO1xuY29uc3QgRVZFTlRfS0VZJDEgPSBgLiR7REFUQV9LRVkkMX1gO1xuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG5jb25zdCBFVkVOVF9ISURFJDEgPSBgaGlkZSR7RVZFTlRfS0VZJDF9YDtcbmNvbnN0IEVWRU5UX0hJRERFTiQxID0gYGhpZGRlbiR7RVZFTlRfS0VZJDF9YDtcbmNvbnN0IEVWRU5UX1NIT1ckMSA9IGBzaG93JHtFVkVOVF9LRVkkMX1gO1xuY29uc3QgRVZFTlRfU0hPV04kMSA9IGBzaG93biR7RVZFTlRfS0VZJDF9YDtcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVkkMX0ke0RBVEFfQVBJX0tFWX1gO1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRE9XTl9NRU5VID0gJ2Ryb3Bkb3duLW1lbnUnO1xuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJztcbmNvbnN0IENMQVNTX05BTUVfRkFERSQxID0gJ2ZhZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDEgPSAnc2hvdyc7XG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTiA9ICcuZHJvcGRvd24nO1xuY29uc3QgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAgPSAnLm5hdiwgLmxpc3QtZ3JvdXAnO1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFID0gJy5hY3RpdmUnO1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFX1VMID0gJzpzY29wZSA+IGxpID4gLmFjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cImxpc3RcIl0nO1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnO1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxEID0gJzpzY29wZSA+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRhYiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSQxO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHByZXZpb3VzO1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcy5fZWxlbWVudCk7XG5cbiAgICBjb25zdCBsaXN0RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCk7XG5cbiAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGl0ZW1TZWxlY3RvciA9IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnVUwnIHx8IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnT0wnID8gU0VMRUNUT1JfQUNUSVZFX1VMIDogU0VMRUNUT1JfQUNUSVZFO1xuICAgICAgcHJldmlvdXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKGl0ZW1TZWxlY3RvciwgbGlzdEVsZW1lbnQpO1xuICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBwcmV2aW91cyA/IEV2ZW50SGFuZGxlci50cmlnZ2VyKHByZXZpb3VzLCBFVkVOVF9ISURFJDEsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9KSA6IG51bGw7XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQxLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgIH0pO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8IGhpZGVFdmVudCAhPT0gbnVsbCAmJiBoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJRERFTiQxLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04kMSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKTtcbiAgICB9XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50cyA9IGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnIHx8IGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ09MJykgPyBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRV9VTCwgY29udGFpbmVyKSA6IFNlbGVjdG9yRW5naW5lLmNoaWxkcmVuKGNvbnRhaW5lciwgU0VMRUNUT1JfQUNUSVZFKTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcbiAgICBjb25zdCBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBhY3RpdmUgJiYgYWN0aXZlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUkMSk7XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHRoaXMuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKTtcblxuICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICBhY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckMSk7XG5cbiAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIGVsZW1lbnQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIF90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjaykge1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIGFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgIGNvbnN0IGRyb3Bkb3duQ2hpbGQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRCwgYWN0aXZlLnBhcmVudE5vZGUpO1xuXG4gICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICBkcm9wZG93bkNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSk7XG5cbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmVmbG93KGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQxKSkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQxKTtcbiAgICB9XG5cbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZU5hbWUgPT09ICdMSScpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BET1dOX01FTlUpKSB7XG4gICAgICBjb25zdCBkcm9wZG93bkVsZW1lbnQgPSBlbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pO1xuXG4gICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBkcm9wZG93bkVsZW1lbnQpLmZvckVhY2goZHJvcGRvd24gPT4gZHJvcGRvd24uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSkpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBkYXRhID0gVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XG4gIGRhdGEuc2hvdygpO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuVGFiIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRhYik7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdG9hc3QuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICd0b2FzdCc7XG5jb25zdCBEQVRBX0tFWSA9ICdicy50b2FzdCc7XG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcbmNvbnN0IEVWRU5UX0NMSUNLX0RJU01JU1MgPSBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9NT1VTRU9WRVIgPSBgbW91c2VvdmVyJHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX01PVVNFT1VUID0gYG1vdXNlb3V0JHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX0ZPQ1VTSU4gPSBgZm9jdXNpbiR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9GT0NVU09VVCA9IGBmb2N1c291dCR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfSElEREVOID0gYGhpZGRlbiR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gO1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9ISURFID0gJ2hpZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XSU5HID0gJ3Nob3dpbmcnO1xuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICBhdXRvaGlkZTogJ2Jvb2xlYW4nLFxuICBkZWxheTogJ251bWJlcidcbn07XG5jb25zdCBEZWZhdWx0ID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIGF1dG9oaWRlOiB0cnVlLFxuICBkZWxheTogNTAwMFxufTtcbmNvbnN0IFNFTEVDVE9SX0RBVEFfRElTTUlTUyA9ICdbZGF0YS1icy1kaXNtaXNzPVwidG9hc3RcIl0nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRvYXN0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgIHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gZmFsc2U7XG5cbiAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgfSAvLyBHZXR0ZXJzXG5cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRTtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHNob3coKSB7XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyk7XG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcblxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1dJTkcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pO1xuXG4gICAgICB0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpO1xuICAgIH07XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9ISURFKTtcblxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1dJTkcpO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbik7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURFKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0geyAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX21heWJlU2NoZWR1bGVIaWRlKCkge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSk7XG4gIH1cblxuICBfb25JbnRlcmFjdGlvbihldmVudCwgaXNJbnRlcmFjdGluZykge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICAgICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGlzSW50ZXJhY3Rpbmc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmb2N1c2luJzpcbiAgICAgIGNhc2UgJ2ZvY3Vzb3V0JzpcbiAgICAgICAgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGlzSW50ZXJhY3Rpbmc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpc0ludGVyYWN0aW5nKSB7XG4gICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcblxuICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSBuZXh0RWxlbWVudCB8fCB0aGlzLl9lbGVtZW50LmNvbnRhaW5zKG5leHRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKCk7XG4gIH1cblxuICBfc2V0TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTLCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MsICgpID0+IHRoaXMuaGlkZSgpKTtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVkVSLCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKSk7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFT1VULCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCBmYWxzZSkpO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9GT0NVU0lOLCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKSk7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0ZPQ1VTT1VULCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCBmYWxzZSkpO1xuICB9XG5cbiAgX2NsZWFyVGltZW91dCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRvYXN0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlRvYXN0IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuXG5kZWZpbmVKUXVlcnlQbHVnaW4oVG9hc3QpO1xuXG5leHBvcnQgeyBBbGVydCwgQnV0dG9uLCBDYXJvdXNlbCwgQ29sbGFwc2UsIERyb3Bkb3duLCBNb2RhbCwgT2ZmY2FudmFzLCBQb3BvdmVyLCBTY3JvbGxTcHksIFRhYiwgVG9hc3QsIFRvb2x0aXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBDb250cm9scyB9IGZyb20gXCIuL3VpSGVscGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBTdmdQYWxldHRlRGVzaWduZXIge1xuXG4gICAgcHJvdGVjdGVkIF9zdmc6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgX3N0eWxlOiBIVE1MRWxlbWVudDtcblxuICAgIHByb3RlY3RlZCBfY29sb3JDb3VudCA9IDM7XG4gICAgcHJvdGVjdGVkIF9jb2xvcnM6IHN0cmluZ1tdID0gW107XG4gICAgcHJvdGVjdGVkIF9zZWxlY3RlZENvbG9yID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluaXRDb2xvcnMoKTtcbiAgICAgICAgdGhpcy5pbml0U3ZnKCk7XG5cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VpJyk7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gbmV3IENvbnRyb2xzKHVpKTtcblxuICAgICAgICBjb25zdCBsb2FkU3ZnQnV0dG9uID0gY29udHJvbHMuY3JlYXRlRmlsZUlucHV0KFxuICAgICAgICAgICAgJ2xvYWQgc3ZnJywgJy5zdmcnLCBmYWxzZSk7XG4gICAgICAgIGxvYWRTdmdCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGxvYWRTdmdCdXR0b24uZmlsZXNbMF07XG4gICAgICAgICAgICBpZiAoIWZpbGUpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZFN2ZyhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsb2FkU3ZnQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbG9hZFN2Z0J1dHRvbi52YWx1ZSA9ICcnO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gY29udHJvbHMuY3JlYXRlQWN0aW9uQnV0dG9uKCdzYXZlIHN2ZycpO1xuICAgICAgICBzYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5leHBvcnRTdmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRDb2xvcklucHV0ID0gY29udHJvbHMuY3JlYXRlU2VsZWN0TGlzdElucHV0KFxuICAgICAgICAgICAgJ3NlbGVjdGVkIGNvbG9yJyxcbiAgICAgICAgICAgIHRoaXMuX2NvbG9ycy5tYXAoKGUsIGkpPT4nY29sb3IgJyArIGkudG9TdHJpbmcoKSlcbiAgICAgICAgKTtcbiAgICAgICAgc2VsZWN0ZWRDb2xvcklucHV0LnNlbGVjdGVkSW5kZXggPSB0aGlzLl9zZWxlY3RlZENvbG9yO1xuICAgICAgICBzZWxlY3RlZENvbG9ySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRDb2xvciA9IHNlbGVjdGVkQ29sb3JJbnB1dC5zZWxlY3RlZEluZGV4O1xuICAgICAgICB9KVxuXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jb2xvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5fY29sb3JzW2ldO1xuICAgICAgICAgICAgY29uc3QgY29sb3JJbnB1dCA9IGNvbnRyb2xzLmNyZWF0ZUNvbG9ySW5wdXQoXG4gICAgICAgICAgICAgICAgJ2NvbG9yICcgKyBpICsgJyAtICcgKyBjb2xvcik7XG4gICAgICAgICAgICBjb2xvcklucHV0LnZhbHVlID0gY29sb3I7XG4gICAgICAgICAgICBjb2xvcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbG9ySW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yc1tpXSA9IGNvbG9ySW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgY29sb3JJbnB1dC5sYWJlbHNbMF0uaW5uZXJIVE1MID0gJ2NvbG9yICcgKyBpICsgJyAtICcgKyBjb2xvcklucHV0LnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVDc3MoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHRoaXMuX3N0eWxlKTtcblxuICAgICAgICB0aGlzLmdlbmVyYXRlQ3NzKCk7XG4gICAgfVxuXG4gICAgaW5pdFN2ZygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sb2FkU3ZnKHJlcXVpcmUoJy4uL3N2Zy9leGFtcGxlLnN2Zz9yYXcnKSk7XG4gICAgfVxuXG4gICAgaW5pdENvbG9ycygpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jb2xvckNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjb2xvciA9ICcjJztcbiAgICAgICAgICAgIGZvciAobGV0IGNpID0gMDsgY2kgPCAzOyBjaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXAgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMjU2KSkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgIGNvbXAgKz0gY29tcC5sZW5ndGggPCAyID8gJzAnIDogJyc7XG4gICAgICAgICAgICAgICAgY29sb3IgKz0gY29tcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NvbG9ycy5wdXNoKGNvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlQ3NzKCk6IHZvaWQge1xuICAgICAgICBsZXQgY3NzID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMuX2NvbG9yc1tpXTtcbiAgICAgICAgICAgIGNzcyArPSBgLmNvbG9yJHtpfXtmaWxsOiAke2NvbG9yfSAhaW1wb3J0YW50fSBgO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coY3NzKTtcbiAgICAgICAgdGhpcy5fc3R5bGUuaW5uZXJIVE1MID0gY3NzO1xuICAgIH1cblxuICAgIGxvYWRTdmcoc3ZnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fc3ZnID0gc3ZnO1xuXG4gICAgICAgIGNvbnN0IHN2Z1ByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3ZnUHJldmlldycpO1xuICAgICAgICBzdmdQcmV2aWV3LmlubmVySFRNTCA9IHN2ZztcblxuICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gc3ZnUHJldmlldy5jaGlsZHJlblswXSBhcyBTVkdFbGVtZW50O1xuICAgICAgICBzdmdFbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBzdmdFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcblxuICAgICAgICB0aGlzLmFkZENsaWNrTGlzdGVuZXJzKHN2Z0VsZW1lbnQpO1xuICAgIH1cblxuICAgIGV4cG9ydFN2ZygpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc3ZnUHJldmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdmdQcmV2aWV3Jyk7XG4gICAgICAgIGNvbnN0IHN2Z1N0cmluZyA9IHN2Z1ByZXZpZXcuaW5uZXJIVE1MO1xuICAgICAgICBjb25zb2xlLmxvZyhzdmdTdHJpbmcpO1xuXG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsICdkYXRhOnRleHQvcGxhaW47Y2hhcnNldD11dGYtOCwnXG4gICAgICAgICAgICArIGVuY29kZVVSSUNvbXBvbmVudChzdmdTdHJpbmcpKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgJ2ZpbGUuc3ZnJyk7XG5cbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICAgIGVsZW1lbnQuY2xpY2soKTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGFkZENsaWNrTGlzdGVuZXJzKGVsZW1lbnQ6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvck5hbWUgPSAnY29sb3InICsgaTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLl9jb2xvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IHRoaXMuX3NlbGVjdGVkQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb2xvck5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNvbG9yTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBlbGVtZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENsaWNrTGlzdGVuZXJzKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCc7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9scyB7XG5cbiAgICBwcm90ZWN0ZWQgX2NvbnRyb2xzRWxlbWVudDogSFRNTEZvcm1FbGVtZW50O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcj86IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGNvbnRhaW5lcik7XG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbHMtY29udGFpbmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29udHJvbHNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgICAgICB0aGlzLl9jb250cm9sc0VsZW1lbnQub25zdWJtaXQgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jb250cm9sc0VsZW1lbnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlR2VuZXJpY1JhbmdlZElucHV0KFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICB0eXBlOiBzdHJpbmcsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJycsXG4gICAgICAgIHZhbHVlPzogbnVtYmVyLFxuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyxcbiAgICAgICAgbWluPzogbnVtYmVyLFxuICAgICAgICBtYXg/OiBudW1iZXIsXG4gICAgICAgIHN0ZXA/OiBudW1iZXIsXG4gICAgICAgIGlkPzogc3RyaW5nXG4gICAgKTogSFRNTElucHV0RWxlbWVudCB7XG4gICAgICAgIGNvbnN0IHJhbmdlZElucHV0ID0gdGhpcy5jcmVhdGVHZW5lcmljSW5wdXQoXG4gICAgICAgICAgICBsYWJlbCwgdHlwZSwgcGxhY2Vob2xkZXIsIGRlc2NyaXB0aW9uLCBpZCk7XG4gICAgICAgIHJhbmdlZElucHV0Lm1pbiA9IFN0cmluZyhtaW4pO1xuICAgICAgICByYW5nZWRJbnB1dC5tYXggPSBTdHJpbmcobWF4KTtcbiAgICAgICAgcmFuZ2VkSW5wdXQuc3RlcCA9IFN0cmluZyhzdGVwKTtcbiAgICAgICAgcmFuZ2VkSW5wdXQudmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICByZXR1cm4gcmFuZ2VkSW5wdXQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUxhYmVsKFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBodG1sRm9yOiBzdHJpbmdcbiAgICApOiBIVE1MTGFiZWxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgbGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgbGFiZWxFbGVtZW50Lmh0bWxGb3IgPSBodG1sRm9yO1xuICAgICAgICBsYWJlbEVsZW1lbnQuaW5uZXJUZXh0ID0gbGFiZWw7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xzRWxlbWVudC5hcHBlbmRDaGlsZChsYWJlbEVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gbGFiZWxFbGVtZW50O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjcmVhdGVEZXNjcmlwdGlvbihcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZ1xuICAgICk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3Qgc21hbGxJZCA9IHV1aWQoKTtcbiAgICAgICAgY29uc3Qgc21hbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc21hbGwnKTtcbiAgICAgICAgc21hbGxFbGVtZW50LmNsYXNzTmFtZSA9ICdmb3JtLXRleHQgdGV4dC1tdXRlZCc7XG4gICAgICAgIHNtYWxsRWxlbWVudC5pbm5lclRleHQgPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgc21hbGxFbGVtZW50LmlkID0gc21hbGxJZDtcbiAgICAgICAgdGhpcy5fY29udHJvbHNFbGVtZW50LmFwcGVuZENoaWxkKHNtYWxsRWxlbWVudCk7XG4gICAgICAgIHJldHVybiBzbWFsbEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUlucHV0KFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBjcmVhdGVNYWluRWxlbWVudDogKCkgPT4gSFRNTEVsZW1lbnQsXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICAgICAgICBpZD86IHN0cmluZ1xuICAgICk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgaWQgPSB1dWlkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTGFiZWwobGFiZWwsIGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGNyZWF0ZU1haW5FbGVtZW50KCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5pZCA9IGlkO1xuICAgICAgICB0aGlzLl9jb250cm9sc0VsZW1lbnQuYXBwZW5kQ2hpbGQoaW5wdXRFbGVtZW50KTtcblxuICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHNtYWxsRWxlbWVudCA9IHRoaXMuY3JlYXRlRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHNtYWxsRWxlbWVudC5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVBY3Rpb25CdXR0b24oXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICAgICAgICBpZD86IHN0cmluZ1xuICAgICk6IEhUTUxCdXR0b25FbGVtZW50IHtcbiAgICAgICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IHRoaXMuY3JlYXRlR2VuZXJpY0lucHV0KFxuICAgICAgICAgICAgdW5kZWZpbmVkLCAnYnV0dG9uJywgdW5kZWZpbmVkLCBkZXNjcmlwdGlvbiwgaWQpO1xuICAgICAgICBidXR0b25FbGVtZW50LnZhbHVlID0gbGFiZWw7XG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYnRuJyk7XG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYnRuLXByaW1hcnknKTtcblxuICAgICAgICByZXR1cm4gYnV0dG9uRWxlbWVudCBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlR2VuZXJpY0lucHV0KFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICB0eXBlID0gJ3RleHQnLFxuICAgICAgICBwbGFjZWhvbGRlciA9ICcnLFxuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyxcbiAgICAgICAgaWQ/OiBzdHJpbmdcbiAgICApOiBIVE1MSW5wdXRFbGVtZW50IHtcbiAgICAgICAgY29uc3QgY3JlYXRlTWFpbkVsZW1lbnQgPSAoKTogSFRNTElucHV0RWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LmlkID0gaWQ7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NOYW1lID0gJ2Zvcm0tY29udHJvbCc7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzRWxlbWVudC5hcHBlbmRDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVJbnB1dChsYWJlbCwgY3JlYXRlTWFpbkVsZW1lbnQsIGRlc2NyaXB0aW9uLCBpZCk7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVTZWxlY3RMaXN0SW5wdXQoXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIG9wdGlvbnM6IHN0cmluZ1tdLFxuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyxcbiAgICAgICAgaWQ/OiBzdHJpbmdcbiAgICApOiBIVE1MU2VsZWN0RWxlbWVudCB7XG5cbiAgICAgICAgY29uc3QgY3JlYXRlTWFpbkVsZW1lbnQgPSAoKTogSFRNTFNlbGVjdEVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5pZCA9IGlkO1xuICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5jbGFzc05hbWUgPSAnZm9ybS1jb250cm9sJztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzRWxlbWVudC5hcHBlbmRDaGlsZChzZWxlY3RFbGVtZW50KTtcblxuICAgICAgICAgICAgb3B0aW9ucy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQuaW5uZXJIVE1MID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZENoaWxkKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0RWxlbWVudDtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVJbnB1dChsYWJlbCwgY3JlYXRlTWFpbkVsZW1lbnQsIGRlc2NyaXB0aW9uLCBpZCk7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudCBhcyBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlVGV4dElucHV0KFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBwbGFjZWhvbGRlciA9ICcnLFxuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyxcbiAgICAgICAgaWQ/OiBzdHJpbmdcbiAgICApOiBIVE1MSW5wdXRFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR2VuZXJpY0lucHV0KFxuICAgICAgICAgICAgbGFiZWwsICd0ZXh0JywgcGxhY2Vob2xkZXIsIGRlc2NyaXB0aW9uLCBpZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZUNvbG9ySW5wdXQoXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJycsXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICAgICAgICBpZD86IHN0cmluZ1xuICAgICk6IEhUTUxJbnB1dEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVHZW5lcmljSW5wdXQoXG4gICAgICAgICAgICBsYWJlbCwgJ2NvbG9yJywgcGxhY2Vob2xkZXIsIGRlc2NyaXB0aW9uLCBpZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZU51bWJlcklucHV0KFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBwbGFjZWhvbGRlciA9ICcnLFxuICAgICAgICB2YWx1ZT86IG51bWJlcixcbiAgICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gICAgICAgIG1pbj86IG51bWJlcixcbiAgICAgICAgbWF4PzogbnVtYmVyLFxuICAgICAgICBzdGVwPzogbnVtYmVyLFxuICAgICAgICBpZD86IHN0cmluZ1xuICAgICk6IEhUTUxJbnB1dEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVHZW5lcmljUmFuZ2VkSW5wdXQoXG4gICAgICAgICAgICBsYWJlbCwgJ251bWJlcicsIHBsYWNlaG9sZGVyLCB2YWx1ZSwgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBtaW4sIG1heCwgc3RlcCwgaWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVTbGlkZXJJbnB1dChcbiAgICAgICAgbGFiZWw6IHN0cmluZyxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSAnJyxcbiAgICAgICAgdmFsdWU/OiBudW1iZXIsXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICAgICAgICBtaW4/OiBudW1iZXIsXG4gICAgICAgIG1heD86IG51bWJlcixcbiAgICAgICAgc3RlcD86IG51bWJlcixcbiAgICAgICAgaWQ/OiBzdHJpbmdcbiAgICApOiBIVE1MSW5wdXRFbGVtZW50IHtcbiAgICAgICAgY29uc3Qgc2xpZGVySW5wdXQgPSB0aGlzLmNyZWF0ZUdlbmVyaWNSYW5nZWRJbnB1dChcbiAgICAgICAgICAgIGxhYmVsLCAncmFuZ2UnLCBwbGFjZWhvbGRlciwgdmFsdWUsIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbWluLCBtYXgsIHN0ZXAsIGlkKTtcbiAgICAgICAgc2xpZGVySW5wdXQuY2xhc3NMaXN0LmFkZCgnY3VzdG9tLXJhbmdlJyk7XG4gICAgICAgIHJldHVybiBzbGlkZXJJbnB1dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRmlsZUlucHV0KFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBhY2NlcHQ/OiBzdHJpbmcsXG4gICAgICAgIG11bHRpcGxlID0gZmFsc2UsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJycsXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICAgICAgICBpZD86IHN0cmluZ1xuICAgICk6IEhUTUxJbnB1dEVsZW1lbnQge1xuICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSB0aGlzLmNyZWF0ZUdlbmVyaWNJbnB1dChcbiAgICAgICAgICAgIGxhYmVsLCAnZmlsZScsIHBsYWNlaG9sZGVyLCBkZXNjcmlwdGlvbiwgaWQpO1xuICAgICAgICBmaWxlSW5wdXQuYWNjZXB0ID0gYWNjZXB0O1xuICAgICAgICBmaWxlSW5wdXQubXVsdGlwbGUgPSBtdWx0aXBsZTtcblxuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZmlsZUlucHV0V3JhcHBlcicpO1xuICAgICAgICBmaWxlSW5wdXQucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQod3JhcHBlciwgZmlsZUlucHV0KTtcblxuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmNyZWF0ZUFjdGlvbkJ1dHRvbignRGF0ZWkgYXVzd8OkaGxlbicpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZmlsZUlucHV0KTtcblxuICAgICAgICBidXR0b24ub25jbGljayA9ICgpID0+IGZpbGVJbnB1dC5jbGljaygpO1xuICAgICAgICBmaWxlSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBidXR0b24udmFsdWUgPSBBcnJheS5mcm9tKGZpbGVJbnB1dC5maWxlcylcbiAgICAgICAgICAgICAgICAubWFwKChmaWxlKSA9PiBmaWxlLm5hbWUpXG4gICAgICAgICAgICAgICAgLmpvaW4oJzsgJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZpbGVJbnB1dDtcbiAgICB9XG59XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbnZhciBnZXRSYW5kb21WYWx1ZXM7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbiAgICAvLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykgfHwgdHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG52YXIgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7IC8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG5cbnZhciBfY2xvY2tzZXE7IC8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxuXG5cbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDsgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcblxuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOyAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcblxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuICAgIH1cblxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfSAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cblxuXG4gIHZhciBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpOyAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG5cbiAgdmFyIG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxOyAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG5cbiAgdmFyIGR0ID0gbXNlY3MgLSBfbGFzdE1TZWNzICsgKG5zZWNzIC0gX2xhc3ROU2VjcykgLyAxMDAwMDsgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvblxuXG4gIGlmIChkdCA8IDAgJiYgb3B0aW9ucy5jbG9ja3NlcSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2xvY2tzZXEgPSBjbG9ja3NlcSArIDEgJiAweDNmZmY7XG4gIH0gLy8gUmVzZXQgbnNlY3MgaWYgY2xvY2sgcmVncmVzc2VzIChuZXcgY2xvY2tzZXEpIG9yIHdlJ3ZlIG1vdmVkIG9udG8gYSBuZXdcbiAgLy8gdGltZSBpbnRlcnZhbFxuXG5cbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH0gLy8gUGVyIDQuMi4xLjIgVGhyb3cgZXJyb3IgaWYgdG9vIG1hbnkgdXVpZHMgYXJlIHJlcXVlc3RlZFxuXG5cbiAgaWYgKG5zZWNzID49IDEwMDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXVpZC52MSgpOiBDYW4ndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWNcIik7XG4gIH1cblxuICBfbGFzdE1TZWNzID0gbXNlY3M7XG4gIF9sYXN0TlNlY3MgPSBuc2VjcztcbiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7IC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuXG4gIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwOyAvLyBgdGltZV9sb3dgXG5cbiAgdmFyIHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjsgLy8gYHRpbWVfbWlkYFxuXG4gIHZhciB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG5cbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmOyAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcblxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YFxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjsgLy8gYG5vZGVgXG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IHN0cmluZ2lmeShiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjE7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgdmFyIHY7XG4gIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxNik7IC8vIFBhcnNlICMjIyMjIyMjLS4uLi4tLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFyclswXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgwLCA4KSwgMTYpKSA+Pj4gMjQ7XG4gIGFyclsxXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzJdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclszXSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0jIyMjLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoOSwgMTMpLCAxNikpID4+PiA4O1xuICBhcnJbNV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0jIyMjLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzZdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxOCksIDE2KSkgPj4+IDg7XG4gIGFycls3XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tIyMjIy0uLi4uLi4uLi4uLi5cblxuICBhcnJbOF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTksIDIzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzldID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0uLi4uLSMjIyMjIyMjIyMjI1xuICAvLyAoVXNlIFwiL1wiIHRvIGF2b2lkIDMyLWJpdCB0cnVuY2F0aW9uIHdoZW4gYml0LXNoaWZ0aW5nIGhpZ2gtb3JkZXIgYnl0ZXMpXG5cbiAgYXJyWzEwXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgyNCwgMzYpLCAxNikpIC8gMHgxMDAwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMV0gPSB2IC8gMHgxMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTJdID0gdiA+Pj4gMjQgJiAweGZmO1xuICBhcnJbMTNdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMTRdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclsxNV0gPSB2ICYgMHhmZjtcbiAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7IiwiaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcblxuICB2YXIgYnl0ZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgdmFyIEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IHZhciBVUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uLCBoYXNoZnVuYykge1xuICBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQodmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWVzcGFjZSA9IHBhcnNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVzcGFjZS5sZW5ndGggIT09IDE2KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ05hbWVzcGFjZSBtdXN0IGJlIGFycmF5LWxpa2UgKDE2IGl0ZXJhYmxlIGludGVnZXIgdmFsdWVzLCAwLTI1NSknKTtcbiAgICB9IC8vIENvbXB1dGUgaGFzaCBvZiBuYW1lc3BhY2UgYW5kIHZhbHVlLCBQZXIgNC4zXG4gICAgLy8gRnV0dXJlOiBVc2Ugc3ByZWFkIHN5bnRheCB3aGVuIHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1zLCBlLmcuIGBieXRlcyA9XG4gICAgLy8gaGFzaGZ1bmMoWy4uLm5hbWVzcGFjZSwgLi4uIHZhbHVlXSlgXG5cblxuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWUubGVuZ3RoKTtcbiAgICBieXRlcy5zZXQobmFtZXNwYWNlKTtcbiAgICBieXRlcy5zZXQodmFsdWUsIG5hbWVzcGFjZS5sZW5ndGgpO1xuICAgIGJ5dGVzID0gaGFzaGZ1bmMoYnl0ZXMpO1xuICAgIGJ5dGVzWzZdID0gYnl0ZXNbNl0gJiAweDBmIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IGJ5dGVzWzhdICYgMHgzZiB8IDB4ODA7XG5cbiAgICBpZiAoYnVmKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmdpZnkoYnl0ZXMpO1xuICB9IC8vIEZ1bmN0aW9uI25hbWUgaXMgbm90IHNldHRhYmxlIG9uIHNvbWUgcGxhdGZvcm1zICgjMjcwKVxuXG5cbiAgdHJ5IHtcbiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICB9IGNhdGNoIChlcnIpIHt9IC8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG5cblxuICBnZW5lcmF0ZVVVSUQuRE5TID0gRE5TO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gVVJMO1xuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufSIsIi8qXG4gKiBCcm93c2VyLWNvbXBhdGlibGUgSmF2YVNjcmlwdCBNRDVcbiAqXG4gKiBNb2RpZmljYXRpb24gb2YgSmF2YVNjcmlwdCBNRDVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL0phdmFTY3JpcHQtTUQ1XG4gKlxuICogQ29weXJpZ2h0IDIwMTEsIFNlYmFzdGlhbiBUc2NoYW5cbiAqIGh0dHBzOi8vYmx1ZWltcC5uZXRcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqIEJhc2VkIG9uXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3VyaXR5LCBJbmMuIE1ENSBNZXNzYWdlXG4gKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLlxuICogVmVyc2lvbiAyLjIgQ29weXJpZ2h0IChDKSBQYXVsIEpvaG5zdG9uIDE5OTkgLSAyMDA5XG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cbmZ1bmN0aW9uIG1kNShieXRlcykge1xuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIHZhciBtc2cgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYnl0ZXMpKTsgLy8gVVRGOCBlc2NhcGVcblxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobXNnLmxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7ICsraSkge1xuICAgICAgYnl0ZXNbaV0gPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWQ1VG9IZXhFbmNvZGVkQXJyYXkod29yZHNUb01kNShieXRlc1RvV29yZHMoYnl0ZXMpLCBieXRlcy5sZW5ndGggKiA4KSk7XG59XG4vKlxuICogQ29udmVydCBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzIHRvIGFuIGFycmF5IG9mIGJ5dGVzXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVUb0hleEVuY29kZWRBcnJheShpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBsZW5ndGgzMiA9IGlucHV0Lmxlbmd0aCAqIDMyO1xuICB2YXIgaGV4VGFiID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoMzI7IGkgKz0gOCkge1xuICAgIHZhciB4ID0gaW5wdXRbaSA+PiA1XSA+Pj4gaSAlIDMyICYgMHhmZjtcbiAgICB2YXIgaGV4ID0gcGFyc2VJbnQoaGV4VGFiLmNoYXJBdCh4ID4+PiA0ICYgMHgwZikgKyBoZXhUYWIuY2hhckF0KHggJiAweDBmKSwgMTYpO1xuICAgIG91dHB1dC5wdXNoKGhleCk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgb3V0cHV0IGxlbmd0aCB3aXRoIHBhZGRpbmcgYW5kIGJpdCBsZW5ndGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aDgpIHtcbiAgcmV0dXJuIChpbnB1dExlbmd0aDggKyA2NCA+Pj4gOSA8PCA0KSArIDE0ICsgMTtcbn1cbi8qXG4gKiBDYWxjdWxhdGUgdGhlIE1ENSBvZiBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoLlxuICovXG5cblxuZnVuY3Rpb24gd29yZHNUb01kNSh4LCBsZW4pIHtcbiAgLyogYXBwZW5kIHBhZGRpbmcgKi9cbiAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCBsZW4gJSAzMjtcbiAgeFtnZXRPdXRwdXRMZW5ndGgobGVuKSAtIDFdID0gbGVuO1xuICB2YXIgYSA9IDE3MzI1ODQxOTM7XG4gIHZhciBiID0gLTI3MTczMzg3OTtcbiAgdmFyIGMgPSAtMTczMjU4NDE5NDtcbiAgdmFyIGQgPSAyNzE3MzM4Nzg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikge1xuICAgIHZhciBvbGRhID0gYTtcbiAgICB2YXIgb2xkYiA9IGI7XG4gICAgdmFyIG9sZGMgPSBjO1xuICAgIHZhciBvbGRkID0gZDtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpXSwgNywgLTY4MDg3NjkzNik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDFdLCAxMiwgLTM4OTU2NDU4Nik7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNywgNjA2MTA1ODE5KTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgM10sIDIyLCAtMTA0NDUyNTMzMCk7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDRdLCA3LCAtMTc2NDE4ODk3KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgNV0sIDEyLCAxMjAwMDgwNDI2KTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDddLCAyMiwgLTQ1NzA1OTgzKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgOF0sIDcsIDE3NzAwMzU0MTYpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNywgLTQyMDYzKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyAxMl0sIDcsIDE4MDQ2MDM2ODIpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxM10sIDEyLCAtNDAzNDExMDEpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDE1XSwgMjIsIDEyMzY1MzUzMjkpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNSwgLTE2NTc5NjUxMCk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDZdLCA5LCAtMTA2OTUwMTYzMik7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTQsIDY0MzcxNzcxMyk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaV0sIDIwLCAtMzczODk3MzAyKTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgNV0sIDUsIC03MDE1NTg2OTEpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAxMF0sIDksIDM4MDE2MDgzKTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgMTVdLCAxNCwgLTY2MDQ3ODMzNSk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDRdLCAyMCwgLTQwNTUzNzg0OCk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDldLCA1LCA1Njg0NDY0MzgpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAxNF0sIDksIC0xMDE5ODAzNjkwKTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgM10sIDE0LCAtMTg3MzYzOTYxKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgOF0sIDIwLCAxMTYzNTMxNTAxKTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMTNdLCA1LCAtMTQ0NDY4MTQ2Nyk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDJdLCA5LCAtNTE0MDM3ODQpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTQsIDE3MzUzMjg0NzMpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyAxMl0sIDIwLCAtMTkyNjYwNzczNCk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA0LCAtMzc4NTU4KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTYsIDE4MzkwMzA1NjIpO1xuICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxNF0sIDIzLCAtMzUzMDk1NTYpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNCwgLTE1MzA5OTIwNjApO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyA0XSwgMTEsIDEyNzI4OTMzNTMpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTYsIC0xNTU0OTc2MzIpO1xuICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxMF0sIDIzLCAtMTA5NDczMDY0MCk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNCwgNjgxMjc5MTc0KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpXSwgMTEsIC0zNTg1MzcyMjIpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xuICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyA2XSwgMjMsIDc2MDI5MTg5KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgOV0sIDQsIC02NDAzNjQ0ODcpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyAxMl0sIDExLCAtNDIxODE1ODM1KTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTVdLCAxNiwgNTMwNzQyNTIwKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMl0sIDIzLCAtOTk1MzM4NjUxKTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpXSwgNiwgLTE5ODYzMDg0NCk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDddLCAxMCwgMTEyNjg5MTQxNSk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTUsIC0xNDE2MzU0OTA1KTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgNV0sIDIxLCAtNTc0MzQwNTUpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyAxMl0sIDYsIDE3MDA0ODU1NzEpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNSwgLTEwNTE1MjMpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxXSwgMjEsIC0yMDU0OTIyNzk5KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgOF0sIDYsIDE4NzMzMTMzNTkpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxNV0sIDEwLCAtMzA2MTE3NDQpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyA2XSwgMTUsIC0xNTYwMTk4MzgwKTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMTNdLCAyMSwgMTMwOTE1MTY0OSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDRdLCA2LCAtMTQ1NTIzMDcwKTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTFdLCAxMCwgLTExMjAyMTAzNzkpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTUsIDcxODc4NzI1OSk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDldLCAyMSwgLTM0MzQ4NTU1MSk7XG4gICAgYSA9IHNhZmVBZGQoYSwgb2xkYSk7XG4gICAgYiA9IHNhZmVBZGQoYiwgb2xkYik7XG4gICAgYyA9IHNhZmVBZGQoYywgb2xkYyk7XG4gICAgZCA9IHNhZmVBZGQoZCwgb2xkZCk7XG4gIH1cblxuICByZXR1cm4gW2EsIGIsIGMsIGRdO1xufVxuLypcbiAqIENvbnZlcnQgYW4gYXJyYXkgYnl0ZXMgdG8gYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3Jkc1xuICogQ2hhcmFjdGVycyA+MjU1IGhhdmUgdGhlaXIgaGlnaC1ieXRlIHNpbGVudGx5IGlnbm9yZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBieXRlc1RvV29yZHMoaW5wdXQpIHtcbiAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBsZW5ndGg4ID0gaW5wdXQubGVuZ3RoICogODtcbiAgdmFyIG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgobGVuZ3RoOCkpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoODsgaSArPSA4KSB7XG4gICAgb3V0cHV0W2kgPj4gNV0gfD0gKGlucHV0W2kgLyA4XSAmIDB4ZmYpIDw8IGkgJSAzMjtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4vKlxuICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNhZmVBZGQoeCwgeSkge1xuICB2YXIgbHN3ID0gKHggJiAweGZmZmYpICsgKHkgJiAweGZmZmYpO1xuICB2YXIgbXN3ID0gKHggPj4gMTYpICsgKHkgPj4gMTYpICsgKGxzdyA+PiAxNik7XG4gIHJldHVybiBtc3cgPDwgMTYgfCBsc3cgJiAweGZmZmY7XG59XG4vKlxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICovXG5cblxuZnVuY3Rpb24gYml0Um90YXRlTGVmdChudW0sIGNudCkge1xuICByZXR1cm4gbnVtIDw8IGNudCB8IG51bSA+Pj4gMzIgLSBjbnQ7XG59XG4vKlxuICogVGhlc2UgZnVuY3Rpb25zIGltcGxlbWVudCB0aGUgZm91ciBiYXNpYyBvcGVyYXRpb25zIHRoZSBhbGdvcml0aG0gdXNlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1kNWNtbihxLCBhLCBiLCB4LCBzLCB0KSB7XG4gIHJldHVybiBzYWZlQWRkKGJpdFJvdGF0ZUxlZnQoc2FmZUFkZChzYWZlQWRkKGEsIHEpLCBzYWZlQWRkKHgsIHQpKSwgcyksIGIpO1xufVxuXG5mdW5jdGlvbiBtZDVmZihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYiAmIGMgfCB+YiAmIGQsIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5mdW5jdGlvbiBtZDVnZyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYiAmIGQgfCBjICYgfmQsIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5mdW5jdGlvbiBtZDVoaChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aWkoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGMgXiAoYiB8IH5kKSwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1kNTsiLCJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBtZDUgZnJvbSAnLi9tZDUuanMnO1xudmFyIHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCIvLyBBZGFwdGVkIGZyb20gQ2hyaXMgVmVuZXNzJyBTSEExIGNvZGUgYXRcbi8vIGh0dHA6Ly93d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvc2hhMS5odG1sXG5mdW5jdGlvbiBmKHMsIHgsIHksIHopIHtcbiAgc3dpdGNoIChzKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIHggJiB5IF4gfnggJiB6O1xuXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiB4ICYgeSBeIHggJiB6IF4geSAmIHo7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuICB9XG59XG5cbmZ1bmN0aW9uIFJPVEwoeCwgbikge1xuICByZXR1cm4geCA8PCBuIHwgeCA+Pj4gMzIgLSBuO1xufVxuXG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIHZhciBLID0gWzB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4Y2E2MmMxZDZdO1xuICB2YXIgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcblxuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIHZhciBtc2cgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYnl0ZXMpKTsgLy8gVVRGOCBlc2NhcGVcblxuICAgIGJ5dGVzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7ICsraSkge1xuICAgICAgYnl0ZXMucHVzaChtc2cuY2hhckNvZGVBdChpKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIC8vIENvbnZlcnQgQXJyYXktbGlrZSB0byBBcnJheVxuICAgIGJ5dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnl0ZXMpO1xuICB9XG5cbiAgYnl0ZXMucHVzaCgweDgwKTtcbiAgdmFyIGwgPSBieXRlcy5sZW5ndGggLyA0ICsgMjtcbiAgdmFyIE4gPSBNYXRoLmNlaWwobCAvIDE2KTtcbiAgdmFyIE0gPSBuZXcgQXJyYXkoTik7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IE47ICsrX2kpIHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQzMkFycmF5KDE2KTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgYXJyW2pdID0gYnl0ZXNbX2kgKiA2NCArIGogKiA0XSA8PCAyNCB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDFdIDw8IDE2IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgMl0gPDwgOCB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDNdO1xuICAgIH1cblxuICAgIE1bX2ldID0gYXJyO1xuICB9XG5cbiAgTVtOIC0gMV1bMTRdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAvIE1hdGgucG93KDIsIDMyKTtcbiAgTVtOIC0gMV1bMTRdID0gTWF0aC5mbG9vcihNW04gLSAxXVsxNF0pO1xuICBNW04gLSAxXVsxNV0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4ICYgMHhmZmZmZmZmZjtcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBOOyArK19pMikge1xuICAgIHZhciBXID0gbmV3IFVpbnQzMkFycmF5KDgwKTtcblxuICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMTY7ICsrdCkge1xuICAgICAgV1t0XSA9IE1bX2kyXVt0XTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfdCA9IDE2OyBfdCA8IDgwOyArK190KSB7XG4gICAgICBXW190XSA9IFJPVEwoV1tfdCAtIDNdIF4gV1tfdCAtIDhdIF4gV1tfdCAtIDE0XSBeIFdbX3QgLSAxNl0sIDEpO1xuICAgIH1cblxuICAgIHZhciBhID0gSFswXTtcbiAgICB2YXIgYiA9IEhbMV07XG4gICAgdmFyIGMgPSBIWzJdO1xuICAgIHZhciBkID0gSFszXTtcbiAgICB2YXIgZSA9IEhbNF07XG5cbiAgICBmb3IgKHZhciBfdDIgPSAwOyBfdDIgPCA4MDsgKytfdDIpIHtcbiAgICAgIHZhciBzID0gTWF0aC5mbG9vcihfdDIgLyAyMCk7XG4gICAgICB2YXIgVCA9IFJPVEwoYSwgNSkgKyBmKHMsIGIsIGMsIGQpICsgZSArIEtbc10gKyBXW190Ml0gPj4+IDA7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gVDtcbiAgICB9XG5cbiAgICBIWzBdID0gSFswXSArIGEgPj4+IDA7XG4gICAgSFsxXSA9IEhbMV0gKyBiID4+PiAwO1xuICAgIEhbMl0gPSBIWzJdICsgYyA+Pj4gMDtcbiAgICBIWzNdID0gSFszXSArIGQgPj4+IDA7XG4gICAgSFs0XSA9IEhbNF0gKyBlID4+PiAwO1xuICB9XG5cbiAgcmV0dXJuIFtIWzBdID4+IDI0ICYgMHhmZiwgSFswXSA+PiAxNiAmIDB4ZmYsIEhbMF0gPj4gOCAmIDB4ZmYsIEhbMF0gJiAweGZmLCBIWzFdID4+IDI0ICYgMHhmZiwgSFsxXSA+PiAxNiAmIDB4ZmYsIEhbMV0gPj4gOCAmIDB4ZmYsIEhbMV0gJiAweGZmLCBIWzJdID4+IDI0ICYgMHhmZiwgSFsyXSA+PiAxNiAmIDB4ZmYsIEhbMl0gPj4gOCAmIDB4ZmYsIEhbMl0gJiAweGZmLCBIWzNdID4+IDI0ICYgMHhmZiwgSFszXSA+PiAxNiAmIDB4ZmYsIEhbM10gPj4gOCAmIDB4ZmYsIEhbM10gJiAweGZmLCBIWzRdID4+IDI0ICYgMHhmZiwgSFs0XSA+PiAxNiAmIDB4ZmYsIEhbNF0gPj4gOCAmIDB4ZmYsIEhbNF0gJiAweGZmXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhMTsiLCJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBzaGExIGZyb20gJy4vc2hhMS5qcyc7XG52YXIgdjUgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG5leHBvcnQgZGVmYXVsdCB2NTsiLCJleHBvcnQgZGVmYXVsdCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh1dWlkLnN1YnN0cigxNCwgMSksIDE2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbjsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCAnYm9vdHN0cmFwJztcbmltcG9ydCB7IFN2Z1BhbGV0dGVEZXNpZ25lciB9IGZyb20gJy4vU3ZnUGFsZXR0ZURlc2lnbmVyJztcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgbmV3IFN2Z1BhbGV0dGVEZXNpZ25lcigpO1xufSkiXSwic291cmNlUm9vdCI6IiJ9