/*! For license information please see main.js.LICENSE.txt */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var i in n)("object"==typeof exports?exports:t)[i]=n[i]}}(self,(function(){return(()=>{"use strict";var t={169:(t,e,n)=>{n.r(e),n.d(e,{Alert:()=>be,Button:()=>we,Carousel:()=>Re,Collapse:()=>Ke,Dropdown:()=>pn,Modal:()=>Rn,Offcanvas:()=>zn,Popover:()=>_i,ScrollSpy:()=>Ai,Tab:()=>xi,Toast:()=>Pi,Tooltip:()=>di});var i={};n.r(i),n.d(i,{afterMain:()=>A,afterRead:()=>y,afterWrite:()=>k,applyStyles:()=>N,arrow:()=>G,auto:()=>l,basePlacements:()=>c,beforeMain:()=>w,beforeRead:()=>v,beforeWrite:()=>T,bottom:()=>o,clippingParents:()=>u,computeStyles:()=>tt,createPopper:()=>It,createPopperBase:()=>xt,createPopperLite:()=>Dt,detectOverflow:()=>gt,end:()=>h,eventListeners:()=>nt,flip:()=>_t,hide:()=>yt,left:()=>a,main:()=>E,modifierPhases:()=>O,offset:()=>wt,placements:()=>_,popper:()=>p,popperGenerator:()=>Lt,popperOffsets:()=>Et,preventOverflow:()=>At,read:()=>b,reference:()=>m,right:()=>r,start:()=>d,top:()=>s,variationPlacements:()=>g,viewport:()=>f,write:()=>C});var s="top",o="bottom",r="right",a="left",l="auto",c=[s,o,r,a],d="start",h="end",u="clippingParents",f="viewport",p="popper",m="reference",g=c.reduce((function(t,e){return t.concat([e+"-"+d,e+"-"+h])}),[]),_=[].concat(c,[l]).reduce((function(t,e){return t.concat([e,e+"-"+d,e+"-"+h])}),[]),v="beforeRead",b="read",y="afterRead",w="beforeMain",E="main",A="afterMain",T="beforeWrite",C="write",k="afterWrite",O=[v,b,y,w,E,A,T,C,k];function L(t){return t?(t.nodeName||"").toLowerCase():null}function x(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function I(t){return t instanceof x(t).Element||t instanceof Element}function D(t){return t instanceof x(t).HTMLElement||t instanceof HTMLElement}function S(t){return"undefined"!=typeof ShadowRoot&&(t instanceof x(t).ShadowRoot||t instanceof ShadowRoot)}const N={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},s=e.elements[t];D(s)&&L(s)&&(Object.assign(s.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});D(i)&&L(i)&&(Object.assign(i.style,o),Object.keys(s).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function M(t){return t.split("-")[0]}function j(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height,top:e.top,right:e.right,bottom:e.bottom,left:e.left,x:e.left,y:e.top}}function P(t){var e=j(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function R(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&S(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function H(t){return x(t).getComputedStyle(t)}function B(t){return["table","td","th"].indexOf(L(t))>=0}function $(t){return((I(t)?t.ownerDocument:t.document)||window.document).documentElement}function W(t){return"html"===L(t)?t:t.assignedSlot||t.parentNode||(S(t)?t.host:null)||$(t)}function U(t){return D(t)&&"fixed"!==H(t).position?t.offsetParent:null}function q(t){for(var e=x(t),n=U(t);n&&B(n)&&"static"===H(n).position;)n=U(n);return n&&("html"===L(n)||"body"===L(n)&&"static"===H(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&D(t)&&"fixed"===H(t).position)return null;for(var n=W(t);D(n)&&["html","body"].indexOf(L(n))<0;){var i=H(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function F(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}var z=Math.max,V=Math.min,K=Math.round;function X(t,e,n){return z(t,V(e,n))}function Y(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function Q(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const G={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,i=t.name,l=t.options,d=n.elements.arrow,h=n.modifiersData.popperOffsets,u=M(n.placement),f=F(u),p=[a,r].indexOf(u)>=0?"height":"width";if(d&&h){var m=function(t,e){return Y("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:Q(t,c))}(l.padding,n),g=P(d),_="y"===f?s:a,v="y"===f?o:r,b=n.rects.reference[p]+n.rects.reference[f]-h[f]-n.rects.popper[p],y=h[f]-n.rects.reference[f],w=q(d),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=b/2-y/2,T=m[_],C=E-g[p]-m[v],k=E/2-g[p]/2+A,O=X(T,k,C),L=f;n.modifiersData[i]=((e={})[L]=O,e.centerOffset=O-k,e)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&R(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function J(t){var e,n=t.popper,i=t.popperRect,l=t.placement,c=t.offsets,d=t.position,h=t.gpuAcceleration,u=t.adaptive,f=t.roundOffsets,p=!0===f?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:K(K(e*i)/i)||0,y:K(K(n*i)/i)||0}}(c):"function"==typeof f?f(c):c,m=p.x,g=void 0===m?0:m,_=p.y,v=void 0===_?0:_,b=c.hasOwnProperty("x"),y=c.hasOwnProperty("y"),w=a,E=s,A=window;if(u){var T=q(n),C="clientHeight",k="clientWidth";T===x(n)&&"static"!==H(T=$(n)).position&&(C="scrollHeight",k="scrollWidth"),T=T,l===s&&(E=o,v-=T[C]-i.height,v*=h?1:-1),l===a&&(w=r,g-=T[k]-i.width,g*=h?1:-1)}var O,L=Object.assign({position:d},u&&Z);return h?Object.assign({},L,((O={})[E]=y?"0":"",O[w]=b?"0":"",O.transform=(A.devicePixelRatio||1)<2?"translate("+g+"px, "+v+"px)":"translate3d("+g+"px, "+v+"px, 0)",O)):Object.assign({},L,((e={})[E]=y?v+"px":"",e[w]=b?g+"px":"",e.transform="",e))}const tt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,s=void 0===i||i,o=n.adaptive,r=void 0===o||o,a=n.roundOffsets,l=void 0===a||a,c={placement:M(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,J(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,J(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var et={passive:!0};const nt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,s=i.scroll,o=void 0===s||s,r=i.resize,a=void 0===r||r,l=x(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",n.update,et)})),a&&l.addEventListener("resize",n.update,et),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",n.update,et)})),a&&l.removeEventListener("resize",n.update,et)}},data:{}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function st(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var ot={start:"end",end:"start"};function rt(t){return t.replace(/start|end/g,(function(t){return ot[t]}))}function at(t){var e=x(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function lt(t){return j($(t)).left+at(t).scrollLeft}function ct(t){var e=H(t),n=e.overflow,i=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+s+i)}function dt(t){return["html","body","#document"].indexOf(L(t))>=0?t.ownerDocument.body:D(t)&&ct(t)?t:dt(W(t))}function ht(t,e){var n;void 0===e&&(e=[]);var i=dt(t),s=i===(null==(n=t.ownerDocument)?void 0:n.body),o=x(i),r=s?[o].concat(o.visualViewport||[],ct(i)?i:[]):i,a=e.concat(r);return s?a:a.concat(ht(W(r)))}function ut(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ft(t,e){return e===f?ut(function(t){var e=x(t),n=$(t),i=e.visualViewport,s=n.clientWidth,o=n.clientHeight,r=0,a=0;return i&&(s=i.width,o=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=i.offsetLeft,a=i.offsetTop)),{width:s,height:o,x:r+lt(t),y:a}}(t)):D(e)?function(t){var e=j(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):ut(function(t){var e,n=$(t),i=at(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=z(n.scrollWidth,n.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=z(n.scrollHeight,n.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-i.scrollLeft+lt(t),l=-i.scrollTop;return"rtl"===H(s||n).direction&&(a+=z(n.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}($(t)))}function pt(t){return t.split("-")[1]}function mt(t){var e,n=t.reference,i=t.element,l=t.placement,c=l?M(l):null,u=l?pt(l):null,f=n.x+n.width/2-i.width/2,p=n.y+n.height/2-i.height/2;switch(c){case s:e={x:f,y:n.y-i.height};break;case o:e={x:f,y:n.y+n.height};break;case r:e={x:n.x+n.width,y:p};break;case a:e={x:n.x-i.width,y:p};break;default:e={x:n.x,y:n.y}}var m=c?F(c):null;if(null!=m){var g="y"===m?"height":"width";switch(u){case d:e[m]=e[m]-(n[g]/2-i[g]/2);break;case h:e[m]=e[m]+(n[g]/2-i[g]/2)}}return e}function gt(t,e){void 0===e&&(e={});var n=e,i=n.placement,a=void 0===i?t.placement:i,l=n.boundary,d=void 0===l?u:l,h=n.rootBoundary,g=void 0===h?f:h,_=n.elementContext,v=void 0===_?p:_,b=n.altBoundary,y=void 0!==b&&b,w=n.padding,E=void 0===w?0:w,A=Y("number"!=typeof E?E:Q(E,c)),T=v===p?m:p,C=t.elements.reference,k=t.rects.popper,O=t.elements[y?T:v],x=function(t,e,n){var i="clippingParents"===e?function(t){var e=ht(W(t)),n=["absolute","fixed"].indexOf(H(t).position)>=0&&D(t)?q(t):t;return I(n)?e.filter((function(t){return I(t)&&R(t,n)&&"body"!==L(t)})):[]}(t):[].concat(e),s=[].concat(i,[n]),o=s[0],r=s.reduce((function(e,n){var i=ft(t,n);return e.top=z(i.top,e.top),e.right=V(i.right,e.right),e.bottom=V(i.bottom,e.bottom),e.left=z(i.left,e.left),e}),ft(t,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(I(O)?O:O.contextElement||$(t.elements.popper),d,g),S=j(C),N=mt({reference:S,element:k,strategy:"absolute",placement:a}),M=ut(Object.assign({},k,N)),P=v===p?M:S,B={top:x.top-P.top+A.top,bottom:P.bottom-x.bottom+A.bottom,left:x.left-P.left+A.left,right:P.right-x.right+A.right},U=t.modifiersData.offset;if(v===p&&U){var F=U[a];Object.keys(B).forEach((function(t){var e=[r,o].indexOf(t)>=0?1:-1,n=[s,o].indexOf(t)>=0?"y":"x";B[t]+=F[n]*e}))}return B}const _t={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name;if(!e.modifiersData[i]._skip){for(var h=n.mainAxis,u=void 0===h||h,f=n.altAxis,p=void 0===f||f,m=n.fallbackPlacements,v=n.padding,b=n.boundary,y=n.rootBoundary,w=n.altBoundary,E=n.flipVariations,A=void 0===E||E,T=n.allowedAutoPlacements,C=e.options.placement,k=M(C),O=m||(k!==C&&A?function(t){if(M(t)===l)return[];var e=st(t);return[rt(t),e,rt(e)]}(C):[st(C)]),L=[C].concat(O).reduce((function(t,n){return t.concat(M(n)===l?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,s=n.boundary,o=n.rootBoundary,r=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,d=void 0===l?_:l,h=pt(i),u=h?a?g:g.filter((function(t){return pt(t)===h})):c,f=u.filter((function(t){return d.indexOf(t)>=0}));0===f.length&&(f=u);var p=f.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:s,rootBoundary:o,padding:r})[M(n)],e}),{});return Object.keys(p).sort((function(t,e){return p[t]-p[e]}))}(e,{placement:n,boundary:b,rootBoundary:y,padding:v,flipVariations:A,allowedAutoPlacements:T}):n)}),[]),x=e.rects.reference,I=e.rects.popper,D=new Map,S=!0,N=L[0],j=0;j<L.length;j++){var P=L[j],R=M(P),H=pt(P)===d,B=[s,o].indexOf(R)>=0,$=B?"width":"height",W=gt(e,{placement:P,boundary:b,rootBoundary:y,altBoundary:w,padding:v}),U=B?H?r:a:H?o:s;x[$]>I[$]&&(U=st(U));var q=st(U),F=[];if(u&&F.push(W[R]<=0),p&&F.push(W[U]<=0,W[q]<=0),F.every((function(t){return t}))){N=P,S=!1;break}D.set(P,F)}if(S)for(var z=function(t){var e=L.find((function(e){var n=D.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return N=e,"break"},V=A?3:1;V>0&&"break"!==z(V);V--);e.placement!==N&&(e.modifiersData[i]._skip=!0,e.placement=N,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function vt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function bt(t){return[s,r,o,a].some((function(e){return t[e]>=0}))}const yt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=gt(e,{elementContext:"reference"}),a=gt(e,{altBoundary:!0}),l=vt(r,i),c=vt(a,s,o),d=bt(l),h=bt(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:h},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":h})}},wt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,i=t.name,o=n.offset,l=void 0===o?[0,0]:o,c=_.reduce((function(t,n){return t[n]=function(t,e,n){var i=M(t),o=[a,s].indexOf(i)>=0?-1:1,l="function"==typeof n?n(Object.assign({},e,{placement:t})):n,c=l[0],d=l[1];return c=c||0,d=(d||0)*o,[a,r].indexOf(i)>=0?{x:d,y:c}:{x:c,y:d}}(n,e.rects,l),t}),{}),d=c[e.placement],h=d.x,u=d.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=h,e.modifiersData.popperOffsets.y+=u),e.modifiersData[i]=c}},Et={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=mt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},At={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name,l=n.mainAxis,c=void 0===l||l,h=n.altAxis,u=void 0!==h&&h,f=n.boundary,p=n.rootBoundary,m=n.altBoundary,g=n.padding,_=n.tether,v=void 0===_||_,b=n.tetherOffset,y=void 0===b?0:b,w=gt(e,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),E=M(e.placement),A=pt(e.placement),T=!A,C=F(E),k="x"===C?"y":"x",O=e.modifiersData.popperOffsets,L=e.rects.reference,x=e.rects.popper,I="function"==typeof y?y(Object.assign({},e.rects,{placement:e.placement})):y,D={x:0,y:0};if(O){if(c||u){var S="y"===C?s:a,N="y"===C?o:r,j="y"===C?"height":"width",R=O[C],H=O[C]+w[S],B=O[C]-w[N],$=v?-x[j]/2:0,W=A===d?L[j]:x[j],U=A===d?-x[j]:-L[j],K=e.elements.arrow,Y=v&&K?P(K):{width:0,height:0},Q=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},G=Q[S],Z=Q[N],J=X(0,L[j],Y[j]),tt=T?L[j]/2-$-J-G-I:W-J-G-I,et=T?-L[j]/2+$+J+Z+I:U+J+Z+I,nt=e.elements.arrow&&q(e.elements.arrow),it=nt?"y"===C?nt.clientTop||0:nt.clientLeft||0:0,st=e.modifiersData.offset?e.modifiersData.offset[e.placement][C]:0,ot=O[C]+tt-st-it,rt=O[C]+et-st;if(c){var at=X(v?V(H,ot):H,R,v?z(B,rt):B);O[C]=at,D[C]=at-R}if(u){var lt="x"===C?s:a,ct="x"===C?o:r,dt=O[k],ht=dt+w[lt],ut=dt-w[ct],ft=X(v?V(ht,ot):ht,dt,v?z(ut,rt):ut);O[k]=ft,D[k]=ft-dt}}e.modifiersData[i]=D}},requiresIfExists:["offset"]};function Tt(t,e,n){void 0===n&&(n=!1);var i,s,o=$(e),r=j(t),a=D(e),l={scrollLeft:0,scrollTop:0},c={x:0,y:0};return(a||!a&&!n)&&(("body"!==L(e)||ct(o))&&(l=(i=e)!==x(i)&&D(i)?{scrollLeft:(s=i).scrollLeft,scrollTop:s.scrollTop}:at(i)),D(e)?((c=j(e)).x+=e.clientLeft,c.y+=e.clientTop):o&&(c.x=lt(o))),{x:r.left+l.scrollLeft-c.x,y:r.top+l.scrollTop-c.y,width:r.width,height:r.height}}function Ct(t){var e=new Map,n=new Set,i=[];function s(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&s(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||s(t)})),i}var kt={placement:"bottom",modifiers:[],strategy:"absolute"};function Ot(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Lt(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,s=e.defaultOptions,o=void 0===s?kt:s;return function(t,e,n){void 0===n&&(n=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},kt,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(n){h(),a.options=Object.assign({},o,a.options,n),a.scrollParents={reference:I(t)?ht(t):t.contextElement?ht(t.contextElement):[],popper:ht(e)};var s,r,c=function(t){var e=Ct(t);return O.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),r=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(r).map((function(t){return r[t]}))));return a.orderedModifiers=c.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,s=t.effect;if("function"==typeof s){var o=s({state:a,name:e,instance:d,options:i});l.push(o||function(){})}})),d.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(Ot(e,n)){a.rects={reference:Tt(e,q(n),"fixed"===a.options.strategy),popper:P(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var s=a.orderedModifiers[i],o=s.fn,r=s.options,l=void 0===r?{}:r,h=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:h,instance:d})||a)}else a.reset=!1,i=-1}}},update:(s=function(){return new Promise((function(t){d.forceUpdate(),t(a)}))},function(){return r||(r=new Promise((function(t){Promise.resolve().then((function(){r=void 0,t(s())}))}))),r}),destroy:function(){h(),c=!0}};if(!Ot(t,e))return d;function h(){l.forEach((function(t){return t()})),l=[]}return d.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),d}}var xt=Lt(),It=Lt({defaultModifiers:[nt,Et,tt,N,wt,_t,At,G,yt]}),Dt=Lt({defaultModifiers:[nt,Et,tt,N]});const St={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]}},Nt="transitionend",Mt=t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t},jt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},Pt=t=>{const e=jt(t);return e&&document.querySelector(e)?e:null},Rt=t=>{const e=jt(t);return e?document.querySelector(e):null},Ht=t=>{t.dispatchEvent(new Event(Nt))},Bt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),$t=t=>Bt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?St.findOne(t):null,Wt=(t,e,n)=>{Object.keys(n).forEach((i=>{const s=n[i],o=e[i],r=o&&Bt(o)?"element":null==(a=o)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(s).test(r))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${r}" but expected type "${s}".`)}))},Ut=t=>!(!Bt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),qt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),Ft=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Ft(t.parentNode):null},zt=()=>{},Vt=t=>t.offsetHeight,Kt=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Xt=[],Yt=()=>"rtl"===document.documentElement.dir,Qt=t=>{var e;e=()=>{const e=Kt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Xt.length||document.addEventListener("DOMContentLoaded",(()=>{Xt.forEach((t=>t()))})),Xt.push(e)):e()},Gt=t=>{"function"==typeof t&&t()},Zt=(t,e,n=!0)=>{if(!n)return void Gt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),s=Number.parseFloat(n);return i||s?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let s=!1;const o=({target:n})=>{n===e&&(s=!0,e.removeEventListener(Nt,o),Gt(t))};e.addEventListener(Nt,o),setTimeout((()=>{s||Ht(e)}),i)},Jt=(t,e,n,i)=>{let s=t.indexOf(e);if(-1===s)return t[!n&&i?t.length-1:0];const o=t.length;return s+=n?1:-1,i&&(s=(s+o)%o),t[Math.max(0,Math.min(s,o-1))]},te=/[^.]*(?=\..*)\.|.*/,ee=/\..*/,ne=/::\d+$/,ie={};let se=1;const oe={mouseenter:"mouseover",mouseleave:"mouseout"},re=/^(mouseenter|mouseleave)/i,ae=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function le(t,e){return e&&`${e}::${se++}`||t.uidEvent||se++}function ce(t){const e=le(t);return t.uidEvent=e,ie[e]=ie[e]||{},ie[e]}function de(t,e,n=null){const i=Object.keys(t);for(let s=0,o=i.length;s<o;s++){const o=t[i[s]];if(o.originalHandler===e&&o.delegationSelector===n)return o}return null}function he(t,e,n){const i="string"==typeof e,s=i?n:e;let o=pe(t);return ae.has(o)||(o=t),[i,s,o]}function ue(t,e,n,i,s){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),re.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[o,r,a]=he(e,n,i),l=ce(t),c=l[a]||(l[a]={}),d=de(c,r,o?n:null);if(d)return void(d.oneOff=d.oneOff&&s);const h=le(r,e.replace(te,"")),u=o?function(t,e,n){return function i(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(let a=o.length;a--;)if(o[a]===r)return s.delegateTarget=r,i.oneOff&&me.off(t,s.type,e,n),n.apply(r,[s]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&me.off(t,i.type,e),e.apply(t,[i])}}(t,n);u.delegationSelector=o?n:null,u.originalHandler=r,u.oneOff=s,u.uidEvent=h,c[h]=u,t.addEventListener(a,u,o)}function fe(t,e,n,i,s){const o=de(e[n],i,s);o&&(t.removeEventListener(n,o,Boolean(s)),delete e[n][o.uidEvent])}function pe(t){return t=t.replace(ee,""),oe[t]||t}const me={on(t,e,n,i){ue(t,e,n,i,!1)},one(t,e,n,i){ue(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[s,o,r]=he(e,n,i),a=r!==e,l=ce(t),c=e.startsWith(".");if(void 0!==o){if(!l||!l[r])return;return void fe(t,l,r,o,s?n:null)}c&&Object.keys(l).forEach((n=>{!function(t,e,n,i){const s=e[n]||{};Object.keys(s).forEach((o=>{if(o.includes(i)){const i=s[o];fe(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,l,n,e.slice(1))}));const d=l[r]||{};Object.keys(d).forEach((n=>{const i=n.replace(ne,"");if(!a||e.includes(i)){const e=d[n];fe(t,l,r,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=Kt(),s=pe(e),o=e!==s,r=ae.has(s);let a,l=!0,c=!0,d=!1,h=null;return o&&i&&(a=i.Event(e,n),i(t).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),d=a.isDefaultPrevented()),r?(h=document.createEvent("HTMLEvents"),h.initEvent(s,l,!0)):h=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(h,t,{get:()=>n[t]})})),d&&h.preventDefault(),c&&t.dispatchEvent(h),h.defaultPrevented&&void 0!==a&&a.preventDefault(),h}},ge=new Map;var _e={set(t,e,n){ge.has(t)||ge.set(t,new Map);const i=ge.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>ge.has(t)&&ge.get(t).get(e)||null,remove(t,e){if(!ge.has(t))return;const n=ge.get(t);n.delete(e),0===n.size&&ge.delete(t)}};class ve{constructor(t){(t=$t(t))&&(this._element=t,_e.set(this._element,this.constructor.DATA_KEY,this))}dispose(){_e.remove(this._element,this.constructor.DATA_KEY),me.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Zt(t,e,n)}static getInstance(t){return _e.get(t,this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.0.2"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}class be extends ve{static get NAME(){return"alert"}close(t){const e=t?this._getRootElement(t):this._element,n=this._triggerCloseEvent(e);null===n||n.defaultPrevented||this._removeElement(e)}_getRootElement(t){return Rt(t)||t.closest(".alert")}_triggerCloseEvent(t){return me.trigger(t,"close.bs.alert")}_removeElement(t){t.classList.remove("show");const e=t.classList.contains("fade");this._queueCallback((()=>this._destroyElement(t)),t,e)}_destroyElement(t){t.remove(),me.trigger(t,"closed.bs.alert")}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this);"close"===t&&e[t](this)}))}static handleDismiss(t){return function(e){e&&e.preventDefault(),t.close(this)}}}me.on(document,"click.bs.alert.data-api",'[data-bs-dismiss="alert"]',be.handleDismiss(new be)),Qt(be);const ye='[data-bs-toggle="button"]';class we extends ve{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=we.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function Ee(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function Ae(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}me.on(document,"click.bs.button.data-api",ye,(t=>{t.preventDefault();const e=t.target.closest(ye);we.getOrCreateInstance(e).toggle()})),Qt(we);const Te={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${Ae(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${Ae(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=Ee(t.dataset[n])})),e},getDataAttribute:(t,e)=>Ee(t.getAttribute(`data-bs-${Ae(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+document.body.scrollTop,left:e.left+document.body.scrollLeft}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},Ce="carousel",ke={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Oe={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Le="next",xe="prev",Ie="left",De="right",Se={ArrowLeft:De,ArrowRight:Ie},Ne="slid.bs.carousel",Me="active",je=".active.carousel-item",Pe="touch";class Re extends ve{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=St.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return ke}static get NAME(){return Ce}next(){this._slide(Le)}nextWhenVisible(){!document.hidden&&Ut(this._element)&&this.next()}prev(){this._slide(xe)}pause(t){t||(this._isPaused=!0),St.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Ht(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=St.findOne(je,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void me.one(this._element,Ne,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Le:xe;this._slide(n,this._items[t])}_getConfig(t){return t={...ke,...Te.getDataAttributes(this._element),..."object"==typeof t?t:{}},Wt(Ce,t,Oe),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?De:Ie)}_addEventListeners(){this._config.keyboard&&me.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(me.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),me.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>{!this._pointerEvent||"pen"!==t.pointerType&&t.pointerType!==Pe?this._pointerEvent||(this.touchStartX=t.touches[0].clientX):this.touchStartX=t.clientX},e=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},n=t=>{!this._pointerEvent||"pen"!==t.pointerType&&t.pointerType!==Pe||(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};St.find(".carousel-item img",this._element).forEach((t=>{me.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(me.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),me.on(this._element,"pointerup.bs.carousel",(t=>n(t))),this._element.classList.add("pointer-event")):(me.on(this._element,"touchstart.bs.carousel",(e=>t(e))),me.on(this._element,"touchmove.bs.carousel",(t=>e(t))),me.on(this._element,"touchend.bs.carousel",(t=>n(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Se[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?St.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Le;return Jt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(St.findOne(je,this._element));return me.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=St.findOne(".active",this._indicatorsElement);e.classList.remove(Me),e.removeAttribute("aria-current");const n=St.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Me),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||St.findOne(je,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=St.findOne(je,this._element),s=this._getItemIndex(i),o=e||this._getItemByOrder(n,i),r=this._getItemIndex(o),a=Boolean(this._interval),l=n===Le,c=l?"carousel-item-start":"carousel-item-end",d=l?"carousel-item-next":"carousel-item-prev",h=this._orderToDirection(n);if(o&&o.classList.contains(Me))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,h).defaultPrevented)return;if(!i||!o)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const u=()=>{me.trigger(this._element,Ne,{relatedTarget:o,direction:h,from:s,to:r})};if(this._element.classList.contains("slide")){o.classList.add(d),Vt(o),i.classList.add(c),o.classList.add(c);const t=()=>{o.classList.remove(c,d),o.classList.add(Me),i.classList.remove(Me,d,c),this._isSliding=!1,setTimeout(u,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Me),o.classList.add(Me),this._isSliding=!1,u();a&&this.cycle()}_directionToOrder(t){return[De,Ie].includes(t)?Yt()?t===Ie?xe:Le:t===Ie?Le:xe:t}_orderToDirection(t){return[Le,xe].includes(t)?Yt()?t===xe?Ie:De:t===xe?De:Ie:t}static carouselInterface(t,e){const n=Re.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const s="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof s){if(void 0===n[s])throw new TypeError(`No method named "${s}"`);n[s]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){Re.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=Rt(this);if(!e||!e.classList.contains("carousel"))return;const n={...Te.getDataAttributes(e),...Te.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),Re.carouselInterface(e,n),i&&Re.getInstance(e).to(i),t.preventDefault()}}me.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Re.dataApiClickHandler),me.on(window,"load.bs.carousel.data-api",(()=>{const t=St.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)Re.carouselInterface(t[e],Re.getInstance(t[e]))})),Qt(Re);const He="collapse",Be={toggle:!0,parent:""},$e={toggle:"boolean",parent:"(string|element)"},We="show",Ue="collapse",qe="collapsing",Fe="collapsed",ze="width",Ve='[data-bs-toggle="collapse"]';class Ke extends ve{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=St.find(`${Ve}[href="#${this._element.id}"],${Ve}[data-bs-target="#${this._element.id}"]`);const n=St.find(Ve);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=Pt(e),s=St.find(i).filter((t=>t===this._element));null!==i&&s.length&&(this._selector=i,this._triggerArray.push(e))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}static get Default(){return Be}static get NAME(){return He}toggle(){this._element.classList.contains(We)?this.hide():this.show()}show(){if(this._isTransitioning||this._element.classList.contains(We))return;let t,e;this._parent&&(t=St.find(".show, .collapsing",this._parent).filter((t=>"string"==typeof this._config.parent?t.getAttribute("data-bs-parent")===this._config.parent:t.classList.contains(Ue))),0===t.length&&(t=null));const n=St.findOne(this._selector);if(t){const i=t.find((t=>n!==t));if(e=i?Ke.getInstance(i):null,e&&e._isTransitioning)return}if(me.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t&&t.forEach((t=>{n!==t&&Ke.collapseInterface(t,"hide"),e||_e.set(t,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Ue),this._element.classList.add(qe),this._element.style[i]=0,this._triggerArray.length&&this._triggerArray.forEach((t=>{t.classList.remove(Fe),t.setAttribute("aria-expanded",!0)})),this.setTransitioning(!0);const s=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._element.classList.remove(qe),this._element.classList.add(Ue,We),this._element.style[i]="",this.setTransitioning(!1),me.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[s]}px`}hide(){if(this._isTransitioning||!this._element.classList.contains(We))return;if(me.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Vt(this._element),this._element.classList.add(qe),this._element.classList.remove(Ue,We);const e=this._triggerArray.length;if(e>0)for(let t=0;t<e;t++){const e=this._triggerArray[t],n=Rt(e);n&&!n.classList.contains(We)&&(e.classList.add(Fe),e.setAttribute("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[t]="",this._queueCallback((()=>{this.setTransitioning(!1),this._element.classList.remove(qe),this._element.classList.add(Ue),me.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}setTransitioning(t){this._isTransitioning=t}_getConfig(t){return(t={...Be,...t}).toggle=Boolean(t.toggle),Wt(He,t,$e),t}_getDimension(){return this._element.classList.contains(ze)?ze:"height"}_getParent(){let{parent:t}=this._config;t=$t(t);const e=`${Ve}[data-bs-parent="${t}"]`;return St.find(e,t).forEach((t=>{const e=Rt(t);this._addAriaAndCollapsedClass(e,[t])})),t}_addAriaAndCollapsedClass(t,e){if(!t||!e.length)return;const n=t.classList.contains(We);e.forEach((t=>{n?t.classList.remove(Fe):t.classList.add(Fe),t.setAttribute("aria-expanded",n)}))}static collapseInterface(t,e){let n=Ke.getInstance(t);const i={...Be,...Te.getDataAttributes(t),..."object"==typeof e&&e?e:{}};if(!n&&i.toggle&&"string"==typeof e&&/show|hide/.test(e)&&(i.toggle=!1),n||(n=new Ke(t,i)),"string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}static jQueryInterface(t){return this.each((function(){Ke.collapseInterface(this,t)}))}}me.on(document,"click.bs.collapse.data-api",Ve,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=Te.getDataAttributes(this),n=Pt(this);St.find(n).forEach((t=>{const n=Ke.getInstance(t);let i;n?(null===n._parent&&"string"==typeof e.parent&&(n._config.parent=e.parent,n._parent=n._getParent()),i="toggle"):i=e,Ke.collapseInterface(t,i)}))})),Qt(Ke);const Xe="dropdown",Ye="Escape",Qe="Space",Ge="ArrowUp",Ze="ArrowDown",Je=new RegExp("ArrowUp|ArrowDown|Escape"),tn="click.bs.dropdown.data-api",en="keydown.bs.dropdown.data-api",nn="show",sn='[data-bs-toggle="dropdown"]',on=".dropdown-menu",rn=Yt()?"top-end":"top-start",an=Yt()?"top-start":"top-end",ln=Yt()?"bottom-end":"bottom-start",cn=Yt()?"bottom-start":"bottom-end",dn=Yt()?"left-start":"right-start",hn=Yt()?"right-start":"left-start",un={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},fn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends ve{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}static get Default(){return un}static get DefaultType(){return fn}static get NAME(){return Xe}toggle(){qt(this._element)||(this._element.classList.contains(nn)?this.hide():this.show())}show(){if(qt(this._element)||this._menu.classList.contains(nn))return;const t=pn.getParentFromElement(this._element),e={relatedTarget:this._element};if(!me.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._inNavbar)Te.setDataAttribute(this._menu,"popper","none");else{if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=t:Bt(this._config.reference)?e=$t(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig(),s=n.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=It(e,this._menu,n),s&&Te.setDataAttribute(this._menu,"popper","static")}"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>me.on(t,"mouseover",zt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.toggle(nn),this._element.classList.toggle(nn),me.trigger(this._element,"shown.bs.dropdown",e)}}hide(){if(qt(this._element)||!this._menu.classList.contains(nn))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_addEventListeners(){me.on(this._element,"click.bs.dropdown",(t=>{t.preventDefault(),this.toggle()}))}_completeHide(t){me.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>me.off(t,"mouseover",zt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(nn),this._element.classList.remove(nn),this._element.setAttribute("aria-expanded","false"),Te.removeDataAttribute(this._menu,"popper"),me.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...Te.getDataAttributes(this._element),...t},Wt(Xe,t,this.constructor.DefaultType),"object"==typeof t.reference&&!Bt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Xe.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_getMenuElement(){return St.next(this._element,on)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return dn;if(t.classList.contains("dropstart"))return hn;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?an:rn:e?cn:ln}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=St.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Ut);n.length&&Jt(n,e,t===Ze,!n.includes(e)).focus()}static dropdownInterface(t,e){const n=pn.getOrCreateInstance(t,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}static jQueryInterface(t){return this.each((function(){pn.dropdownInterface(this,t)}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=St.find(sn);for(let n=0,i=e.length;n<i;n++){const i=pn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._element.classList.contains(nn))continue;const s={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(s.clickEvent=t)}i._completeHide(s)}}static getParentFromElement(t){return Rt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Qe||t.key!==Ye&&(t.key!==Ze&&t.key!==Ge||t.target.closest(on)):!Je.test(t.key))return;const e=this.classList.contains(nn);if(!e&&t.key===Ye)return;if(t.preventDefault(),t.stopPropagation(),qt(this))return;const n=()=>this.matches(sn)?this:St.prev(this,sn)[0];return t.key===Ye?(n().focus(),void pn.clearMenus()):t.key===Ge||t.key===Ze?(e||n().click(),void pn.getInstance(n())._selectMenuItem(t)):void(e&&t.key!==Qe||pn.clearMenus())}}me.on(document,en,sn,pn.dataApiKeydownHandler),me.on(document,en,on,pn.dataApiKeydownHandler),me.on(document,tn,pn.clearMenus),me.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),me.on(document,tn,sn,(function(t){t.preventDefault(),pn.dropdownInterface(this)})),Qt(pn);const mn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",gn=".sticky-top";class _n{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(mn,"paddingRight",(e=>e+t)),this._setElementAttributes(gn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(s))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(mn,"paddingRight"),this._resetElementAttributes(gn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&Te.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=Te.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(Te.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){Bt(t)?e(t):St.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const vn={isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},bn={isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",wn="mousedown.bs.backdrop";class En{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&Vt(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Gt(t)}))):Gt(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Gt(t)}))):Gt(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className="modal-backdrop",this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...vn,..."object"==typeof t?t:{}}).rootElement=$t(t.rootElement),Wt("backdrop",t,bn),t}_append(){this._isAppended||(this._config.rootElement.appendChild(this._getElement()),me.on(this._getElement(),wn,(()=>{Gt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(me.off(this._element,wn),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Zt(t,this._getElement(),this._config.isAnimated)}}const An="modal",Tn="Escape",Cn={backdrop:!0,keyboard:!0,focus:!0},kn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},On="hidden.bs.modal",Ln="show.bs.modal",xn="focusin.bs.modal",In="resize.bs.modal",Dn="click.dismiss.bs.modal",Sn="keydown.dismiss.bs.modal",Nn="mousedown.dismiss.bs.modal",Mn="modal-open",jn="show",Pn="modal-static";class Rn extends ve{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=St.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new _n}static get Default(){return Cn}static get NAME(){return An}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||me.trigger(this._element,Ln,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Mn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),me.on(this._element,Dn,'[data-bs-dismiss="modal"]',(t=>this.hide(t))),me.on(this._dialog,Nn,(()=>{me.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(t){if(t&&["A","AREA"].includes(t.target.tagName)&&t.preventDefault(),!this._isShown||this._isTransitioning)return;if(me.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),me.off(document,xn),this._element.classList.remove(jn),me.off(this._element,Dn),me.off(this._dialog,Nn),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((t=>me.off(t,".bs.modal"))),this._backdrop.dispose(),super.dispose(),me.off(document,xn)}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new En({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_getConfig(t){return t={...Cn,...Te.getDataAttributes(this._element),..."object"==typeof t?t:{}},Wt(An,t,kn),t}_showElement(t){const e=this._isAnimated(),n=St.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&Vt(this._element),this._element.classList.add(jn),this._config.focus&&this._enforceFocus(),this._queueCallback((()=>{this._config.focus&&this._element.focus(),this._isTransitioning=!1,me.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_enforceFocus(){me.off(document,xn),me.on(document,xn,(t=>{document===t.target||this._element===t.target||this._element.contains(t.target)||this._element.focus()}))}_setEscapeEvent(){this._isShown?me.on(this._element,Sn,(t=>{this._config.keyboard&&t.key===Tn?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==Tn||this._triggerBackdropTransition()})):me.off(this._element,Sn)}_setResizeEvent(){this._isShown?me.on(window,In,(()=>this._adjustDialog())):me.off(window,In)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Mn),this._resetAdjustments(),this._scrollBar.reset(),me.trigger(this._element,On)}))}_showBackdrop(t){me.on(this._element,Dn,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(me.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(Pn)||(i||(n.overflowY="hidden"),t.add(Pn),this._queueCallback((()=>{t.remove(Pn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!Yt()||n&&!t&&Yt())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!Yt()||!n&&t&&Yt())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Rn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}me.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=Rt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),me.one(e,Ln,(t=>{t.defaultPrevented||me.one(e,On,(()=>{Ut(this)&&this.focus()}))})),Rn.getOrCreateInstance(e).toggle(this)})),Qt(Rn);const Hn="offcanvas",Bn={backdrop:!0,keyboard:!0,scroll:!1},$n={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Wn="show",Un=".offcanvas.show",qn="hidden.bs.offcanvas",Fn="focusin.bs.offcanvas";class zn extends ve{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._addEventListeners()}static get NAME(){return Hn}static get Default(){return Bn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||me.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||((new _n).hide(),this._enforceFocusOnElement(this._element)),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Wn),this._queueCallback((()=>{me.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(me.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(me.off(document,Fn),this._element.blur(),this._isShown=!1,this._element.classList.remove(Wn),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new _n).reset(),me.trigger(this._element,qn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),super.dispose(),me.off(document,Fn)}_getConfig(t){return t={...Bn,...Te.getDataAttributes(this._element),..."object"==typeof t?t:{}},Wt(Hn,t,$n),t}_initializeBackDrop(){return new En({isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_enforceFocusOnElement(t){me.off(document,Fn),me.on(document,Fn,(e=>{document===e.target||t===e.target||t.contains(e.target)||t.focus()})),t.focus()}_addEventListeners(){me.on(this._element,"click.dismiss.bs.offcanvas",'[data-bs-dismiss="offcanvas"]',(()=>this.hide())),me.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=zn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=Rt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),qt(this))return;me.one(e,qn,(()=>{Ut(this)&&this.focus()}));const n=St.findOne(Un);n&&n!==e&&zn.getInstance(n).hide(),zn.getOrCreateInstance(e).toggle(this)})),me.on(window,"load.bs.offcanvas.data-api",(()=>St.find(Un).forEach((t=>zn.getOrCreateInstance(t).show())))),Qt(zn);const Vn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Xn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Vn.has(n)||Boolean(Kn.test(t.nodeValue)||Xn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1};function Qn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),s=Object.keys(e),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!s.includes(i)){n.remove();continue}const r=[].concat(...n.attributes),a=[].concat(e["*"]||[],e[i]||[]);r.forEach((t=>{Yn(t,a)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const Gn="tooltip",Zn=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Jn=new Set(["sanitize","allowList","sanitizeFn"]),ti={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ei={AUTO:"auto",TOP:"top",RIGHT:Yt()?"left":"right",BOTTOM:"bottom",LEFT:Yt()?"right":"left"},ni={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ii={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},si="fade",oi="show",ri="show",ai="out",li="hover",ci="focus";class di extends ve{constructor(t,e){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(e),this.tip=null,this._setListeners()}static get Default(){return ni}static get NAME(){return Gn}static get Event(){return ii}static get DefaultType(){return ti}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(oi))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),me.off(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this.tip&&this.tip.remove(),this._popper&&this._popper.destroy(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=me.trigger(this._element,this.constructor.Event.SHOW),e=Ft(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;const i=this.getTipElement(),s=Mt(this.constructor.NAME);i.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this.setContent(),this._config.animation&&i.classList.add(si);const o="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,r=this._getAttachment(o);this._addAttachmentClass(r);const{container:a}=this._config;_e.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.appendChild(i),me.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=It(this._element,i,this._getPopperConfig(r)),i.classList.add(oi);const l="function"==typeof this._config.customClass?this._config.customClass():this._config.customClass;l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{me.on(t,"mouseover",zt)}));const c=this.tip.classList.contains(si);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,me.trigger(this._element,this.constructor.Event.SHOWN),t===ai&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const t=this.getTipElement();if(me.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(oi),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>me.off(t,"mouseover",zt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(si);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==ri&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),me.trigger(this._element,this.constructor.Event.HIDDEN),this._popper&&(this._popper.destroy(),this._popper=null))}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");return t.innerHTML=this._config.template,this.tip=t.children[0],this.tip}setContent(){const t=this.getTipElement();this.setElementContent(St.findOne(".tooltip-inner",t),this.getTitle()),t.classList.remove(si,oi)}setElementContent(t,e){if(null!==t)return Bt(e)?(e=$t(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.appendChild(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Qn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){let t=this._element.getAttribute("data-bs-original-title");return t||(t="function"==typeof this._config.title?this._config.title.call(this._element):this._config.title),t}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){const n=this.constructor.DATA_KEY;return(e=e||_e.get(t.delegateTarget,n))||(e=new this.constructor(t.delegateTarget,this._getDelegateConfig()),_e.set(t.delegateTarget,n,e)),e}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`bs-tooltip-${this.updateAttachment(t)}`)}_getAttachment(t){return ei[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)me.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===li?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===li?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;me.on(this._element,e,this._config.selector,(t=>this._enter(t))),me.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},me.on(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?ci:li]=!0),e.getTipElement().classList.contains(oi)||e._hoverState===ri?e._hoverState=ri:(clearTimeout(e._timeout),e._hoverState=ri,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===ri&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?ci:li]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ai,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===ai&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=Te.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{Jn.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:$t(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),Wt(Gn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Qn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};if(this._config)for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=t.getAttribute("class").match(Zn);null!==e&&e.length>0&&e.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}static jQueryInterface(t){return this.each((function(){const e=di.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Qt(di);const hi=new RegExp("(^|\\s)bs-popover\\S+","g"),ui={...di.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},fi={...di.DefaultType,content:"(string|element|function)"},pi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},mi=".popover-header",gi=".popover-body";class _i extends di{static get Default(){return ui}static get NAME(){return"popover"}static get Event(){return pi}static get DefaultType(){return fi}isWithContent(){return this.getTitle()||this._getContent()}getTipElement(){return this.tip||(this.tip=super.getTipElement(),this.getTitle()||St.findOne(mi,this.tip).remove(),this._getContent()||St.findOne(gi,this.tip).remove()),this.tip}setContent(){const t=this.getTipElement();this.setElementContent(St.findOne(mi,t),this.getTitle());let e=this._getContent();"function"==typeof e&&(e=e.call(this._element)),this.setElementContent(St.findOne(gi,t),e),t.classList.remove("fade","show")}_addAttachmentClass(t){this.getTipElement().classList.add(`bs-popover-${this.updateAttachment(t)}`)}_getContent(){return this._element.getAttribute("data-bs-content")||this._config.content}_cleanTipClass(){const t=this.getTipElement(),e=t.getAttribute("class").match(hi);null!==e&&e.length>0&&e.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}static jQueryInterface(t){return this.each((function(){const e=_i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Qt(_i);const vi="scrollspy",bi={offset:10,method:"auto",target:""},yi={offset:"number",method:"string",target:"(string|element)"},wi="active",Ei="position";class Ai extends ve{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._selector=`${this._config.target} .nav-link, ${this._config.target} .list-group-item, ${this._config.target} .dropdown-item`,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,me.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return bi}static get NAME(){return vi}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":Ei,e="auto"===this._config.method?t:this._config.method,n=e===Ei?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),St.find(this._selector).map((t=>{const i=Pt(t),s=i?St.findOne(i):null;if(s){const t=s.getBoundingClientRect();if(t.width||t.height)return[Te[e](s).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){me.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(t){if("string"!=typeof(t={...bi,...Te.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target&&Bt(t.target)){let{id:e}=t.target;e||(e=Mt(vi),t.target.id=e),t.target=`#${e}`}return Wt(vi,t,yi),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=this._selector.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=St.findOne(e.join(","));n.classList.contains("dropdown-item")?(St.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(wi),n.classList.add(wi)):(n.classList.add(wi),St.parents(n,".nav, .list-group").forEach((t=>{St.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(wi))),St.prev(t,".nav-item").forEach((t=>{St.children(t,".nav-link").forEach((t=>t.classList.add(wi)))}))}))),me.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){St.find(this._selector).filter((t=>t.classList.contains(wi))).forEach((t=>t.classList.remove(wi)))}static jQueryInterface(t){return this.each((function(){const e=Ai.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}me.on(window,"load.bs.scrollspy.data-api",(()=>{St.find('[data-bs-spy="scroll"]').forEach((t=>new Ai(t)))})),Qt(Ai);const Ti="active",Ci="fade",ki="show",Oi=".active",Li=":scope > li > .active";class xi extends ve{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ti))return;let t;const e=Rt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Li:Oi;t=St.find(e,n),t=t[t.length-1]}const i=t?me.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(me.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const s=()=>{me.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),me.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,s):s()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?St.children(e,Oi):St.find(Li,e))[0],s=n&&i&&i.classList.contains(Ci),o=()=>this._transitionComplete(t,i,n);i&&s?(i.classList.remove(ki),this._queueCallback(o,t,!0)):o()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ti);const t=St.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(Ti),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ti),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Vt(t),t.classList.contains(Ci)&&t.classList.add(ki);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&St.find(".dropdown-toggle",e).forEach((t=>t.classList.add(Ti))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=xi.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}me.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),qt(this)||xi.getOrCreateInstance(this).show()})),Qt(xi);const Ii="toast",Di="hide",Si="show",Ni="showing",Mi={animation:"boolean",autohide:"boolean",delay:"number"},ji={animation:!0,autohide:!0,delay:5e3};class Pi extends ve{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Mi}static get Default(){return ji}static get NAME(){return Ii}show(){me.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Di),Vt(this._element),this._element.classList.add(Ni),this._queueCallback((()=>{this._element.classList.remove(Ni),this._element.classList.add(Si),me.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Si)&&(me.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.remove(Si),this._queueCallback((()=>{this._element.classList.add(Di),me.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Si)&&this._element.classList.remove(Si),super.dispose()}_getConfig(t){return t={...ji,...Te.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},Wt(Ii,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){me.on(this._element,"click.dismiss.bs.toast",'[data-bs-dismiss="toast"]',(()=>this.hide())),me.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),me.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),me.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),me.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Pi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}Qt(Pi)},475:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SvgPaletteDesigner=void 0;const i=n(413);e.SvgPaletteDesigner=class{constructor(){this._colorCount=3,this._colors=[],this._selectedColor=0,this.initColors(),this.initSvg();const t=document.getElementById("ui"),e=new i.Controls(t),n=e.createFileInput("load svg",".svg",!1);n.addEventListener("change",(()=>{const t=n.files[0];if(!t)return;const e=new FileReader;e.onload=()=>{const t=e.result;this.loadSvg(t)},e.readAsText(t)})),n.addEventListener("click",(()=>{n.value=""}));const s=e.createSelectListInput("selected color",this._colors.map(((t,e)=>"color "+e.toString())));s.selectedIndex=this._selectedColor,s.addEventListener("change",(()=>{this._selectedColor=s.selectedIndex}));for(let t=0;t<this._colors.length;t++){const n=this._colors[t],i=e.createColorInput("color "+t+" - "+n);i.value=n,i.addEventListener("input",(()=>{this._colors[t]=i.value,i.labels[0].innerHTML="color "+t+" - "+i.value,this.generateCss()}))}this._style=document.createElement("style"),document.getElementsByTagName("head")[0].appendChild(this._style),this.generateCss()}initSvg(){this.loadSvg(n(631))}initColors(){for(let t=0;t<this._colorCount;t++){let t="#";for(let e=0;e<3;e++){let e=Math.floor(256*Math.random()).toString(16);e+=e.length<2?"0":"",t+=e}this._colors.push(t)}}generateCss(){let t="";for(let e=0;e<this._colors.length;e++)t+=`.color${e}{fill: ${this._colors[e]} !important} `;this._style.innerHTML=t}loadSvg(t){this._svg=t;const e=document.getElementById("svgPreview");e.innerHTML=t;const n=e.children[0];n.style.width="100%",n.style.height="100%",this.addClickListeners(n)}addClickListeners(t){if(0!=t.children.length)for(const e of t.children)this.addClickListeners(e);else t.addEventListener("click",(e=>{for(let e=0;e<this._colors.length;e++){const n="color"+e;this._colors[e],e==this._selectedColor?t.classList.add(n):t.classList.remove(n)}}))}}},413:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Controls=void 0;const i=n(614);e.Controls=class{constructor(t){console.log(t),t||(t=document.getElementById("controls-container")),this._controlsElement=document.createElement("form"),this._controlsElement.onsubmit=t=>(t.preventDefault(),!1),t.appendChild(this._controlsElement)}createGenericRangedInput(t,e,n="",i,s,o,r,a,l){const c=this.createGenericInput(t,e,n,s,l);return c.min=String(o),c.max=String(r),c.step=String(a),c.value=String(i),c}createLabel(t,e){const n=document.createElement("label");return n.htmlFor=e,n.innerText=t,this._controlsElement.appendChild(n),n}createDescription(t){const e=i.v4(),n=document.createElement("small");return n.className="form-text text-muted",n.innerText=t,n.id=e,this._controlsElement.appendChild(n),n}createInput(t,e,n,s){s||(s=i.v4()),t&&this.createLabel(t,s);const o=e();if(o.id=s,this._controlsElement.appendChild(o),n){const t=this.createDescription(n);o.setAttribute("aria-describedby",t.id)}return o}createActionButton(t,e,n){const i=this.createGenericInput(void 0,"button",void 0,e,n);return i.value=t,i.classList.add("btn"),i.classList.add("btn-primary"),i}createGenericInput(t,e="text",n="",i,s){return this.createInput(t,(()=>{const t=document.createElement("input");return t.id=s,t.className="form-control",t.type=e,t.placeholder=n,this._controlsElement.appendChild(t),t}),i,s)}createSelectListInput(t,e,n,i){return this.createInput(t,(()=>{const t=document.createElement("select");return t.id=i,t.className="form-control",this._controlsElement.appendChild(t),e.forEach((e=>{const n=document.createElement("option");n.innerHTML=e,t.appendChild(n)})),t}),n,i)}createTextInput(t,e="",n,i){return this.createGenericInput(t,"text",e,n,i)}createColorInput(t,e="",n,i){return this.createGenericInput(t,"color",e,n,i)}createNumberInput(t,e="",n,i,s,o,r,a){return this.createGenericRangedInput(t,"number",e,n,i,s,o,r,a)}createSliderInput(t,e="",n,i,s,o,r,a){const l=this.createGenericRangedInput(t,"range",e,n,i,s,o,r,a);return l.classList.add("custom-range"),l}createFileInput(t,e,n=!1,i="",s,o){const r=this.createGenericInput(t,"file",i,s,o);r.accept=e,r.multiple=n;const a=document.createElement("div");a.classList.add("fileInputWrapper"),r.parentElement.replaceChild(a,r);const l=this.createActionButton("Datei auswählen");return a.appendChild(l),a.appendChild(r),l.onclick=()=>r.click(),r.onchange=()=>{l.value=Array.from(r.files).map((t=>t.name)).join("; ")},r}}},614:(t,e,n)=>{var i;n.r(e),n.d(e,{NIL:()=>I,parse:()=>g,stringify:()=>d,v1:()=>m,v3:()=>C,v4:()=>k,v5:()=>x,validate:()=>a,version:()=>D});var s=new Uint8Array(16);function o(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(s)}const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,a=function(t){return"string"==typeof t&&r.test(t)};for(var l=[],c=0;c<256;++c)l.push((c+256).toString(16).substr(1));const d=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(l[t[e+0]]+l[t[e+1]]+l[t[e+2]]+l[t[e+3]]+"-"+l[t[e+4]]+l[t[e+5]]+"-"+l[t[e+6]]+l[t[e+7]]+"-"+l[t[e+8]]+l[t[e+9]]+"-"+l[t[e+10]]+l[t[e+11]]+l[t[e+12]]+l[t[e+13]]+l[t[e+14]]+l[t[e+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n};var h,u,f=0,p=0;const m=function(t,e,n){var i=e&&n||0,s=e||new Array(16),r=(t=t||{}).node||h,a=void 0!==t.clockseq?t.clockseq:u;if(null==r||null==a){var l=t.random||(t.rng||o)();null==r&&(r=h=[1|l[0],l[1],l[2],l[3],l[4],l[5]]),null==a&&(a=u=16383&(l[6]<<8|l[7]))}var c=void 0!==t.msecs?t.msecs:Date.now(),m=void 0!==t.nsecs?t.nsecs:p+1,g=c-f+(m-p)/1e4;if(g<0&&void 0===t.clockseq&&(a=a+1&16383),(g<0||c>f)&&void 0===t.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=c,p=m,u=a;var _=(1e4*(268435455&(c+=122192928e5))+m)%4294967296;s[i++]=_>>>24&255,s[i++]=_>>>16&255,s[i++]=_>>>8&255,s[i++]=255&_;var v=c/4294967296*1e4&268435455;s[i++]=v>>>8&255,s[i++]=255&v,s[i++]=v>>>24&15|16,s[i++]=v>>>16&255,s[i++]=a>>>8|128,s[i++]=255&a;for(var b=0;b<6;++b)s[i+b]=r[b];return e||d(s)},g=function(t){if(!a(t))throw TypeError("Invalid UUID");var e,n=new Uint8Array(16);return n[0]=(e=parseInt(t.slice(0,8),16))>>>24,n[1]=e>>>16&255,n[2]=e>>>8&255,n[3]=255&e,n[4]=(e=parseInt(t.slice(9,13),16))>>>8,n[5]=255&e,n[6]=(e=parseInt(t.slice(14,18),16))>>>8,n[7]=255&e,n[8]=(e=parseInt(t.slice(19,23),16))>>>8,n[9]=255&e,n[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,n[11]=e/4294967296&255,n[12]=e>>>24&255,n[13]=e>>>16&255,n[14]=e>>>8&255,n[15]=255&e,n};function _(t,e,n){function i(t,i,s,o){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));for(var e=[],n=0;n<t.length;++n)e.push(t.charCodeAt(n));return e}(t)),"string"==typeof i&&(i=g(i)),16!==i.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var r=new Uint8Array(16+t.length);if(r.set(i),r.set(t,i.length),(r=n(r))[6]=15&r[6]|e,r[8]=63&r[8]|128,s){o=o||0;for(var a=0;a<16;++a)s[o+a]=r[a];return s}return d(r)}try{i.name=t}catch(t){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}function v(t){return 14+(t+64>>>9<<4)+1}function b(t,e){var n=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(n>>16)<<16|65535&n}function y(t,e,n,i,s,o){return b((r=b(b(e,t),b(i,o)))<<(a=s)|r>>>32-a,n);var r,a}function w(t,e,n,i,s,o,r){return y(e&n|~e&i,t,e,s,o,r)}function E(t,e,n,i,s,o,r){return y(e&i|n&~i,t,e,s,o,r)}function A(t,e,n,i,s,o,r){return y(e^n^i,t,e,s,o,r)}function T(t,e,n,i,s,o,r){return y(n^(e|~i),t,e,s,o,r)}const C=_("v3",48,(function(t){if("string"==typeof t){var e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(var n=0;n<e.length;++n)t[n]=e.charCodeAt(n)}return function(t){for(var e=[],n=32*t.length,i="0123456789abcdef",s=0;s<n;s+=8){var o=t[s>>5]>>>s%32&255,r=parseInt(i.charAt(o>>>4&15)+i.charAt(15&o),16);e.push(r)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[v(e)-1]=e;for(var n=1732584193,i=-271733879,s=-1732584194,o=271733878,r=0;r<t.length;r+=16){var a=n,l=i,c=s,d=o;n=w(n,i,s,o,t[r],7,-680876936),o=w(o,n,i,s,t[r+1],12,-389564586),s=w(s,o,n,i,t[r+2],17,606105819),i=w(i,s,o,n,t[r+3],22,-1044525330),n=w(n,i,s,o,t[r+4],7,-176418897),o=w(o,n,i,s,t[r+5],12,1200080426),s=w(s,o,n,i,t[r+6],17,-1473231341),i=w(i,s,o,n,t[r+7],22,-45705983),n=w(n,i,s,o,t[r+8],7,1770035416),o=w(o,n,i,s,t[r+9],12,-1958414417),s=w(s,o,n,i,t[r+10],17,-42063),i=w(i,s,o,n,t[r+11],22,-1990404162),n=w(n,i,s,o,t[r+12],7,1804603682),o=w(o,n,i,s,t[r+13],12,-40341101),s=w(s,o,n,i,t[r+14],17,-1502002290),n=E(n,i=w(i,s,o,n,t[r+15],22,1236535329),s,o,t[r+1],5,-165796510),o=E(o,n,i,s,t[r+6],9,-1069501632),s=E(s,o,n,i,t[r+11],14,643717713),i=E(i,s,o,n,t[r],20,-373897302),n=E(n,i,s,o,t[r+5],5,-701558691),o=E(o,n,i,s,t[r+10],9,38016083),s=E(s,o,n,i,t[r+15],14,-660478335),i=E(i,s,o,n,t[r+4],20,-405537848),n=E(n,i,s,o,t[r+9],5,568446438),o=E(o,n,i,s,t[r+14],9,-1019803690),s=E(s,o,n,i,t[r+3],14,-187363961),i=E(i,s,o,n,t[r+8],20,1163531501),n=E(n,i,s,o,t[r+13],5,-1444681467),o=E(o,n,i,s,t[r+2],9,-51403784),s=E(s,o,n,i,t[r+7],14,1735328473),n=A(n,i=E(i,s,o,n,t[r+12],20,-1926607734),s,o,t[r+5],4,-378558),o=A(o,n,i,s,t[r+8],11,-2022574463),s=A(s,o,n,i,t[r+11],16,1839030562),i=A(i,s,o,n,t[r+14],23,-35309556),n=A(n,i,s,o,t[r+1],4,-1530992060),o=A(o,n,i,s,t[r+4],11,1272893353),s=A(s,o,n,i,t[r+7],16,-155497632),i=A(i,s,o,n,t[r+10],23,-1094730640),n=A(n,i,s,o,t[r+13],4,681279174),o=A(o,n,i,s,t[r],11,-358537222),s=A(s,o,n,i,t[r+3],16,-722521979),i=A(i,s,o,n,t[r+6],23,76029189),n=A(n,i,s,o,t[r+9],4,-640364487),o=A(o,n,i,s,t[r+12],11,-421815835),s=A(s,o,n,i,t[r+15],16,530742520),n=T(n,i=A(i,s,o,n,t[r+2],23,-995338651),s,o,t[r],6,-198630844),o=T(o,n,i,s,t[r+7],10,1126891415),s=T(s,o,n,i,t[r+14],15,-1416354905),i=T(i,s,o,n,t[r+5],21,-57434055),n=T(n,i,s,o,t[r+12],6,1700485571),o=T(o,n,i,s,t[r+3],10,-1894986606),s=T(s,o,n,i,t[r+10],15,-1051523),i=T(i,s,o,n,t[r+1],21,-2054922799),n=T(n,i,s,o,t[r+8],6,1873313359),o=T(o,n,i,s,t[r+15],10,-30611744),s=T(s,o,n,i,t[r+6],15,-1560198380),i=T(i,s,o,n,t[r+13],21,1309151649),n=T(n,i,s,o,t[r+4],6,-145523070),o=T(o,n,i,s,t[r+11],10,-1120210379),s=T(s,o,n,i,t[r+2],15,718787259),i=T(i,s,o,n,t[r+9],21,-343485551),n=b(n,a),i=b(i,l),s=b(s,c),o=b(o,d)}return[n,i,s,o]}(function(t){if(0===t.length)return[];for(var e=8*t.length,n=new Uint32Array(v(e)),i=0;i<e;i+=8)n[i>>5]|=(255&t[i/8])<<i%32;return n}(t),8*t.length))})),k=function(t,e,n){var i=(t=t||{}).random||(t.rng||o)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e){n=n||0;for(var s=0;s<16;++s)e[n+s]=i[s];return e}return d(i)};function O(t,e,n,i){switch(t){case 0:return e&n^~e&i;case 1:return e^n^i;case 2:return e&n^e&i^n&i;case 3:return e^n^i}}function L(t,e){return t<<e|t>>>32-e}const x=_("v5",80,(function(t){var e=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){var i=unescape(encodeURIComponent(t));t=[];for(var s=0;s<i.length;++s)t.push(i.charCodeAt(s))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);for(var o=t.length/4+2,r=Math.ceil(o/16),a=new Array(r),l=0;l<r;++l){for(var c=new Uint32Array(16),d=0;d<16;++d)c[d]=t[64*l+4*d]<<24|t[64*l+4*d+1]<<16|t[64*l+4*d+2]<<8|t[64*l+4*d+3];a[l]=c}a[r-1][14]=8*(t.length-1)/Math.pow(2,32),a[r-1][14]=Math.floor(a[r-1][14]),a[r-1][15]=8*(t.length-1)&4294967295;for(var h=0;h<r;++h){for(var u=new Uint32Array(80),f=0;f<16;++f)u[f]=a[h][f];for(var p=16;p<80;++p)u[p]=L(u[p-3]^u[p-8]^u[p-14]^u[p-16],1);for(var m=n[0],g=n[1],_=n[2],v=n[3],b=n[4],y=0;y<80;++y){var w=Math.floor(y/20),E=L(m,5)+O(w,g,_,v)+b+e[w]+u[y]>>>0;b=v,v=_,_=L(g,30)>>>0,g=m,m=E}n[0]=n[0]+m>>>0,n[1]=n[1]+g>>>0,n[2]=n[2]+_>>>0,n[3]=n[3]+v>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),I="00000000-0000-0000-0000-000000000000",D=function(t){if(!a(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}},631:t=>{t.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"\n   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"\n   width="100"\n   height="100"\n   viewBox="0 0 100 100"\n   version="1.1"\n   id="svg29180"\n   inkscape:version="1.0.2-2 (e86c870879, 2021-01-15)"\n   sodipodi:docname="alto_clef.svg">\n  <defs\n     id="defs29174" />\n  <sodipodi:namedview\n     id="base"\n     pagecolor="#ffffff"\n     bordercolor="#666666"\n     borderopacity="1.0"\n     inkscape:pageopacity="0.0"\n     inkscape:pageshadow="2"\n     inkscape:zoom="11.313709"\n     inkscape:cx="28.285506"\n     inkscape:cy="27.79028"\n     inkscape:document-units="px"\n     inkscape:current-layer="layer1"\n     inkscape:document-rotation="0"\n     showgrid="false"\n     fit-margin-top="0"\n     fit-margin-left="0"\n     fit-margin-right="0"\n     fit-margin-bottom="0"\n     inkscape:window-width="3840"\n     inkscape:window-height="2050"\n     inkscape:window-x="4468"\n     inkscape:window-y="321"\n     inkscape:window-maximized="1"\n     units="px" />\n  <metadata\n     id="metadata29177">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about="">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label="Ebene 1"\n     inkscape:groupmode="layer"\n     id="layer1"\n     transform="translate(-114.48547,-189.14609)">\n    <circle\n       style="fill:#ff0000;stroke:none;stroke-width:18.8976;stroke-linecap:round"\n       id="path833"\n       cx="156.91188"\n       cy="221.49623"\n       r="21.566757" />\n    <rect\n       style="fill:#00ff00;stroke:none;stroke-width:18.8976;stroke-linecap:round"\n       id="rect835"\n       width="29.610096"\n       height="41.80769"\n       x="122.08687"\n       y="229.36279" />\n    <rect\n       style="fill:#0000ff;stroke:none;stroke-width:18.8976;stroke-linecap:round"\n       id="rect837"\n       width="69.11969"\n       height="27.046835"\n       x="133.84251"\n       y="236.08031" />\n  </g>\n</svg>\n'}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{var t=i;Object.defineProperty(t,"__esModule",{value:!0}),n(169);const e=n(475);window.addEventListener("load",(()=>{new e.SvgPaletteDesigner}))})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,